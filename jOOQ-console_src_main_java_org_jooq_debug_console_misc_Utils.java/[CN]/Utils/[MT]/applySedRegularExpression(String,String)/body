{
  String originalRegEx=regex;
  if (!regex.startsWith("/")) {
    throw new IllegalArgumentException("Invalid expression format: " + originalRegEx);
  }
  regex=regex.substring(1);
  StringBuilder sb=new StringBuilder();
  char[] chars=regex.toCharArray();
  int index1=-1;
  int index2=-1;
  for (int i=0; i < chars.length; i++) {
    char c=chars[i];
switch (c) {
case ';':
      text=applySedRegularExpression(sb.toString(),text,originalRegEx,index1,index2);
    index1=-1;
  index2=-1;
sb=new StringBuilder();
i++;
if (i >= chars.length || chars[i] != '/') {
throw new IllegalArgumentException("Invalid expression format: " + originalRegEx);
}
break;
case '\\':
i++;
if (i >= chars.length) {
throw new IllegalArgumentException("Invalid expression format: " + originalRegEx);
}
switch (chars[i]) {
case '/':
sb.append('/');
break;
case ';':
sb.append(';');
break;
default :
sb.append('\\').append(chars[i]);
break;
}
break;
case '/':
if (index1 == -1) {
index1=sb.length();
}
 else if (index2 == -1) {
index2=sb.length();
}
 else {
throw new IllegalArgumentException("Invalid expression format: " + originalRegEx);
}
break;
default :
sb.append(c);
break;
}
}
if (index1 == -1) {
throw new IllegalArgumentException("Invalid expression format: " + originalRegEx);
}
return applySedRegularExpression(sb.toString(),text,originalRegEx,index1,index2);
}
