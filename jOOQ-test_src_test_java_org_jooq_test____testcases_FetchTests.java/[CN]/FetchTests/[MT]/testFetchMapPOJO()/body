{
  if (TBookPojo() == null) {
    log.info("SKIPPING","Generated POJO tests");
    return;
  }
  Map<Integer,Object> map1=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchMap(TBook_ID(),TBookPojo());
  assertEquals(4,map1.size());
  assertEquals(BOOK_IDS,new ArrayList<Integer>(map1.keySet()));
  List<Entry<Integer,Object>> entries=new ArrayList<Map.Entry<Integer,Object>>(map1.entrySet());
  for (int i=0; i < map1.size(); i++) {
    Entry<Integer,Object> entry=entries.get(i);
    assertEquals(BOOK_IDS.get(i),on(entry.getValue()).call("getId").get());
    assertEquals(BOOK_AUTHOR_IDS.get(i),on(entry.getValue()).call("getAuthorId").get());
    assertEquals(BOOK_TITLES.get(i),on(entry.getValue()).call("getTitle").get());
  }
  try {
    create().selectFrom(TBook()).orderBy(TBook_ID()).fetchMap(TBook_AUTHOR_ID(),TBookPojo());
    fail("Fetching map with the non-unique key - InvalidResultException not thrown.");
  }
 catch (  Throwable t) {
    assertEquals(InvalidResultException.class,t.getClass());
  }
  Map<List<?>,Object> map4=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchMap(new Field<?>[]{TBook_ID(),TBook_LANGUAGE_ID(),TBook_TITLE()},TBookPojo());
  assertEquals(4,map4.keySet().size());
  for (  List<?> keys : map4.keySet()) {
    Object pojo=map4.get(keys);
    assertEquals(keys.get(0),on(pojo).call("getId").get());
    assertEquals(keys.get(1),on(pojo).call("getLanguageId").get());
    assertEquals(keys.get(2),on(pojo).call("getTitle").get());
  }
  try {
    create().selectFrom(TBook()).orderBy(TBook_ID()).fetchMap(new Field<?>[]{TBook_AUTHOR_ID()},TBookPojo());
    fail("Fetching map with the non-unique key - InvalidResultException not thrown.");
  }
 catch (  Throwable t) {
    assertEquals(InvalidResultException.class,t.getClass());
  }
}
