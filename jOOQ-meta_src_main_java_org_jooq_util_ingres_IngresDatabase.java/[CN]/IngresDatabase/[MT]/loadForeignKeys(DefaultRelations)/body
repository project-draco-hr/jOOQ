{
  Result<?> result=create().select(trim(IirefConstraints.REF_SCHEMA_NAME),trim(IirefConstraints.REF_CONSTRAINT_NAME),trim(IirefConstraints.UNIQUE_CONSTRAINT_NAME),trim(IirefConstraints.UNIQUE_SCHEMA_NAME),trim(IirefConstraints.REF_TABLE_NAME),trim(Iikeys.COLUMN_NAME)).from(IICONSTRAINTS).join(IIREF_CONSTRAINTS).on(row(Iiconstraints.CONSTRAINT_NAME,Iiconstraints.SCHEMA_NAME).eq(IirefConstraints.REF_CONSTRAINT_NAME,IirefConstraints.REF_SCHEMA_NAME)).join(IIKEYS).on(row(IirefConstraints.REF_CONSTRAINT_NAME,IirefConstraints.REF_SCHEMA_NAME).eq(Iikeys.CONSTRAINT_NAME,Iikeys.SCHEMA_NAME)).where(Iiconstraints.SCHEMA_NAME.in(getInputSchemata())).and(Iiconstraints.CONSTRAINT_TYPE.equal("R")).orderBy(IirefConstraints.REF_SCHEMA_NAME.asc(),IirefConstraints.REF_TABLE_NAME.asc(),IirefConstraints.REF_CONSTRAINT_NAME.asc(),Iikeys.KEY_POSITION.asc()).fetch();
  for (  Record record : result) {
    SchemaDefinition foreignKeySchema=getSchema(record.getValue(trim(IirefConstraints.REF_SCHEMA_NAME)));
    SchemaDefinition uniqueKeySchema=getSchema(record.getValue(trim(IirefConstraints.UNIQUE_SCHEMA_NAME)));
    String foreignKey=record.getValue(trim(IirefConstraints.REF_CONSTRAINT_NAME));
    String foreignKeyTable=record.getValue(trim(IirefConstraints.REF_TABLE_NAME));
    String foreignKeyColumn=record.getValue(trim(Iikeys.COLUMN_NAME));
    String uniqueKey=record.getValue(trim(IirefConstraints.UNIQUE_CONSTRAINT_NAME));
    TableDefinition referencingTable=getTable(foreignKeySchema,foreignKeyTable);
    if (referencingTable != null) {
      ColumnDefinition referencingColumn=referencingTable.getColumn(foreignKeyColumn);
      relations.addForeignKey(foreignKey,uniqueKey,referencingColumn,uniqueKeySchema);
    }
  }
}
