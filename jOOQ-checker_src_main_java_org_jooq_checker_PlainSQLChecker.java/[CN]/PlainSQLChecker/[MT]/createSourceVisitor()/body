{
  return new SourceVisitor<Void,Void>(getChecker()){
    @Override public Void visitMethodInvocation(    MethodInvocationTree node,    Void p){
      try {
        ExecutableElement elementFromUse=elementFromUse(node);
        PlainSQL plainSQL=elementFromUse.getAnnotation(PlainSQL.class);
        if (plainSQL != null) {
          Element enclosing=elementFromDeclaration(enclosingMethod(getPath(root,node)));
          boolean allowed=false;
          moveUpEnclosingLoop:           while (enclosing != null) {
            if (enclosing.getAnnotation(Allow.PlainSQL.class) != null) {
              allowed=true;
              break moveUpEnclosingLoop;
            }
            enclosing=enclosing.getEnclosingElement();
          }
          if (!allowed)           error(node,"Plain SQL usage not allowed at current scope. Use @Allow.PlainSQL.");
        }
      }
 catch (      final Exception e) {
        print(new Printer(){
          @Override public void print(          PrintWriter t){
            e.printStackTrace(t);
          }
        }
);
      }
      return super.visitMethodInvocation(node,p);
    }
  }
;
}
