{
  List<String> result=new ArrayList<String>();
  if (clazz != null) {
    for (    String c : clazz) {
      if (c.contains(".")) {
        if (fullyQualifiedTypes == null || !fullyQualifiedTypes.matcher(c).matches()) {
          Matcher m=REF_PATTERN.matcher(c);
          if (m.find()) {
            List<String> split=Arrays.asList(m.group(1).split("\\."));
            String qualifiedType=StringUtils.join(split.subList(0,split.size() - keepSegments + 1).toArray(),".");
            String unqualifiedType=split.get(split.size() - keepSegments);
            String remainder=StringUtils.join(split.subList(split.size() - keepSegments,split.size()).toArray(),".");
            if (!className.equals(unqualifiedType) && (!unqualifiedTypes.containsKey(unqualifiedType) || qualifiedType.equals(unqualifiedTypes.get(unqualifiedType)))) {
              unqualifiedTypes.put(unqualifiedType,qualifiedType);
              qualifiedTypes.add(qualifiedType);
              String generic=m.group(2);
              c=remainder + (generic.startsWith("<") || generic.startsWith("[") ? generic.substring(0,1) + ref(generic.substring(1,generic.length() - 1)) + generic.substring(generic.length() - 1) : generic);
            }
          }
        }
      }
      result.add(c);
    }
  }
  return result;
}
