{
  if (TBookPojo() == null) {
    log.info("SKIPPING","Generated POJO tests");
    return;
  }
  Map<Integer,List<Object>> map1=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(TBook_ID(),TBookPojo());
  assertEquals(4,map1.size());
  assertEquals(BOOK_IDS,new ArrayList<Integer>(map1.keySet()));
  List<Entry<Integer,List<Object>>> entries=new ArrayList<Map.Entry<Integer,List<Object>>>(map1.entrySet());
  for (int i=0; i < map1.size(); i++) {
    Entry<Integer,List<Object>> entry=entries.get(i);
    assertEquals(1,entry.getValue().size());
    assertEquals(BOOK_IDS.get(i),on(entry.getValue().get(0)).call("getId").get());
    assertEquals(BOOK_AUTHOR_IDS.get(i),on(entry.getValue().get(0)).call("getAuthorId").get());
    assertEquals(BOOK_TITLES.get(i),on(entry.getValue().get(0)).call("getTitle").get());
  }
  Map<Integer,List<Object>> map2=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(TBook_AUTHOR_ID(),TBookPojo());
  assertEquals(2,map2.size());
  assertEquals(AUTHOR_IDS,new ArrayList<Integer>(map2.keySet()));
  Iterator<Entry<Integer,List<Object>>> it=map2.entrySet().iterator();
  Entry<Integer,List<Object>> entry21=it.next();
  assertEquals(2,entry21.getValue().size());
  assertEquals(BOOK_IDS.get(0),on(entry21.getValue().get(0)).call("getId").get());
  assertEquals(BOOK_AUTHOR_IDS.get(0),on(entry21.getValue().get(0)).call("getAuthorId").get());
  assertEquals(BOOK_TITLES.get(0),on(entry21.getValue().get(0)).call("getTitle").get());
  assertEquals(BOOK_IDS.get(1),on(entry21.getValue().get(1)).call("getId").get());
  assertEquals(BOOK_AUTHOR_IDS.get(1),on(entry21.getValue().get(1)).call("getAuthorId").get());
  assertEquals(BOOK_TITLES.get(1),on(entry21.getValue().get(1)).call("getTitle").get());
  Entry<Integer,List<Object>> entry22=it.next();
  assertEquals(2,entry22.getValue().size());
  assertEquals(BOOK_IDS.get(2),on(entry22.getValue().get(0)).call("getId").get());
  assertEquals(BOOK_AUTHOR_IDS.get(2),on(entry22.getValue().get(0)).call("getAuthorId").get());
  assertEquals(BOOK_TITLES.get(2),on(entry22.getValue().get(0)).call("getTitle").get());
  assertEquals(BOOK_IDS.get(3),on(entry22.getValue().get(1)).call("getId").get());
  assertEquals(BOOK_AUTHOR_IDS.get(3),on(entry22.getValue().get(1)).call("getAuthorId").get());
  assertEquals(BOOK_TITLES.get(3),on(entry22.getValue().get(1)).call("getTitle").get());
  assertFalse(it.hasNext());
  Map<List<?>,List<Object>> map3=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(new Field<?>[]{TBook_AUTHOR_ID(),TBook_LANGUAGE_ID()},TBookPojo());
  Iterator<Entry<List<?>,List<Object>>> iterator=map3.entrySet().iterator();
  Entry<List<?>,List<Object>> entry1_en=iterator.next();
  assertEquals(2,entry1_en.getValue().size());
  assertEquals(entry1_en.getKey().get(0),on(entry1_en.getValue().get(0)).call("getAuthorId").get());
  assertEquals(entry1_en.getKey().get(0),on(entry1_en.getValue().get(1)).call("getAuthorId").get());
  assertEquals(entry1_en.getKey().get(1),on(entry1_en.getValue().get(0)).call("getLanguageId").get());
  assertEquals(entry1_en.getKey().get(1),on(entry1_en.getValue().get(1)).call("getLanguageId").get());
  Entry<List<?>,List<Object>> entry2_pt=iterator.next();
  assertEquals(1,entry2_pt.getValue().size());
  assertEquals(entry2_pt.getKey().get(0),on(entry2_pt.getValue().get(0)).call("getAuthorId").get());
  assertEquals(entry2_pt.getKey().get(1),on(entry2_pt.getValue().get(0)).call("getLanguageId").get());
  Entry<List<?>,List<Object>> entry2_de=iterator.next();
  assertEquals(1,entry2_de.getValue().size());
  assertEquals(entry2_de.getKey().get(0),on(entry2_de.getValue().get(0)).call("getAuthorId").get());
  assertEquals(entry2_de.getKey().get(1),on(entry2_de.getValue().get(0)).call("getLanguageId").get());
  assertFalse(iterator.hasNext());
  Map<List<?>,List<Object>> map4=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(new Field<?>[]{TBook_ID(),TBook_LANGUAGE_ID(),TBook_TITLE()},TBookPojo());
  assertEquals(4,map4.size());
  for (  List<?> keyList : map4.keySet()) {
    List<Object> result=map4.get(keyList);
    assertEquals(1,result.size());
    assertEquals(keyList.get(0),on(result.get(0)).call("getId").get());
    assertEquals(keyList.get(1),on(result.get(0)).call("getLanguageId").get());
    assertEquals(keyList.get(2),on(result.get(0)).call("getTitle").get());
  }
}
