{
  Map<Integer,Result<B>> map1=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(TBook_ID());
  for (  Entry<Integer,Result<B>> entry : map1.entrySet()) {
    assertEquals(1,entry.getValue().size());
    assertEquals(entry.getKey(),entry.getValue().get(0).getValue(TBook_ID()));
  }
  assertEquals(4,map1.size());
  assertEquals(BOOK_IDS,new ArrayList<Integer>(map1.keySet()));
  Map<Integer,Result<B>> map2=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(TBook_AUTHOR_ID());
  assertEquals(2,map2.size());
  assertEquals(AUTHOR_IDS,new ArrayList<Integer>(map2.keySet()));
  Iterator<Entry<Integer,Result<B>>> it=map2.entrySet().iterator();
  Entry<Integer,Result<B>> entry21=it.next();
  assertEquals(2,entry21.getValue().size());
  assertEquals(1,(int)entry21.getValue().get(0).getValue(TBook_ID()));
  assertEquals(2,(int)entry21.getValue().get(1).getValue(TBook_ID()));
  Entry<Integer,Result<B>> entry22=it.next();
  assertEquals(2,entry22.getValue().size());
  assertEquals(3,(int)entry22.getValue().get(0).getValue(TBook_ID()));
  assertEquals(4,(int)entry22.getValue().get(1).getValue(TBook_ID()));
  assertFalse(it.hasNext());
  Map<Integer,List<String>> map3=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(TBook_ID(),TBook_TITLE());
  ArrayList<List<String>> map3Values=new ArrayList<List<String>>(map3.values());
  assertEquals(4,map3.size());
  assertEquals(BOOK_IDS,new ArrayList<Integer>(map3.keySet()));
  for (int i=0; i < 4; i++) {
    assertEquals(1,map3Values.get(i).size());
    assertEquals(BOOK_TITLES.get(i),map3Values.get(i).get(0));
  }
  Map<Integer,List<String>> map4=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(TBook_AUTHOR_ID(),TBook_TITLE());
  ArrayList<List<String>> map4Values=new ArrayList<List<String>>(map4.values());
  assertEquals(2,map4.size());
  assertEquals(AUTHOR_IDS,new ArrayList<Integer>(map4.keySet()));
  for (int i=0; i < 2; i++) {
    assertEquals(2,map4Values.get(i).size());
    assertEquals(BOOK_TITLES.get(i * 2 + 0),map4Values.get(i).get(0));
    assertEquals(BOOK_TITLES.get(i * 2 + 1),map4Values.get(i).get(1));
  }
  Map<Record,Result<B>> map5=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(new Field<?>[]{TBook_AUTHOR_ID(),TBook_LANGUAGE_ID()});
  Iterator<Entry<Record,Result<B>>> iterator=map5.entrySet().iterator();
  Entry<Record,Result<B>> entry1_en=iterator.next();
  assertEquals(2,entry1_en.getValue().size());
  assertEquals(entry1_en.getKey().getValue(0),entry1_en.getValue().get(0).getValue(TBook_AUTHOR_ID()));
  assertEquals(entry1_en.getKey().getValue(0),entry1_en.getValue().get(1).getValue(TBook_AUTHOR_ID()));
  assertEquals(entry1_en.getKey().getValue(1),entry1_en.getValue().get(0).getValue(TBook_LANGUAGE_ID()));
  assertEquals(entry1_en.getKey().getValue(1),entry1_en.getValue().get(1).getValue(TBook_LANGUAGE_ID()));
  Entry<Record,Result<B>> entry2_pt=iterator.next();
  assertEquals(1,entry2_pt.getValue().size());
  assertEquals(entry2_pt.getKey().getValue(0),entry2_pt.getValue().get(0).getValue(TBook_AUTHOR_ID()));
  assertEquals(entry2_pt.getKey().getValue(1),entry2_pt.getValue().get(0).getValue(TBook_LANGUAGE_ID()));
  Entry<Record,Result<B>> entry2_de=iterator.next();
  assertEquals(1,entry2_de.getValue().size());
  assertEquals(entry2_de.getKey().getValue(0),entry2_de.getValue().get(0).getValue(TBook_AUTHOR_ID()));
  assertEquals(entry2_de.getKey().getValue(1),entry2_de.getValue().get(0).getValue(TBook_LANGUAGE_ID()));
  assertFalse(iterator.hasNext());
  Map<Record,Result<B>> map6=create().selectFrom(TBook()).orderBy(TBook_ID()).fetchGroups(new Field<?>[]{TBook_ID(),TBook_LANGUAGE_ID(),TBook_TITLE()});
  assertEquals(4,map6.size());
  for (  Record key : map6.keySet()) {
    Result<B> result=map6.get(key);
    assertEquals(1,result.size());
    assertEquals(key.getValue(0),result.get(0).getValue(TBook_ID()));
    assertEquals(key.getValue(1),result.get(0).getValue(TBook_LANGUAGE_ID()));
    assertEquals(key.getValue(2),result.get(0).getValue(TBook_TITLE()));
  }
}
