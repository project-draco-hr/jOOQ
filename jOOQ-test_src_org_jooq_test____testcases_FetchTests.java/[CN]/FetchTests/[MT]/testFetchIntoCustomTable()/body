{
switch (getDialect()) {
case ASE:
case INGRES:
case POSTGRES:
    log.info("SKIPPING","fetchInto() tests");
  return;
}
Result<BookRecord> result=create().select(TBook_ID(),TBook_TITLE(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),TAuthor_DATE_OF_BIRTH()).from(TBook()).join(TAuthor()).on(TBook_AUTHOR_ID().equal(TAuthor_ID())).orderBy(TBook_ID()).fetchInto(BookTable.BOOK);
assertEquals(4,result.size());
assertEquals(BOOK_IDS_SHORT,result.getValues(3));
assertEquals(BOOK_IDS_SHORT,result.getValues(TBook_ID()));
assertEquals(BOOK_IDS_SHORT,result.getValues(BookTable.ID));
assertEquals(Short.valueOf((short)1),result.getValue(0,BookTable.ID));
assertEquals(Short.valueOf((short)2),result.getValue(1,BookTable.ID));
assertEquals(Short.valueOf((short)3),result.getValue(2,BookTable.ID));
assertEquals(Short.valueOf((short)4),result.getValue(3,BookTable.ID));
assertEquals(BOOK_TITLES,result.getValues(4));
assertEquals(BOOK_TITLES,result.getValues(TBook_TITLE()));
assertEquals(BOOK_TITLES,result.getValues(BookTable.TITLE));
assertEquals(BOOK_FIRST_NAMES,result.getValues(0));
assertEquals(BOOK_FIRST_NAMES,result.getValues(TAuthor_FIRST_NAME()));
assertEquals(BOOK_FIRST_NAMES,result.getValues(BookTable.FIRST_NAME));
assertEquals(BOOK_LAST_NAMES,result.getValues(2));
assertEquals(BOOK_LAST_NAMES,result.getValues(TAuthor_LAST_NAME()));
assertEquals(BOOK_LAST_NAMES,result.getValues(BookTable.LAST_NAME));
assertEquals(Collections.nCopies(4,null),result.getValues(1));
assertEquals(Collections.nCopies(4,null),result.getValues(BookTable.UNMATCHED));
}
