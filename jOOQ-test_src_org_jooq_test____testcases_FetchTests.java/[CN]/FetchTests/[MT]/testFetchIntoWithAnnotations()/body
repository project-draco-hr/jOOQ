{
switch (getDialect()) {
case ASE:
case CUBRID:
case INGRES:
case POSTGRES:
    log.info("SKIPPING","fetchInto() tests");
  return;
}
Select<?> select=create().select(TBook_ID(),TBook_TITLE(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),TAuthor_DATE_OF_BIRTH()).from(TBook()).join(TAuthor()).on(TBook_AUTHOR_ID().equal(TAuthor_ID())).orderBy(TBook_ID());
List<BookWithAnnotations> result1=select.fetchInto(BookWithAnnotations.class);
List<IBookWithAnnotations> result2=select.fetchInto(IBookWithAnnotations.class);
assertEquals(4,result1.size());
assertEquals(4,result2.size());
assertEquals(1,(int)result1.get(0).id);
assertEquals(2,(int)result1.get(1).id);
assertEquals(3,(int)result1.get(2).id);
assertEquals(4,(int)result1.get(3).id);
assertEquals(1,result1.get(0).id2);
assertEquals(2,result1.get(1).id2);
assertEquals(3,result1.get(2).id2);
assertEquals(4,result1.get(3).id2);
assertEquals(1,result1.get(0).id3);
assertEquals(2,result1.get(1).id3);
assertEquals(3,result1.get(2).id3);
assertEquals(4,result1.get(3).id3);
assertEquals(Long.valueOf(1),result1.get(0).id4);
assertEquals(Long.valueOf(2),result1.get(1).id4);
assertEquals(Long.valueOf(3),result1.get(2).id4);
assertEquals(Long.valueOf(4),result1.get(3).id4);
assertEquals(1L,result1.get(0).id5);
assertEquals(2L,result1.get(1).id5);
assertEquals(3L,result1.get(2).id5);
assertEquals(4L,result1.get(3).id5);
assertEquals(1,(int)result2.get(0).getId());
assertEquals(2,(int)result2.get(1).getId());
assertEquals(3,(int)result2.get(2).getId());
assertEquals(4,(int)result2.get(3).getId());
assertEquals("1984",result1.get(0).title);
assertEquals("Animal Farm",result1.get(1).title);
assertEquals("O Alquimista",result1.get(2).title);
assertEquals("Brida",result1.get(3).title);
assertEquals("George",result1.get(0).firstName);
assertEquals("George",result1.get(1).firstName);
assertEquals("Paulo",result1.get(2).firstName);
assertEquals("Paulo",result1.get(3).firstName);
assertEquals("George",result1.get(0).firstName2);
assertEquals("George",result1.get(1).firstName2);
assertEquals("Paulo",result1.get(2).firstName2);
assertEquals("Paulo",result1.get(3).firstName2);
assertEquals("Orwell",result1.get(0).lastName);
assertEquals("Orwell",result1.get(1).lastName);
assertEquals("Coelho",result1.get(2).lastName);
assertEquals("Coelho",result1.get(3).lastName);
assertEquals("Orwell",result1.get(0).lastName2);
assertEquals("Orwell",result1.get(1).lastName2);
assertEquals("Coelho",result1.get(2).lastName2);
assertEquals("Coelho",result1.get(3).lastName2);
assertEquals("Orwell",result2.get(0).getLAST_NAME());
assertEquals("Orwell",result2.get(1).getLAST_NAME());
assertEquals("Coelho",result2.get(2).getLAST_NAME());
assertEquals("Coelho",result2.get(3).getLAST_NAME());
try {
create().selectFrom(TAuthor()).fetchInto(AbstractList.class);
fail();
}
 catch (MappingException expected) {
}
create().selectFrom(TAuthor()).fetchInto(Math.class);
List<DatesWithAnnotations> calendars=create().select(TAuthor_DATE_OF_BIRTH()).from(TAuthor()).orderBy(TAuthor_ID()).fetchInto(DatesWithAnnotations.class);
assertEquals(2,calendars.size());
for (int index : asList(0,1)) {
assertEquals(calendars.get(index).cal1,calendars.get(index).cal2);
assertEquals(calendars.get(index).cal1,calendars.get(index).cal3);
assertEquals(calendars.get(index).date1,calendars.get(index).date2);
assertEquals(calendars.get(index).date1,calendars.get(index).date3);
assertEquals(calendars.get(index).long1,calendars.get(index).long2);
assertEquals(calendars.get(index).long1,calendars.get(index).long3);
assertEquals(calendars.get(index).primitiveLong1,calendars.get(index).primitiveLong2);
assertEquals(calendars.get(index).primitiveLong1,calendars.get(index).primitiveLong3);
assertEquals(calendars.get(index).cal1.getTime(),calendars.get(index).date1);
assertEquals(calendars.get(index).cal1.getTime().getTime(),calendars.get(index).date1.getTime());
assertEquals(calendars.get(index).cal1.getTime().getTime(),calendars.get(index).long1.longValue());
assertEquals(calendars.get(index).cal1.getTime().getTime(),calendars.get(index).primitiveLong1);
}
A author=create().newRecord(TAuthor());
DatesWithAnnotations dates=author.into(DatesWithAnnotations.class);
assertNull(dates.cal1);
assertNull(dates.cal2);
assertNull(dates.cal3);
assertNull(dates.date1);
assertNull(dates.date2);
assertNull(dates.date3);
assertNull(dates.long1);
assertNull(dates.long2);
assertNull(dates.long3);
assertEquals(0L,dates.primitiveLong1);
assertEquals(0L,dates.primitiveLong2);
assertEquals(0L,dates.primitiveLong3);
author=create().newRecord(TAuthor());
author.setValue(TAuthor_DATE_OF_BIRTH(),new Date(1L));
dates=author.into(DatesWithAnnotations.class);
assertEquals(1L,dates.cal1.getTime().getTime());
assertEquals(1L,dates.cal2.getTime().getTime());
assertEquals(1L,dates.cal3.getTime().getTime());
assertEquals(1L,dates.date1.getTime());
assertEquals(1L,dates.date2.getTime());
assertEquals(1L,dates.date3.getTime());
assertEquals(1L,(long)dates.long1);
assertEquals(1L,(long)dates.long2);
assertEquals(1L,(long)dates.long3);
assertEquals(1L,dates.primitiveLong1);
assertEquals(1L,dates.primitiveLong2);
assertEquals(1L,dates.primitiveLong3);
}
