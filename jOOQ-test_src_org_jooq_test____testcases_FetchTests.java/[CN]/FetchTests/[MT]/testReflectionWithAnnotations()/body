{
switch (getDialect()) {
case ASE:
case CUBRID:
case INGRES:
case POSTGRES:
    log.info("SKIPPING","fetchInto() tests");
  return;
}
A author1=create().newRecord(TAuthor());
for (CharWithAnnotations c1 : asList(author1.into(CharWithAnnotations.class),author1.into(new CharWithAnnotations()))) {
assertEquals((char)0,c1.id1);
assertEquals(null,c1.id2);
assertEquals((char)0,c1.last1);
assertEquals(null,c1.last2);
}
A author2=create().newRecord(TAuthor());
author2.setValue(TAuthor_ID(),1);
author2.setValue(TAuthor_LAST_NAME(),"a");
for (CharWithAnnotations c2 : asList(author2.into(CharWithAnnotations.class),author2.into(new CharWithAnnotations()))) {
assertEquals('1',c2.id1);
assertEquals('1',c2.id2.charValue());
assertEquals('a',c2.last1);
assertEquals('a',c2.last2.charValue());
A author3=create().newRecord(TAuthor(),c2);
assertEquals('1',author3.getValue(TAuthor_ID(),char.class).charValue());
assertEquals('1',author3.getValue(TAuthor_ID(),Character.class).charValue());
assertEquals('a',author3.getValue(TAuthor_LAST_NAME(),char.class).charValue());
assertEquals('a',author3.getValue(TAuthor_LAST_NAME(),Character.class).charValue());
}
assertEquals(create().newRecord(TBook()),create().newRecord(TBook(),new StaticWithAnnotations()));
create().newRecord(TBook()).into(StaticWithAnnotations.class);
assertEquals(13,StaticWithAnnotations.ID);
B book=create().newRecord(TBook());
book.setValue(TBook_ID(),new FinalWithAnnotations().ID);
assertEquals(book,create().newRecord(TBook(),new FinalWithAnnotations()));
FinalWithAnnotations f=create().newRecord(TBook()).into(FinalWithAnnotations.class);
assertEquals(f.ID,new FinalWithAnnotations().ID);
}
