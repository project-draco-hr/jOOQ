{
  jOOQAbstractTest.reset=false;
  Result<B> result1=create().select(TBook_ID(),TBook_TITLE(),TBook_AUTHOR_ID(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME()).from(TBook()).join(TAuthor()).on(TBook_AUTHOR_ID().equal(TAuthor_ID())).orderBy(TBook_ID()).fetch().into(TBook());
  assertEquals(4,result1.size());
  assertEquals(BOOK_IDS,result1.getValues(TBook_ID()));
  assertEquals(BOOK_TITLES,result1.getValues(TBook_TITLE()));
  assertEquals(BOOK_AUTHOR_IDS,result1.getValues(TBook_AUTHOR_ID()));
  assertEquals(BOOK_NULLS,result1.getValues(TBook_PUBLISHED_IN()));
  assertNull(result1.getField(TAuthor_FIRST_NAME()));
  assertNull(result1.getField(TAuthor_LAST_NAME()));
  result1.get(0).setValue(TBook_TITLE(),"Changed");
  assertEquals(1,result1.get(0).store());
  Result<B> books1=create().selectFrom(TBook()).orderBy(TBook_ID()).fetch();
  assertEquals(4,books1.size());
  assertEquals(BOOK_IDS,books1.getValues(TBook_ID()));
  assertEquals(1,(int)books1.getValue(0,TBook_ID()));
  assertEquals(1,(int)books1.getValue(0,TBook_AUTHOR_ID()));
  assertEquals("Changed",books1.getValue(0,TBook_TITLE()));
  B book=create().select(TBook_TITLE(),TBook_AUTHOR_ID(),TBook_PUBLISHED_IN(),TBook_LANGUAGE_ID()).from(TBook()).where(TBook_ID().equal(2)).fetchOne().into(TBook());
  assertNotNull(book);
  assertEquals("Animal Farm",book.getValue(TBook_TITLE()));
  assertNull(book.getValue(TBook_ID()));
  book.setValue(TBook_ID(),5);
  assertEquals(1,book.store());
  Result<B> books2=create().selectFrom(TBook()).orderBy(TBook_ID()).fetch();
  assertEquals(5,books2.size());
  assertEquals("Animal Farm",books2.getValue(4,TBook_TITLE()));
}
