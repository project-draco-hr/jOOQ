{
  setDefaultCloseOperation(DISPOSE_ON_CLOSE);
  JMenuBar menuBar=new JMenuBar();
  JMenu fileMenu=new JMenu("File");
  fileMenu.setMnemonic('F');
  JMenuItem exitMenuItem=new JMenuItem("Exit");
  exitMenuItem.setMnemonic('x');
  exitMenuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      try {
        performCleanup();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
switch (getDefaultCloseOperation()) {
case HIDE_ON_CLOSE:
        setVisible(false);
      break;
case DISPOSE_ON_CLOSE:
    dispose();
  break;
case EXIT_ON_CLOSE:
System.exit(0);
break;
case DO_NOTHING_ON_CLOSE:
default :
break;
}
}
}
);
fileMenu.add(exitMenuItem);
menuBar.add(fileMenu);
JMenu helpMenu=new JMenu("Help");
helpMenu.setMnemonic('H');
JMenuItem aboutMenuItem=new JMenuItem("About");
aboutMenuItem.setMnemonic('A');
aboutMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
final JDialog aboutDialog=new JDialog(Console.this,"About jOOQ Console",ModalityType.APPLICATION_MODAL);
aboutDialog.setResizable(false);
Container contentPane=aboutDialog.getContentPane();
JPanel centerPane=new JPanel(new GridBagLayout());
centerPane.setBorder(BorderFactory.createEmptyBorder(20,20,20,20));
centerPane.add(new JLabel("jOOQ library: "),new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
centerPane.add(new JLabel("Lukas Eder"),new GridBagConstraints(1,0,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
centerPane.add(new JLabel("jOOQ Console: "),new GridBagConstraints(0,1,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));
centerPane.add(new JLabel("Christopher Deckers"),new GridBagConstraints(1,1,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));
centerPane.add(new JLabel("License: "),new GridBagConstraints(0,2,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));
centerPane.add(new JLabel("Apache License, Version 2.0"),new GridBagConstraints(1,2,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));
centerPane.add(new JLabel("Web site: "),new GridBagConstraints(0,3,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));
JLabel siteLabel=new JLabel("http://www.jooq.org");
siteLabel.setForeground(Color.BLUE);
Map<TextAttribute,Object> attributeMap=new HashMap<TextAttribute,Object>();
attributeMap.put(TextAttribute.UNDERLINE,TextAttribute.UNDERLINE_LOW_ONE_PIXEL);
siteLabel.setFont(siteLabel.getFont().deriveFont(attributeMap));
siteLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
siteLabel.addMouseListener(new MouseAdapter(){
@Override public void mousePressed(MouseEvent e){
try {
Desktop.getDesktop().browse(new URI("http://www.jooq.org"));
}
 catch (Exception ex) {
ex.printStackTrace();
}
}
}
);
centerPane.add(siteLabel,new GridBagConstraints(1,3,1,1,0,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,0),0,0));
contentPane.add(centerPane,BorderLayout.CENTER);
JPanel southPane=new JPanel(new FlowLayout(FlowLayout.RIGHT));
JButton okButton=new JButton("OK");
okButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
aboutDialog.dispose();
}
}
);
southPane.add(okButton);
contentPane.add(southPane,BorderLayout.SOUTH);
aboutDialog.pack();
aboutDialog.setLocationRelativeTo(Console.this);
aboutDialog.setVisible(true);
}
}
);
helpMenu.add(aboutMenuItem);
menuBar.add(helpMenu);
setJMenuBar(menuBar);
mainTabbedPane=new JTabbedPane();
String title="jOOQ Console";
setTitle(title);
if (debugger.isExecutionSupported()) {
addEditorTab();
}
if (isShowingLoggingTab) {
addLoggerTab();
}
getContentPane().add(mainTabbedPane,BorderLayout.CENTER);
setLocationByPlatform(true);
setSize(800,600);
addNotify();
if (debugger.isExecutionSupported()) {
getFocusedEditorPane().adjustDefaultFocus();
}
addWindowListener(new WindowAdapter(){
@Override public void windowClosing(WindowEvent e){
try {
performCleanup();
}
 catch (Exception ex) {
ex.printStackTrace();
}
}
}
);
}
