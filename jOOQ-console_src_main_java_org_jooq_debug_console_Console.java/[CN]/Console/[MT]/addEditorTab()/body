{
  JPanel editorsPane=new JPanel(new BorderLayout());
  editorsPane.setBorder(BorderFactory.createEmptyBorder(2,5,5,5));
  editorsPane.setOpaque(false);
  final String[] tableNames=debugger.createStatementExecutor().getTableNames();
  final JList tableNamesJList=new JList(tableNames);
  tableNamesJList.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (e.getClickCount() == 2 && e.getButton() == MouseEvent.BUTTON1) {
        Object[] values=tableNamesJList.getSelectedValues();
        if (values.length == 1) {
          getFocusedEditorPane().evaluate("SELECT * FROM " + values[0]);
        }
      }
    }
  }
);
  editorTabbedPane=new JTabbedPane();
  editorTabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
  editorTabbedPane.addTab("New...",new JPanel());
  editorTabbedPane.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!isAdjusting && editorTabbedPane.getSelectedIndex() == editorTabbedPane.getTabCount() - 1) {
        addSQLEditorPane();
      }
    }
  }
);
  JPanel tableNamePane=new JPanel(new BorderLayout());
  tableNamePane.setOpaque(false);
  JPanel tableNameFilterPane=new JPanel(new BorderLayout());
  tableNameFilterPane.setBorder(BorderFactory.createEmptyBorder(0,0,2,0));
  tableNameFilterPane.setOpaque(false);
  final JTextField tableNameFilterTextField=new JTextField();
  tableNameFilterTextField.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void removeUpdate(    DocumentEvent e){
      filter();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      filter();
    }
    @Override public void changedUpdate(    DocumentEvent e){
      filter();
    }
    private void filter(){
      String filterText=tableNameFilterTextField.getText();
      final List<String> tableNameList=new ArrayList<String>(tableNames.length);
      if (filterText == null || filterText.length() == 0) {
        tableNameList.addAll(Arrays.asList(tableNames));
      }
 else {
        String[] filterTexts=filterText.split(" ");
        for (        String tableName : tableNames) {
          boolean isAccepted=true;
          int lastIndex=0;
          for (int j=0; j < filterTexts.length; j++) {
            String filter=filterTexts[j];
            boolean isCaseSensitive=false;
            for (int i=filter.length() - 1; i >= 0; i--) {
              if (Character.isUpperCase(filter.charAt(i))) {
                isCaseSensitive=true;
                break;
              }
            }
            int index;
            if (isCaseSensitive) {
              index=tableName.indexOf(filter,lastIndex);
            }
 else {
              index=tableName.toLowerCase(Locale.ENGLISH).indexOf(filter.toLowerCase(Locale.ENGLISH),lastIndex);
            }
            if (index < 0) {
              isAccepted=false;
              break;
            }
            lastIndex=index + filter.length() + 1;
          }
          if (isAccepted) {
            tableNameList.add(tableName);
          }
        }
      }
      tableNamesJList.setModel(new AbstractListModel(){
        @Override public int getSize(){
          return tableNameList.size();
        }
        @Override public String getElementAt(        int i){
          return tableNameList.get(i);
        }
      }
);
    }
  }
);
  tableNameFilterTextField.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ListModel model=tableNamesJList.getModel();
      if (model.getSize() >= 1) {
        Object selectedValue=tableNamesJList.getSelectedValue();
        getFocusedEditorPane().evaluate("SELECT * FROM " + (selectedValue == null ? model.getElementAt(0) : selectedValue));
      }
    }
  }
);
  tableNameFilterTextField.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DOWN) {
        ListModel model=tableNamesJList.getModel();
        if (model.getSize() >= 1) {
          tableNamesJList.setSelectedIndex(0);
          tableNamesJList.requestFocus();
        }
      }
    }
  }
);
  tableNamesJList.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
{
          if (tableNamesJList.getSelectedIndex() == 0) {
            tableNamesJList.clearSelection();
            tableNameFilterTextField.requestFocus();
          }
          break;
        }
case KeyEvent.VK_ENTER:
{
        Object selectedValue=tableNamesJList.getSelectedValue();
        if (selectedValue != null) {
          getFocusedEditorPane().evaluate("SELECT * FROM " + selectedValue);
        }
        break;
      }
  }
}
}
);
tableNameFilterPane.add(tableNameFilterTextField,BorderLayout.CENTER);
tableNamePane.add(tableNameFilterPane,BorderLayout.NORTH);
tableNamePane.add(new JScrollPane(tableNamesJList),BorderLayout.CENTER);
JSplitPane horizontalSplitPane=new InvisibleSplitPane(JSplitPane.HORIZONTAL_SPLIT,true,tableNamePane,editorTabbedPane);
horizontalSplitPane.setOpaque(false);
addSQLEditorPane();
editorsPane.add(horizontalSplitPane,BorderLayout.CENTER);
mainTabbedPane.addTab("Editor",editorsPane);
}
