{
  if (connection == null) {
    String packages=getProperties().getProperty("packages");
    if (isBlank(packages)) {
      packages="";
      log.warn("No packages defined","It is highly recommended that you provide explicit packages to scan");
    }
    try {
      connection=DriverManager.getConnection("jdbc:h2:mem:jooq-meta-extensions","sa","");
      MetadataSources metadata=new MetadataSources(new StandardServiceRegistryBuilder().applySetting("hibernate.dialect","org.hibernate.dialect.H2Dialect").applySetting("javax.persistence.schema-generation-connection",connection).applySetting(AvailableSettings.CONNECTION_PROVIDER,new ConnectionProvider(){
        @SuppressWarnings("rawtypes") @Override public boolean isUnwrappableAs(        Class unwrapType){
          return false;
        }
        @Override public <T>T unwrap(        Class<T> unwrapType){
          return null;
        }
        @Override public Connection getConnection(){
          return connection;
        }
        @Override public void closeConnection(        Connection conn) throws SQLException {
        }
        @Override public boolean supportsAggressiveRelease(){
          return true;
        }
      }
).build());
      ClassPathScanningCandidateComponentProvider scanner=new ClassPathScanningCandidateComponentProvider(true);
      scanner.addIncludeFilter(new AnnotationTypeFilter(Entity.class));
      for (      String pkg : packages.split(","))       for (      BeanDefinition def : scanner.findCandidateComponents(defaultIfBlank(pkg,"").trim()))       metadata.addAnnotatedClass(Class.forName(def.getBeanClassName()));
      SchemaExport export=new SchemaExport();
      export.create(EnumSet.of(TargetType.DATABASE),metadata.buildMetadata());
    }
 catch (    Exception e) {
      throw new DataAccessException("Error while exporting schema",e);
    }
  }
  return DSL.using(connection);
}
