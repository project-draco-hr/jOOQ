{
  Field<BigDecimal> sum1=sum(FIELD_ID1);
  assertEquals(BigDecimal.class,sum1.getType());
  assertEquals("sum(`TABLE1`.`ID1`)",r_refI().render(sum1));
  assertEquals("sum(`TABLE1`.`ID1`)",r_ref().render(sum1));
  assertEquals("sum(`TABLE1`.`ID1`)",r_decI().render(sum1));
  assertEquals("sum(`TABLE1`.`ID1`)",r_dec().render(sum1));
  assertEquals(1,b_ref().visit(sum1).peekIndex());
  Field<BigDecimal> sum2=sum(FIELD_ID1).as("value");
  assertEquals(BigDecimal.class,sum2.getType());
  assertEquals("`value`",r_refI().render(sum2));
  assertEquals("`value`",r_ref().render(sum2));
  assertEquals("sum(`TABLE1`.`ID1`) as `value`",r_decI().render(sum2));
  assertEquals("sum(`TABLE1`.`ID1`) as `value`",r_dec().render(sum2));
  assertEquals(1,b_ref().visit(sum2).peekIndex());
  Field<BigDecimal> avg1=avg(FIELD_ID1);
  assertEquals(BigDecimal.class,avg1.getType());
  assertEquals("avg(`TABLE1`.`ID1`)",r_refI().render(avg1));
  assertEquals("avg(`TABLE1`.`ID1`)",r_ref().render(avg1));
  assertEquals("avg(`TABLE1`.`ID1`)",r_decI().render(avg1));
  assertEquals("avg(`TABLE1`.`ID1`)",r_dec().render(avg1));
  assertEquals(1,b_ref().visit(avg1).peekIndex());
  Field<BigDecimal> avg2=avg(FIELD_ID1).as("value");
  assertEquals(BigDecimal.class,avg2.getType());
  assertEquals("`value`",r_refI().render(avg2));
  assertEquals("`value`",r_ref().render(avg2));
  assertEquals("avg(`TABLE1`.`ID1`) as `value`",r_decI().render(avg2));
  assertEquals("avg(`TABLE1`.`ID1`) as `value`",r_dec().render(avg2));
  assertEquals(1,b_ref().visit(avg2).peekIndex());
  Field<Integer> min1=min(FIELD_ID1);
  assertEquals(Integer.class,min1.getType());
  assertEquals("min(`TABLE1`.`ID1`)",r_refI().render(min1));
  assertEquals("min(`TABLE1`.`ID1`)",r_ref().render(min1));
  assertEquals("min(`TABLE1`.`ID1`)",r_decI().render(min1));
  assertEquals("min(`TABLE1`.`ID1`)",r_dec().render(min1));
  assertEquals(1,b_ref().visit(min1).peekIndex());
  Field<Integer> min2=min(FIELD_ID1).as("value");
  assertEquals(Integer.class,min2.getType());
  assertEquals("`value`",r_refI().render(min2));
  assertEquals("`value`",r_ref().render(min2));
  assertEquals("min(`TABLE1`.`ID1`) as `value`",r_decI().render(min2));
  assertEquals("min(`TABLE1`.`ID1`) as `value`",r_dec().render(min2));
  assertEquals(1,b_ref().visit(min2).peekIndex());
  Field<Integer> max1=max(FIELD_ID1);
  assertEquals(Integer.class,max1.getType());
  assertEquals("max(`TABLE1`.`ID1`)",r_refI().render(max1));
  assertEquals("max(`TABLE1`.`ID1`)",r_ref().render(max1));
  assertEquals("max(`TABLE1`.`ID1`)",r_decI().render(max1));
  assertEquals("max(`TABLE1`.`ID1`)",r_dec().render(max1));
  assertEquals(1,b_ref().visit(max1).peekIndex());
  Field<Integer> max2=max(FIELD_ID1).as("value");
  assertEquals(Integer.class,max2.getType());
  assertEquals("`value`",r_refI().render(max2));
  assertEquals("`value`",r_ref().render(max2));
  assertEquals("max(`TABLE1`.`ID1`) as `value`",r_decI().render(max2));
  assertEquals("max(`TABLE1`.`ID1`) as `value`",r_dec().render(max2));
  assertEquals(1,b_ref().visit(max2).peekIndex());
  Field<Integer> count1=count();
  assertEquals(Integer.class,count1.getType());
  assertEquals("count(*)",r_refI().render(count1));
  assertEquals("count(*)",r_ref().render(count1));
  assertEquals("count(*)",r_decI().render(count1));
  assertEquals("count(*)",r_dec().render(count1));
  assertEquals(1,b_ref().visit(count1).peekIndex());
  Field<Integer> count1a=count().as("cnt");
  assertEquals(Integer.class,count1a.getType());
  assertEquals("`cnt`",r_refI().render(count1a));
  assertEquals("`cnt`",r_ref().render(count1a));
  assertEquals("count(*) as `cnt`",r_decI().render(count1a));
  assertEquals("count(*) as `cnt`",r_dec().render(count1a));
  assertEquals(1,b_ref().visit(count1a).peekIndex());
  Field<Integer> count2=count(FIELD_ID1);
  assertEquals(Integer.class,count2.getType());
  assertEquals("count(`TABLE1`.`ID1`)",r_refI().render(count2));
  assertEquals("count(`TABLE1`.`ID1`)",r_ref().render(count2));
  assertEquals("count(`TABLE1`.`ID1`)",r_decI().render(count2));
  assertEquals("count(`TABLE1`.`ID1`)",r_dec().render(count2));
  assertEquals(1,b_ref().visit(count2).peekIndex());
  Field<Integer> count2a=count(FIELD_ID1).as("cnt");
  assertEquals(Integer.class,count2a.getType());
  assertEquals("`cnt`",r_refI().render(count2a));
  assertEquals("`cnt`",r_ref().render(count2a));
  assertEquals("count(`TABLE1`.`ID1`) as `cnt`",r_decI().render(count2a));
  assertEquals("count(`TABLE1`.`ID1`) as `cnt`",r_dec().render(count2a));
  assertEquals(1,b_ref().visit(count2a).peekIndex());
  Field<Integer> count3=countDistinct(FIELD_ID1);
  assertEquals(Integer.class,count3.getType());
  assertEquals("count(distinct `TABLE1`.`ID1`)",r_refI().render(count3));
  assertEquals("count(distinct `TABLE1`.`ID1`)",r_ref().render(count3));
  assertEquals("count(distinct `TABLE1`.`ID1`)",r_decI().render(count3));
  assertEquals("count(distinct `TABLE1`.`ID1`)",r_dec().render(count3));
  assertEquals(1,b_ref().visit(count3).peekIndex());
  Field<Integer> count3a=countDistinct(FIELD_ID1).as("cnt");
  assertEquals(Integer.class,count3a.getType());
  assertEquals("`cnt`",r_refI().render(count3a));
  assertEquals("`cnt`",r_ref().render(count3a));
  assertEquals("count(distinct `TABLE1`.`ID1`) as `cnt`",r_decI().render(count3a));
  assertEquals("count(distinct `TABLE1`.`ID1`) as `cnt`",r_dec().render(count3a));
  assertEquals(1,b_ref().visit(count3a).peekIndex());
}
