{
  Field<Integer> division1=FIELD_ID1.div(FIELD_ID1).div(1).div(2);
  assertEquals(Integer.class,division1.getType());
  assertEquals("(((`TABLE1`.`ID1` / `TABLE1`.`ID1`) / 1) / 2)",r_refI().render(division1));
  assertEquals("(((`TABLE1`.`ID1` / `TABLE1`.`ID1`) / ?) / ?)",r_ref().render(division1));
  assertEquals("(((`TABLE1`.`ID1` / `TABLE1`.`ID1`) / 1) / 2)",r_decI().render(division1));
  assertEquals("(((`TABLE1`.`ID1` / `TABLE1`.`ID1`) / ?) / ?)",r_dec().render(division1));
  Field<Integer> division2=division1.as("d");
  assertEquals(Integer.class,division2.getType());
  assertEquals("`d`",r_refI().render(division2));
  assertEquals("`d`",r_ref().render(division2));
  assertEquals("(((`TABLE1`.`ID1` / `TABLE1`.`ID1`) / 1) / 2) as `d`",r_decI().render(division2));
  assertEquals("(((`TABLE1`.`ID1` / `TABLE1`.`ID1`) / ?) / ?) as `d`",r_dec().render(division2));
  context.checking(new Expectations(){
{
      oneOf(statement).setInt(1,1);
      oneOf(statement).setInt(2,2);
    }
  }
);
  int i=b_decF().visit(division2).peekIndex();
  assertEquals(3,i);
  context.assertIsSatisfied();
}
