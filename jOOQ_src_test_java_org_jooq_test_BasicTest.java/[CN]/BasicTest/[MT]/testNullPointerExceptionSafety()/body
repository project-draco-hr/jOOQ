{
  assertEquals(FIELD_ID1.add((Integer)null),FIELD_ID1.add((Field<Integer>)null));
  assertEquals(FIELD_ID1.between((Integer)null,null),FIELD_ID1.between((Field<Integer>)null,null));
  assertEquals(FIELD_ID1.betweenSymmetric((Integer)null,null),FIELD_ID1.betweenSymmetric((Field<Integer>)null,null));
  assertEquals(FIELD_ID1.div((Integer)null),FIELD_ID1.div((Field<Integer>)null));
  assertEquals(FIELD_ID1.equal((Integer)null),FIELD_ID1.equal((Field<Integer>)null));
  assertEquals(FIELD_ID1.greaterOrEqual((Integer)null),FIELD_ID1.greaterOrEqual((Field<Integer>)null));
  assertEquals(FIELD_ID1.greaterThan((Integer)null),FIELD_ID1.greaterThan((Field<Integer>)null));
  assertEquals(FIELD_ID1.in((Integer)null),FIELD_ID1.in((Field<Integer>)null));
  assertEquals(FIELD_ID1.isDistinctFrom((Integer)null),FIELD_ID1.isDistinctFrom((Field<Integer>)null));
  assertEquals(FIELD_ID1.isNotDistinctFrom((Integer)null),FIELD_ID1.isNotDistinctFrom((Field<Integer>)null));
  assertEquals(FIELD_ID1.lessOrEqual((Integer)null),FIELD_ID1.lessOrEqual((Field<Integer>)null));
  assertEquals(FIELD_ID1.lessThan((Integer)null),FIELD_ID1.lessThan((Field<Integer>)null));
  assertEquals(FIELD_ID1.mod((Integer)null),FIELD_ID1.mod((Field<Integer>)null));
  assertEquals(FIELD_ID1.mul((Integer)null),FIELD_ID1.mul((Field<Integer>)null));
  assertEquals(FIELD_ID1.notBetween((Integer)null,null),FIELD_ID1.notBetween((Field<Integer>)null,null));
  assertEquals(FIELD_ID1.notBetweenSymmetric((Integer)null,null),FIELD_ID1.notBetweenSymmetric((Field<Integer>)null,null));
  assertEquals(FIELD_ID1.notEqual((Integer)null),FIELD_ID1.notEqual((Field<Integer>)null));
  assertEquals(FIELD_ID1.notIn((Integer)null),FIELD_ID1.notIn((Field<Integer>)null));
  assertEquals(FIELD_ID1.sub((Integer)null),FIELD_ID1.sub((Field<Integer>)null));
  assertEquals(DSL.abs((Integer)null),DSL.abs((Field<Integer>)null));
  assertEquals(DSL.acos((Integer)null),DSL.acos((Field<Integer>)null));
  assertEquals(DSL.asin((Integer)null),DSL.asin((Field<Integer>)null));
  assertEquals(DSL.atan((Integer)null),DSL.atan((Field<Integer>)null));
  assertEquals(DSL.atan2((Integer)null,(Integer)null),DSL.atan2((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.atan2((Integer)null,(Integer)null),DSL.atan2((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.atan2((Integer)null,(Integer)null),DSL.atan2((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.bitAnd((Integer)null,(Integer)null),DSL.bitAnd((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.bitAnd((Integer)null,(Integer)null),DSL.bitAnd((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.bitAnd((Integer)null,(Integer)null),DSL.bitAnd((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.bitCount((Integer)null),DSL.bitCount((Field<Integer>)null));
  assertEquals(DSL.bitLength((String)null),DSL.bitLength((Field<String>)null));
  assertEquals(DSL.bitNand((Integer)null,(Integer)null),DSL.bitNand((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.bitNand((Integer)null,(Integer)null),DSL.bitNand((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.bitNand((Integer)null,(Integer)null),DSL.bitNand((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.bitNor((Integer)null,(Integer)null),DSL.bitNor((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.bitNor((Integer)null,(Integer)null),DSL.bitNor((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.bitNor((Integer)null,(Integer)null),DSL.bitNor((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.bitOr((Integer)null,(Integer)null),DSL.bitOr((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.bitOr((Integer)null,(Integer)null),DSL.bitOr((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.bitOr((Integer)null,(Integer)null),DSL.bitOr((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.bitXNor((Integer)null,(Integer)null),DSL.bitXNor((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.bitXNor((Integer)null,(Integer)null),DSL.bitXNor((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.bitXNor((Integer)null,(Integer)null),DSL.bitXNor((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.bitXor((Integer)null,(Integer)null),DSL.bitXor((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.bitXor((Integer)null,(Integer)null),DSL.bitXor((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.bitXor((Integer)null,(Integer)null),DSL.bitXor((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.ceil((Integer)null),DSL.ceil((Field<Integer>)null));
  assertEquals(DSL.charLength((String)null),DSL.charLength((Field<String>)null));
  assertEquals(DSL.coalesce((Integer)null,(Integer)null),DSL.coalesce((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.coalesce((Integer)null,(Integer)null,(Integer)null),DSL.coalesce((Field<Integer>)null,(Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.coalesce((Integer)null,(Integer)null,(Integer[])null),DSL.coalesce((Field<Integer>)null,(Field<Integer>)null,(Field<?>[])null));
  assertEquals(DSL.coalesce((Integer)null,(Integer)null,(Integer)null,(Integer)null),DSL.coalesce((Field<Integer>)null,(Field<Integer>)null,(Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.concat((String)null,(String)null),DSL.concat((Field<String>)null,(Field<String>)null));
  assertEquals(DSL.cos((Integer)null),DSL.cos((Field<Integer>)null));
  assertEquals(DSL.cosh((Integer)null),DSL.cosh((Field<Integer>)null));
  assertEquals(DSL.cot((Integer)null),DSL.cot((Field<Integer>)null));
  assertEquals(DSL.coth((Integer)null),DSL.coth((Field<Integer>)null));
  assertEquals(DSL.dateAdd((Date)null,(Integer)null),DSL.dateAdd((Field<Date>)null,(Field<Integer>)null));
  assertEquals(DSL.dateDiff((Date)null,(Date)null),DSL.dateDiff((Field<Date>)null,(Field<Date>)null));
  assertEquals(DSL.day((java.util.Date)null),DSL.day((Field<java.util.Date>)null));
  assertEquals(DSL.decode((Integer)null,null,null),DSL.decode((Field<Integer>)null,null,null));
  assertEquals(DSL.decode((Integer)null,null,null),DSL.decode((Field<Integer>)null,null,null));
  assertEquals(DSL.deg((Integer)null),DSL.deg((Field<Integer>)null));
  assertEquals(DSL.exp((Integer)null),DSL.exp((Field<Integer>)null));
  assertEquals(DSL.extract((java.util.Date)null,DatePart.DAY),DSL.extract((Field<java.util.Date>)null,DatePart.DAY));
  assertEquals(DSL.floor((Integer)null),DSL.floor((Field<Integer>)null));
  assertEquals(DSL.greatest((Integer)null),DSL.greatest((Field<Integer>)null));
  assertEquals(DSL.greatest((Integer)null,(Integer[])null),DSL.greatest((Field<Integer>)null,(Field[])null));
  assertEquals(DSL.greatest((Integer)null,(Integer)null,(Integer)null),DSL.greatest((Field<Integer>)null,(Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.greatest((Integer)null,(Integer)null),DSL.greatest((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.hour((java.util.Date)null),DSL.hour((Field<java.util.Date>)null));
  assertEquals(DSL.lag((Field<Integer>)null,1,(Integer)null),DSL.lag((Field<Integer>)null,1,(Field<Integer>)null));
  assertEquals(DSL.lead((Field<Integer>)null,1,(Integer)null),DSL.lead((Field<Integer>)null,1,(Field<Integer>)null));
  assertEquals(DSL.least((Integer)null),DSL.least((Field<Integer>)null));
  assertEquals(DSL.least((Integer)null,(Integer)null),DSL.least((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.least((Integer)null,(Integer[])null),DSL.least((Field<Integer>)null,(Field[])null));
  assertEquals(DSL.least((Integer)null,(Integer)null,(Integer)null),DSL.least((Field<Integer>)null,(Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.length((String)null),DSL.length((Field<String>)null));
  assertEquals(DSL.ln((Integer)null),DSL.ln((Field<Integer>)null));
  assertEquals(DSL.log((Integer)null,2),DSL.log((Field<Integer>)null,2));
  assertEquals(DSL.lower((String)null),DSL.lower((Field<String>)null));
  assertEquals(DSL.ltrim((String)null),DSL.ltrim((Field<String>)null));
  assertEquals(DSL.minute((java.util.Date)null),DSL.minute((Field<java.util.Date>)null));
  assertEquals(DSL.month((java.util.Date)null),DSL.month((Field<java.util.Date>)null));
  assertEquals(DSL.nullif((Integer)null,(Integer)null),DSL.nullif((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.nullif((Integer)null,(Integer)null),DSL.nullif((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.nullif((Integer)null,(Integer)null),DSL.nullif((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.nvl((Integer)null,(Integer)null),DSL.nvl((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.nvl((Integer)null,(Integer)null),DSL.nvl((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.nvl((Integer)null,(Integer)null),DSL.nvl((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.nvl2((Field<Integer>)null,(Integer)null,(Integer)null),DSL.nvl2((Field<Integer>)null,(Field<Integer>)null,(Integer)null));
  assertEquals(DSL.nvl2((Field<Integer>)null,(Integer)null,(Integer)null),DSL.nvl2((Field<Integer>)null,(Integer)null,(Field<Integer>)null));
  assertEquals(DSL.nvl2((Field<Integer>)null,(Integer)null,(Integer)null),DSL.nvl2((Field<Integer>)null,(Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.octetLength((String)null),DSL.octetLength((Field<String>)null));
  assertEquals(DSL.position((String)null,(String)null),DSL.position((String)null,(Field<String>)null));
  assertEquals(DSL.position((String)null,(String)null),DSL.position((Field<String>)null,(String)null));
  assertEquals(DSL.position((String)null,(String)null),DSL.position((Field<String>)null,(Field<String>)null));
  assertEquals(DSL.power((Integer)null,(Integer)null),DSL.power((Field<Integer>)null,(Field<Integer>)null));
  assertEquals(DSL.power((Integer)null,(Integer)null),DSL.power((Field<Integer>)null,(Integer)null));
  assertEquals(DSL.power((Integer)null,(Integer)null),DSL.power((Integer)null,(Field<Integer>)null));
  assertEquals(DSL.rad((Integer)null),DSL.rad((Field<Integer>)null));
  assertEquals(DSL.repeat((String)null,(Field<Integer>)null),DSL.repeat((Field<String>)null,(Field<Integer>)null));
  assertEquals(DSL.replace((Field<String>)null,(String)null),DSL.replace((Field<String>)null,(Field<String>)null));
  assertEquals(DSL.replace((Field<String>)null,(String)null,(String)null),DSL.replace((Field<String>)null,(Field<String>)null,(Field<String>)null));
  assertEquals(DSL.round((Integer)null),DSL.round((Field<Integer>)null));
  assertEquals(DSL.round((Integer)null,1),DSL.round((Field<Integer>)null,1));
  assertEquals(DSL.rtrim((String)null),DSL.rtrim((Field<String>)null));
  assertEquals(DSL.second((java.util.Date)null),DSL.second((Field<java.util.Date>)null));
  assertEquals(DSL.shl((Long)null,(Integer)null),DSL.shl((Long)null,(Field<Integer>)null));
  assertEquals(DSL.shl((Long)null,(Integer)null),DSL.shl((Field<Long>)null,(Integer)null));
  assertEquals(DSL.shl((Long)null,(Integer)null),DSL.shl((Field<Long>)null,(Field<Integer>)null));
  assertEquals(DSL.shr((Long)null,(Integer)null),DSL.shr((Long)null,(Field<Integer>)null));
  assertEquals(DSL.shr((Long)null,(Integer)null),DSL.shr((Field<Long>)null,(Integer)null));
  assertEquals(DSL.shr((Long)null,(Integer)null),DSL.shr((Field<Long>)null,(Field<Integer>)null));
  assertEquals(DSL.sign((Integer)null),DSL.sign((Field<Integer>)null));
  assertEquals(DSL.sin((Integer)null),DSL.sin((Field<Integer>)null));
  assertEquals(DSL.sinh((Integer)null),DSL.sinh((Field<Integer>)null));
  assertEquals(DSL.sqrt((Integer)null),DSL.sqrt((Field<Integer>)null));
  assertEquals(DSL.tan((Integer)null),DSL.tan((Field<Integer>)null));
  assertEquals(DSL.tanh((Integer)null),DSL.tanh((Field<Integer>)null));
  assertEquals(DSL.timestampAdd((Timestamp)null,(Integer)null),DSL.timestampAdd((Field<Timestamp>)null,(Field<Integer>)null));
  assertEquals(DSL.timestampDiff((Timestamp)null,(Timestamp)null),DSL.timestampDiff((Field<Timestamp>)null,(Field<Timestamp>)null));
  assertEquals(DSL.trunc((Integer)null,null),DSL.trunc((Field<Integer>)null,null));
  assertEquals(DSL.trim((String)null),DSL.trim((Field<String>)null));
  assertEquals(DSL.upper((String)null),DSL.upper((Field<String>)null));
  assertEquals(DSL.year((java.util.Date)null),DSL.year((Field<java.util.Date>)null));
}
