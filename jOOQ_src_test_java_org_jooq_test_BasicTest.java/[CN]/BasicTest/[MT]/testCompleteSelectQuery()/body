{
  SelectQuery<?> q=create.selectQuery();
  q.addFrom(TABLE1);
  q.addJoin(TABLE2,FIELD_ID1.equal(FIELD_ID2));
  q.addSelect(FIELD_ID1,FIELD_ID2);
  q.addGroupBy(FIELD_ID1,FIELD_ID2);
  q.addHaving(FIELD_ID1.equal(1));
  q.addOrderBy(FIELD_ID1.asc());
  q.addOrderBy(FIELD_ID2.desc());
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\" from \"TABLE1\" join \"TABLE2\" on \"TABLE1\".\"ID1\" = \"TABLE2\".\"ID2\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\" having \"TABLE1\".\"ID1\" = 1 order by \"TABLE1\".\"ID1\" asc, \"TABLE2\".\"ID2\" desc",r_refI().render(q));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\" from \"TABLE1\" join \"TABLE2\" on \"TABLE1\".\"ID1\" = \"TABLE2\".\"ID2\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\" having \"TABLE1\".\"ID1\" = ? order by \"TABLE1\".\"ID1\" asc, \"TABLE2\".\"ID2\" desc",r_ref().render(q));
  assertEquals(q,create.select(FIELD_ID1,FIELD_ID2).from(TABLE1).join(TABLE2).on(FIELD_ID1.equal(FIELD_ID2)).groupBy(FIELD_ID1,FIELD_ID2).having(FIELD_ID1.equal(1)).orderBy(FIELD_ID1.asc(),FIELD_ID2.desc()));
  context.checking(new Expectations(){
{
      oneOf(statement).setInt(1,1);
    }
  }
);
  int i=b_ref().visit(q).peekIndex();
  assertEquals(2,i);
  context.assertIsSatisfied();
}
