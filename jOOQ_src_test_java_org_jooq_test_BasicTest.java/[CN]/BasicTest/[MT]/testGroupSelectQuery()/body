{
  SelectQuery<?> q=create.selectQuery();
  q.addFrom(TABLE1);
  q.addGroupBy();
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by ()",r_refI().render(q));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by ()",r_ref().render(q));
  assertEquals(q,create.select().from(TABLE1).groupBy());
  q.addGroupBy(FIELD_ID1);
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\"",r_refI().render(q));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\"",r_ref().render(q));
  assertEquals(q,create.select().from(TABLE1).groupBy(FIELD_ID1));
  q.addGroupBy(FIELD_ID2,FIELD_ID3);
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\"",r_refI().render(q));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\"",r_ref().render(q));
  assertEquals(q,create.select().from(TABLE1).groupBy(FIELD_ID1,FIELD_ID2,FIELD_ID3));
  q.addHaving(FIELD_ID1.equal(1));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\" having \"TABLE1\".\"ID1\" = 1",r_refI().render(q));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\" having \"TABLE1\".\"ID1\" = ?",r_ref().render(q));
  assertEquals(q,create.select().from(TABLE1).groupBy(FIELD_ID1,FIELD_ID2,FIELD_ID3).having(FIELD_ID1.equal(1)));
  q.addHaving(Operator.OR,FIELD_ID1.equal(2));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\" having (\"TABLE1\".\"ID1\" = 1 or \"TABLE1\".\"ID1\" = 2)",r_refI().render(q));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\" having (\"TABLE1\".\"ID1\" = ? or \"TABLE1\".\"ID1\" = ?)",r_ref().render(q));
  assertEquals(q,create.select().from(TABLE1).groupBy(FIELD_ID1,FIELD_ID2,FIELD_ID3).having(FIELD_ID1.equal(1)).or(FIELD_ID1.equal(2)));
  q.addHaving(Operator.OR,FIELD_ID1.equal(3));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\" having (\"TABLE1\".\"ID1\" = 1 or \"TABLE1\".\"ID1\" = 2 or \"TABLE1\".\"ID1\" = 3)",r_refI().render(q));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\" having (\"TABLE1\".\"ID1\" = ? or \"TABLE1\".\"ID1\" = ? or \"TABLE1\".\"ID1\" = ?)",r_ref().render(q));
  assertEquals(q,create.select().from(TABLE1).groupBy(FIELD_ID1,FIELD_ID2,FIELD_ID3).having(FIELD_ID1.equal(1)).or(FIELD_ID1.equal(2)).or(FIELD_ID1.equal(3)));
  q.addHaving(FIELD_ID1.in(1,2,3));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\" having ((\"TABLE1\".\"ID1\" = 1 or \"TABLE1\".\"ID1\" = 2 or \"TABLE1\".\"ID1\" = 3) and \"TABLE1\".\"ID1\" in (1, 2, 3))",r_refI().render(q));
  assertEquals("select \"TABLE1\".\"ID1\", \"TABLE1\".\"NAME1\", \"TABLE1\".\"DATE1\" from \"TABLE1\" group by \"TABLE1\".\"ID1\", \"TABLE2\".\"ID2\", \"TABLE3\".\"ID3\" having ((\"TABLE1\".\"ID1\" = ? or \"TABLE1\".\"ID1\" = ? or \"TABLE1\".\"ID1\" = ?) and \"TABLE1\".\"ID1\" in (?, ?, ?))",r_ref().render(q));
  assertEquals(q,create.select().from(TABLE1).groupBy(FIELD_ID1,FIELD_ID2,FIELD_ID3).having(FIELD_ID1.equal(1)).or(FIELD_ID1.equal(2)).or(FIELD_ID1.equal(3)).and(FIELD_ID1.in(1,2,3)));
  context.checking(new Expectations(){
{
      oneOf(statement).setInt(1,1);
      oneOf(statement).setInt(2,2);
      oneOf(statement).setInt(3,3);
      oneOf(statement).setInt(4,1);
      oneOf(statement).setInt(5,2);
      oneOf(statement).setInt(6,3);
    }
  }
);
  int i=b_ref().bind(q).peekIndex();
  assertEquals(7,i);
  context.assertIsSatisfied();
}
