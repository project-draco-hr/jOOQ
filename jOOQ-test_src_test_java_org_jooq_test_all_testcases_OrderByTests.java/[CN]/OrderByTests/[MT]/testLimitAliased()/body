{
  assumeFamilyNotIn();
  Result<Record2<Integer,String>> r1=create().select(TBook_ID().as("xx"),TBook_TITLE().as("yy")).from(TBook()).limit(1,2).fetch();
  assertEquals(2,r1.size());
  Result<Record2<Integer,String>> r2=create().select(TBook_ID().as("xx"),TBook_TITLE().as("yy")).from(TBook()).limit(param("x",1),param("y",2)).fetch();
  assertEquals(2,r2.size());
  Result<Record2<String,Integer>> r3=create().select(TBook_TITLE().as("yy"),TBook_ID().as("xx")).from(TBook()).orderBy(TBook_ID().as("xx").desc()).limit(1,2).fetch();
  assertEquals(2,r3.size());
  assertEquals(asList(3,2),r3.getValues("xx"));
  Result<Record2<String,Integer>> r4=create().select(TBook_TITLE().as("yy"),TBook_ID().as("xx")).from(TBook()).orderBy(TBook_ID().as("xx").desc()).limit(param("x",1),param("y",2)).fetch();
  assertEquals(2,r4.size());
  assertEquals(asList(3,2),r4.getValues("xx"));
  Result<Record2<String,Integer>> r5=create().select(TBook_TITLE().as("yy"),TBook_ID().as("xx")).from(TBook()).orderBy(TBook_ID().as("xx").sortAsc(4,1,3,2)).limit(param("x",1),param("y",2)).fetch();
  assertEquals(2,r5.size());
  assertEquals(asList(1,3),r5.getValues("xx"));
switch (dialect().family()) {
default :
{
      Result<Record2<String,Integer>> r6=create().select(TBook_TITLE().as("yy"),TBook_ID().as("xx")).from(TBook()).orderBy(select(TAuthor_LAST_NAME().as("xx")).from(TAuthor()).where(TAuthor_ID().eq(TBook_AUTHOR_ID())).asField()).limit(param("x",1),param("y",2)).fetch();
      assertEquals(2,r6.size());
      assertEquals(asList(4,1),r6.getValues("xx"));
    }
}
}
