{
  long tsShift=-3600000;
  Record record=create().select(val(new Date(0)).as("d"),val(new Time(0)).as("t"),val(new Timestamp(0)).as("ts")).fetchOne();
  if (getDialect() != SQLITE)   assertEquals(new Date(tsShift),record.getValue("d"));
  assertEquals(new Time(0),record.getValue("t"));
  assertEquals(new Timestamp(0),record.getValue("ts"));
  if (getDialect() == CUBRID) {
    log.info("SKIPPING","Interval tests");
    return;
  }
  record=create().select(val(new Date(0)).as("d"),val(new Time(0)).as("t"),val(new Timestamp(0)).as("ts"),val(new YearToMonth(0)).as("iy"),val(new DayToSecond(0)).as("id")).fetchOne();
  assertEquals(new YearToMonth(0),record.getValue("iy"));
  assertEquals(new DayToSecond(0),record.getValue("id"));
  record=create().select(val(new YearToMonth(1)).div(2).as("y1"),val(new YearToMonth(1)).mul(2).as("y2"),val(new YearToMonth(1)).div(2).mul(2).as("y3"),val(new DayToSecond(1)).div(2).as("d1"),val(new DayToSecond(1)).mul(2).as("d2"),val(new DayToSecond(1)).div(2).mul(2).as("d3")).fetchOne();
  assertEquals(new YearToMonth(0,6),record.getValue("y1"));
  assertEquals(new YearToMonth(2),record.getValue("y2"));
  assertEquals(new YearToMonth(1),record.getValue("y3"));
  assertEquals(new DayToSecond(0,12),record.getValue("d1"));
  assertEquals(new DayToSecond(2),record.getValue("d2"));
  assertEquals(new DayToSecond(1),record.getValue("d3"));
  record=create().select(val(new Date(0)).add(1).as("d1"),val(new Date(0)).sub(1).as("d2"),val(new Date(0)).add(new YearToMonth(1,6)).as("d3"),val(new Date(0)).sub(new YearToMonth(1,6)).as("d4"),val(new Date(0)).add(new DayToSecond(2)).as("d5"),val(new Date(0)).sub(new DayToSecond(2)).as("d6"),val(new Timestamp(0)).add(1).as("ts1"),val(new Timestamp(0)).sub(1).as("ts2"),val(new Timestamp(0)).add(new YearToMonth(1,6)).as("ts3"),val(new Timestamp(0)).sub(new YearToMonth(1,6)).as("ts4"),val(new Timestamp(0)).add(new DayToSecond(2)).as("ts5"),val(new Timestamp(0)).sub(new DayToSecond(2)).as("ts6")).fetchOne();
  Calendar cal;
  cal=cal();
  cal.add(Calendar.DATE,1);
  assertEquals(new Date(cal.getTimeInMillis()),record.getValue("d1"));
  assertEquals(new Timestamp(cal.getTimeInMillis() - tsShift),record.getValue("ts1"));
  cal=cal();
  cal.add(Calendar.DATE,-1);
  assertEquals(new Date(cal.getTimeInMillis()),record.getValue("d2"));
  assertEquals(new Timestamp(cal.getTimeInMillis() - tsShift),record.getValue("ts2"));
  cal=cal();
  cal.add(Calendar.MONTH,18);
  assertEquals(new Date(cal.getTimeInMillis()),record.getValue("d3"));
  assertEquals(new Timestamp(cal.getTimeInMillis() - tsShift),record.getValue("ts3"));
  cal=cal();
  cal.add(Calendar.MONTH,-18);
  assertEquals(new Date(cal.getTimeInMillis()),record.getValue("d4"));
  assertEquals(new Timestamp(cal.getTimeInMillis() - tsShift),record.getValue("ts4"));
  cal=cal();
  cal.add(Calendar.DATE,2);
  assertEquals(new Date(cal.getTimeInMillis()),record.getValue("d5"));
  assertEquals(new Timestamp(cal.getTimeInMillis() - tsShift),record.getValue("ts5"));
  cal=cal();
  cal.add(Calendar.DATE,-2);
  assertEquals(new Date(cal.getTimeInMillis()),record.getValue("d6"));
  assertEquals(new Timestamp(cal.getTimeInMillis() - tsShift),record.getValue("ts6"));
  record=create().select(dateDiff(new Date(0),new Date(24 * 60 * 60* 1000L)).as("d1"),dateDiff(new Date(24 * 60 * 60* 1000L),new Date(0)).as("d2"),timestampDiff(new Timestamp(0),new Timestamp(24 * 60 * 60* 1000L)).as("ts1"),timestampDiff(new Timestamp(24 * 60 * 60* 1000L),new Timestamp(0)).as("ts2")).fetchOne();
  assertEquals(-1,record.getValue("d1"));
  assertEquals(1,record.getValue("d2"));
  assertEquals(new DayToSecond(1).neg(),record.getValue("ts1"));
  assertEquals(new DayToSecond(1),record.getValue("ts2"));
}
