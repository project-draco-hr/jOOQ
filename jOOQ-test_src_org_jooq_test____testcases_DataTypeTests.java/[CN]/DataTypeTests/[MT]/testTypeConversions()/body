{
  Record record=create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Orwell"));
  assertEquals("George",record.getValue(TAuthor_FIRST_NAME()));
  assertEquals("George",record.getValueAsString(TAuthor_FIRST_NAME()));
  assertEquals("George",record.getValueAsString(TAuthor_FIRST_NAME(),"gnarf"));
  assertEquals("George",record.getValue(1,String.class));
  assertEquals("George",record.getValue(1,String.class,"gnarf"));
  assertEquals(Integer.valueOf("1903"),record.getValue(TAuthor_YEAR_OF_BIRTH()));
  assertEquals(Integer.valueOf("1903"),record.getValue(TAuthor_YEAR_OF_BIRTH(),123));
  assertEquals(Integer.valueOf("1903"),record.getValue(4));
  assertEquals(Integer.valueOf("1903"),record.getValue(4,123));
  assertEquals(Short.valueOf("1903"),record.getValueAsShort(TAuthor_YEAR_OF_BIRTH()));
  assertEquals(Short.valueOf("1903"),record.getValueAsShort(TAuthor_YEAR_OF_BIRTH(),(short)123));
  assertEquals(Short.valueOf("1903"),record.getValue(4,Short.class));
  assertEquals(Short.valueOf("1903"),record.getValue(4,Short.class,(short)123));
  assertEquals(Long.valueOf("1903"),record.getValueAsLong(TAuthor_YEAR_OF_BIRTH()));
  assertEquals(Long.valueOf("1903"),record.getValueAsLong(TAuthor_YEAR_OF_BIRTH(),123L));
  assertEquals(Long.valueOf("1903"),record.getValue(4,Long.class));
  assertEquals(Long.valueOf("1903"),record.getValue(4,Long.class,123L));
  assertEquals(new BigInteger("1903"),record.getValueAsBigInteger(TAuthor_YEAR_OF_BIRTH()));
  assertEquals(new BigInteger("1903"),record.getValueAsBigInteger(TAuthor_YEAR_OF_BIRTH(),new BigInteger("123")));
  assertEquals(new BigInteger("1903"),record.getValue(4,BigInteger.class));
  assertEquals(new BigInteger("1903"),record.getValue(4,BigInteger.class,new BigInteger("123")));
  assertEquals(Float.valueOf("1903"),record.getValueAsFloat(TAuthor_YEAR_OF_BIRTH()));
  assertEquals(Float.valueOf("1903"),record.getValueAsFloat(TAuthor_YEAR_OF_BIRTH(),123f));
  assertEquals(Float.valueOf("1903"),record.getValue(4,Float.class));
  assertEquals(Float.valueOf("1903"),record.getValue(4,Float.class,123f));
  assertEquals(Double.valueOf("1903"),record.getValueAsDouble(TAuthor_YEAR_OF_BIRTH()));
  assertEquals(Double.valueOf("1903"),record.getValueAsDouble(TAuthor_YEAR_OF_BIRTH(),123d));
  assertEquals(Double.valueOf("1903"),record.getValue(4,Double.class));
  assertEquals(Double.valueOf("1903"),record.getValue(4,Double.class,123d));
  assertEquals(new BigDecimal("1903"),record.getValueAsBigDecimal(TAuthor_YEAR_OF_BIRTH()));
  assertEquals(new BigDecimal("1903"),record.getValueAsBigDecimal(TAuthor_YEAR_OF_BIRTH(),new BigDecimal("123")));
  assertEquals(new BigDecimal("1903"),record.getValue(4,BigDecimal.class));
  assertEquals(new BigDecimal("1903"),record.getValue(4,BigDecimal.class,new BigDecimal("123")));
  long dateOfBirth=record.getValue(TAuthor_DATE_OF_BIRTH()).getTime();
  assertEquals(dateOfBirth,record.getValueAsDate(TAuthor_DATE_OF_BIRTH()).getTime());
  assertEquals(dateOfBirth,record.getValueAsTimestamp(TAuthor_DATE_OF_BIRTH()).getTime());
  assertEquals(dateOfBirth,record.getValueAsTime(TAuthor_DATE_OF_BIRTH()).getTime());
}
