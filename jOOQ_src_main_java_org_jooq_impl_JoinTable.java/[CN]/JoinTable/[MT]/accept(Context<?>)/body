{
  JoinType translatedType=translateType(ctx);
  Clause translatedClause=translateClause(translatedType);
  String keyword=translatedType.toSQL();
  if (translatedType == CROSS_APPLY && ctx.family() == POSTGRES) {
    keyword="cross join lateral";
  }
 else   if (translatedType == OUTER_APPLY && ctx.family() == POSTGRES) {
    keyword="left outer join lateral";
  }
  toSQLTable(ctx,lhs);
switch (translatedType) {
case SEMI_JOIN:
case ANTI_JOIN:
    if (ctx.data(DATA_COLLECT_SEMI_ANTI_JOIN) != null) {
      @SuppressWarnings("unchecked") List<Condition> semiAntiJoinPredicates=(List<Condition>)ctx.data(DATA_COLLECTED_SEMI_ANTI_JOIN);
      if (semiAntiJoinPredicates == null) {
        semiAntiJoinPredicates=new ArrayList<Condition>();
        ctx.data(DATA_COLLECTED_SEMI_ANTI_JOIN,semiAntiJoinPredicates);
      }
switch (translatedType) {
case SEMI_JOIN:
        semiAntiJoinPredicates.add(exists(selectOne().from(rhs).where(condition)));
      break;
case ANTI_JOIN:
    semiAntiJoinPredicates.add(notExists(selectOne().from(rhs).where(condition)));
  break;
}
return;
}
}
ctx.formatIndentStart().formatSeparator().start(translatedClause).keyword(keyword).sql(' ');
toSQLTable(ctx,rhs);
if (!rhsPartitionBy.isEmpty()) {
ctx.formatSeparator().start(TABLE_JOIN_PARTITION_BY).keyword("partition by").sql(" (").visit(rhsPartitionBy).sql(')').end(TABLE_JOIN_PARTITION_BY);
}
if (!asList(CROSS_JOIN,NATURAL_JOIN,NATURAL_LEFT_OUTER_JOIN,NATURAL_RIGHT_OUTER_JOIN,CROSS_APPLY,OUTER_APPLY).contains(translatedType)) {
toSQLJoinCondition(ctx);
}
 else if (OUTER_APPLY == translatedType && ctx.family() == POSTGRES) {
ctx.formatSeparator().start(TABLE_JOIN_ON).keyword("on").sql(" true").end(TABLE_JOIN_ON);
}
ctx.end(translatedClause).formatIndentEnd();
}
