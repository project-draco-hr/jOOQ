{
  SQLDialect dialect=configuration.getDialect();
switch (dialect) {
case ASE:
case SYBASE:
case SQLSERVER:
{
      if (rhs.get(0).getType() == YearToMonth.class) {
        YearToMonth interval=((Param<YearToMonth>)rhs.get(0)).getValue();
        if (operator == ADD) {
          return function("dateadd",getDataType(),literal("mm"),val(interval.intValue()),lhs);
        }
 else {
          return function("dateadd",getDataType(),literal("mm"),val(-interval.intValue()),lhs);
        }
      }
 else {
        Field<?> result=lhs.cast(Timestamp.class);
        DayToSecond interval=((Param<DayToSecond>)rhs.get(0)).getValue();
        if (operator == ADD) {
          if (interval.getNano() != 0) {
            int micro=interval.getNano() / 1000;
            result=function("dateadd",getDataType(),literal("us"),val(micro),result);
            result=function("dateadd",getDataType(),literal("ss"),val((long)interval.getTotalSeconds()),result);
          }
 else {
            result=function("dateadd",getDataType(),literal("ss"),val((long)interval.getTotalSeconds()),result);
          }
        }
 else {
          if (interval.getNano() != 0) {
            int micro=interval.getNano() / 1000;
            result=function("dateadd",getDataType(),literal("us"),val(-micro),result);
            result=function("dateadd",getDataType(),literal("ss"),val(-(long)interval.getTotalSeconds()),result);
          }
 else {
            result=function("dateadd",getDataType(),literal("ss"),val(-(long)interval.getTotalSeconds()),result);
          }
        }
        return (Field)result;
      }
    }
case DB2:
{
    if (rhs.get(0).getType() == YearToMonth.class) {
      YearToMonth interval=((Param<YearToMonth>)rhs.get(0)).getValue();
      if (operator == ADD) {
        return lhs.add(field("{0} month",val(interval.intValue())));
      }
 else {
        return lhs.sub(field("{0} month",val(interval.intValue())));
      }
    }
 else {
      DayToSecond interval=((Param<DayToSecond>)rhs.get(0)).getValue();
      if (operator == ADD) {
        return (Field)lhs.cast(Timestamp.class).add(field("{0} microseconds",val(interval.getTotalMicro())));
      }
 else {
        return (Field)lhs.cast(Timestamp.class).sub(field("{0} microseconds",val(interval.getTotalMicro())));
      }
    }
  }
case DERBY:
case HSQLDB:
{
  if (rhs.get(0).getType() == YearToMonth.class) {
    YearToMonth interval=((Param<YearToMonth>)rhs.get(0)).getValue();
    if (operator == ADD) {
      return new FnPrefixFunction<T>("timestampadd",getDataType(),field("SQL_TSI_MONTH"),val(interval.intValue()),lhs);
    }
 else {
      return new FnPrefixFunction<T>("timestampadd",getDataType(),field("SQL_TSI_MONTH"),val(-interval.intValue()),lhs);
    }
  }
 else {
    DayToSecond interval=((Param<DayToSecond>)rhs.get(0)).getValue();
    if (operator == ADD) {
      return new FnPrefixFunction<T>("timestampadd",getDataType(),field("SQL_TSI_SECOND"),val((long)interval.getTotalSeconds()),lhs);
    }
 else {
      return new FnPrefixFunction<T>("timestampadd",getDataType(),field("SQL_TSI_SECOND"),val((long)-interval.getTotalSeconds()),lhs);
    }
  }
}
case CUBRID:
case MYSQL:
{
org.jooq.types.Interval<?> interval=((Param<org.jooq.types.Interval<?>>)rhs.get(0)).getValue();
if (operator == SUBTRACT) {
  interval=interval.neg();
}
if (rhs.get(0).getType() == YearToMonth.class) {
  return field("{date_add}({0}, {interval} {1} {year_month})",getDataType(),lhs,val(interval));
}
 else {
  if (dialect == MYSQL) {
    return field("{date_add}({0}, {interval} {1} {day_microsecond})",getDataType(),lhs,val(interval));
  }
 else {
    return field("{date_add}({0}, {interval} {1} {day_millisecond})",getDataType(),lhs,val(interval));
  }
}
}
case H2:
{
org.jooq.types.Interval<?> interval=((Param<org.jooq.types.Interval<?>>)rhs.get(0)).getValue();
if (operator == SUBTRACT) {
interval=interval.neg();
}
if (rhs.get(0).getType() == YearToMonth.class) {
return function("dateadd",getDataType(),literal("'month'"),val(interval.intValue()),lhs);
}
 else {
return function("dateadd",getDataType(),literal("'ms'"),val((long)((DayToSecond)interval).getTotalMilli()),lhs);
}
}
case ORACLE:
default :
return new DefaultExpression();
}
}
