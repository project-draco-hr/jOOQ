{
  SQLDialect dialect=configuration.dialect();
  int sign=(operator == ADD) ? 1 : -1;
switch (dialect.family()) {
case CUBRID:
case MARIADB:
case MYSQL:
{
      Interval interval=rhsAsInterval();
      if (operator == SUBTRACT) {
        interval=interval.neg();
      }
      if (rhs.get(0).getType() == YearToMonth.class) {
        return field("{date_add}({0}, {interval} {1} {year_month})",getDataType(),lhs,Tools.field(interval,String.class));
      }
 else {
        if (dialect == CUBRID) {
          return field("{date_add}({0}, {interval} {1} {day_millisecond})",getDataType(),lhs,Tools.field(interval,String.class));
        }
 else {
          return field("{date_add}({0}, {interval} {1} {day_microsecond})",getDataType(),lhs,Tools.field(interval,String.class));
        }
      }
    }
case DERBY:
case HSQLDB:
{
    Field<T> result;
    if (rhs.get(0).getType() == YearToMonth.class) {
      result=field("{fn {timestampadd}({sql_tsi_month}, {0}, {1}) }",getDataType(),val(sign * rhsAsYTM().intValue()),lhs);
    }
 else {
      result=field("{fn {timestampadd}({sql_tsi_second}, {0}, {1}) }",getDataType(),val(sign * (long)rhsAsDTS().getTotalSeconds()),lhs);
    }
    return castNonTimestamps(configuration,result);
  }
case FIREBIRD:
{
  if (rhs.get(0).getType() == YearToMonth.class) {
    return field("{dateadd}({month}, {0}, {1})",getDataType(),val(sign * rhsAsYTM().intValue()),lhs);
  }
 else {
    return field("{dateadd}({millisecond}, {0}, {1})",getDataType(),val(sign * (long)rhsAsDTS().getTotalMilli()),lhs);
  }
}
case H2:
{
if (rhs.get(0).getType() == YearToMonth.class) {
  return field("{dateadd}('month', {0}, {1})",getDataType(),val(sign * rhsAsYTM().intValue()),lhs);
}
 else {
  return field("{dateadd}('ms', {0}, {1})",getDataType(),val(sign * (long)rhsAsDTS().getTotalMilli()),lhs);
}
}
case SQLITE:
{
boolean ytm=rhs.get(0).getType() == YearToMonth.class;
Field<?> interval=val(ytm ? rhsAsYTM().intValue() : rhsAsDTS().getTotalSeconds());
if (sign < 0) {
interval=interval.neg();
}
interval=interval.concat(inline(ytm ? " months" : " seconds"));
return field("{datetime}({0}, {1})",getDataType(),lhs,interval);
}
case POSTGRES:
default :
return new DefaultExpression();
}
}
