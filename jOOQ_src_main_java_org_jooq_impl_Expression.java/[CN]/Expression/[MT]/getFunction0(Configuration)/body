{
  SQLDialect dialect=configuration.getDialect();
  if (BIT_AND == operator && asList(DB2,H2,HSQLDB,ORACLE).contains(dialect)) {
    return function("bitand",getDataType(),getArguments());
  }
 else   if (BIT_XOR == operator && asList(DB2,H2,HSQLDB).contains(dialect)) {
    return function("bitxor",getDataType(),getArguments());
  }
 else   if (BIT_OR == operator && asList(DB2,H2,HSQLDB).contains(dialect)) {
    return function("bitor",getDataType(),getArguments());
  }
 else   if (BIT_OR == operator && ORACLE == dialect) {
    return lhs.sub(bitAnd(lhsAsNumber(),rhsAsNumber())).add(rhsAsNumber());
  }
 else   if (BIT_XOR == operator && asList(ORACLE,SQLITE).contains(dialect)) {
    return (Field<T>)bitAnd(bitNot(bitAnd(lhsAsNumber(),rhsAsNumber())),bitOr(lhsAsNumber(),rhsAsNumber()));
  }
 else   if (SHL == operator && asList(ASE,DB2,H2,HSQLDB,INGRES,ORACLE,SQLSERVER,SYBASE).contains(dialect)) {
    return lhs.mul(Factory.power(literal(2),rhsAsNumber()));
  }
 else   if (SHR == operator && asList(ASE,DB2,H2,HSQLDB,INGRES,ORACLE,SQLSERVER,SYBASE).contains(dialect)) {
    return lhs.div(Factory.power(literal(2),rhsAsNumber()));
  }
 else   if (BIT_NAND == operator) {
    return (Field<T>)bitNot(bitAnd(lhsAsNumber(),rhsAsNumber()));
  }
 else   if (BIT_NOR == operator) {
    return (Field<T>)bitNot(bitOr(lhsAsNumber(),rhsAsNumber()));
  }
 else   if (BIT_XNOR == operator) {
    return (Field<T>)bitNot(bitXor(lhsAsNumber(),rhsAsNumber()));
  }
 else   if (asList(ADD,SUBTRACT).contains(operator) && lhs.getDataType().isDateTime() && !rhs.get(0).getDataType().isDateTime()) {
    return new DateExpression();
  }
 else {
    return new DefaultExpression();
  }
}
