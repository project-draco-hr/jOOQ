{
  Result<Record> result=create().select(PARAMETERS.PARAMETER_MODE,PARAMETERS.PARAMETER_NAME,nvl(ELEMENT_TYPES.COLLECTION_TYPE_IDENTIFIER,PARAMETERS.DATA_TYPE).as("datatype"),PARAMETERS.NUMERIC_PRECISION,PARAMETERS.NUMERIC_SCALE,PARAMETERS.ORDINAL_POSITION).from(PARAMETERS).join(ROUTINES).on(PARAMETERS.SPECIFIC_SCHEMA.equal(ROUTINES.SPECIFIC_SCHEMA)).and(PARAMETERS.SPECIFIC_NAME.equal(ROUTINES.SPECIFIC_NAME)).leftOuterJoin(ELEMENT_TYPES).on(ROUTINES.ROUTINE_SCHEMA.equal(ELEMENT_TYPES.OBJECT_SCHEMA)).and(ROUTINES.ROUTINE_NAME.equal(ELEMENT_TYPES.OBJECT_NAME)).and(PARAMETERS.DTD_IDENTIFIER.equal(ELEMENT_TYPES.COLLECTION_TYPE_IDENTIFIER)).where(PARAMETERS.SPECIFIC_SCHEMA.equal(getSchemaName())).and(PARAMETERS.SPECIFIC_NAME.equal(this.specificName)).orderBy(PARAMETERS.ORDINAL_POSITION.asc()).fetch();
  for (  Record record : result) {
    String inOut=record.getValue(PARAMETERS.PARAMETER_MODE);
    DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),record.getValueAsString("datatype"),record.getValue(PARAMETERS.NUMERIC_PRECISION),record.getValue(PARAMETERS.NUMERIC_SCALE));
    ParameterDefinition parameter=new DefaultParameterDefinition(this,record.getValue(PARAMETERS.PARAMETER_NAME).replaceAll("@",""),record.getValueAsInteger(PARAMETERS.ORDINAL_POSITION),type);
    addParameter(InOutDefinition.getFromString(inOut),parameter);
  }
}
