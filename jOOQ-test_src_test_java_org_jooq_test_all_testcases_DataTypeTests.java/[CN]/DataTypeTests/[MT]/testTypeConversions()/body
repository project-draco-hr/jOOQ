{
  Record record=create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Orwell"));
  assertEquals("George",record.getValue(TAuthor_FIRST_NAME()));
  assertEquals("George",record.getValue(TAuthor_FIRST_NAME(),String.class));
  assertEquals("George",record.getValue(1,String.class));
  assertEquals(Integer.valueOf("1903"),record.getValue(TAuthor_YEAR_OF_BIRTH()));
  assertEquals(Integer.valueOf("1903"),record.getValue(4));
  assertEquals(Short.valueOf("1903"),record.getValue(TAuthor_YEAR_OF_BIRTH(),Short.class));
  assertEquals(Short.valueOf("1903"),record.getValue(4,Short.class));
  assertEquals(Long.valueOf("1903"),record.getValue(TAuthor_YEAR_OF_BIRTH(),Long.class));
  assertEquals(Long.valueOf("1903"),record.getValue(4,Long.class));
  assertEquals(new BigInteger("1903"),record.getValue(TAuthor_YEAR_OF_BIRTH(),BigInteger.class));
  assertEquals(new BigInteger("1903"),record.getValue(4,BigInteger.class));
  assertEquals(Float.valueOf("1903"),record.getValue(TAuthor_YEAR_OF_BIRTH(),Float.class));
  assertEquals(Float.valueOf("1903"),record.getValue(4,Float.class));
  assertEquals(Double.valueOf("1903"),record.getValue(TAuthor_YEAR_OF_BIRTH(),Double.class));
  assertEquals(Double.valueOf("1903"),record.getValue(4,Double.class));
  assertEquals(new BigDecimal("1903"),record.getValue(TAuthor_YEAR_OF_BIRTH(),BigDecimal.class));
  assertEquals(new BigDecimal("1903"),record.getValue(4,BigDecimal.class));
  long dateOfBirth=record.getValue(TAuthor_DATE_OF_BIRTH()).getTime();
  assertEquals(dateOfBirth,record.getValue(TAuthor_DATE_OF_BIRTH(),Date.class).getTime());
  assertEquals(dateOfBirth,record.getValue(TAuthor_DATE_OF_BIRTH(),Timestamp.class).getTime());
  assertEquals(dateOfBirth,record.getValue(TAuthor_DATE_OF_BIRTH(),Time.class).getTime());
}
