{
  assertEquals(Arrays.asList((byte)1,(byte)2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,Byte.class));
  assertEquals(Arrays.asList((short)1,(short)2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,Short.class));
  assertEquals(Arrays.asList(1,2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,Integer.class));
  assertEquals(Arrays.asList(1L,2L),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,Long.class));
  assertEquals(Arrays.asList(ubyte((byte)1),ubyte((byte)2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,UByte.class));
  assertEquals(Arrays.asList(ushort((short)1),ushort((short)2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,UShort.class));
  assertEquals(Arrays.asList(uint(1),uint(2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,UInteger.class));
  assertEquals(Arrays.asList(ulong(1L),ulong(2L)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,ULong.class));
  assertEquals(Arrays.asList(1.0f,2.0f),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,Float.class));
  assertEquals(Arrays.asList(1.0,2.0),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,Double.class));
  assertEquals(Arrays.asList(new BigInteger("1"),new BigInteger("2")),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,BigInteger.class));
  assertEquals(Arrays.asList(new BigDecimal("1"),new BigDecimal("2")),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(0,BigDecimal.class));
  assertEquals(Arrays.asList((byte)1,(byte)2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),Byte.class));
  assertEquals(Arrays.asList((short)1,(short)2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),Short.class));
  assertEquals(Arrays.asList(1,2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),Integer.class));
  assertEquals(Arrays.asList(1L,2L),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),Long.class));
  assertEquals(Arrays.asList(ubyte((byte)1),ubyte((byte)2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),UByte.class));
  assertEquals(Arrays.asList(ushort((short)1),ushort((short)2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),UShort.class));
  assertEquals(Arrays.asList(uint(1),uint(2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),UInteger.class));
  assertEquals(Arrays.asList(ulong(1L),ulong(2L)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),ULong.class));
  assertEquals(Arrays.asList(1.0f,2.0f),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),Float.class));
  assertEquals(Arrays.asList(1.0,2.0),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),Double.class));
  assertEquals(Arrays.asList(new BigInteger("1"),new BigInteger("2")),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),BigInteger.class));
  assertEquals(Arrays.asList(new BigDecimal("1"),new BigDecimal("2")),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch(TAuthor_ID().getName(),BigDecimal.class));
  testConversionFetchArrayByIndex(Byte.class,Arrays.asList((byte)1,(byte)2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(Short.class,Arrays.asList((short)1,(short)2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(Integer.class,Arrays.asList(1,2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(Long.class,Arrays.asList(1L,2L),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(UByte.class,Arrays.asList(ubyte((byte)1),ubyte((byte)2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(UShort.class,Arrays.asList(ushort((short)1),ushort((short)2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(UInteger.class,Arrays.asList(uint(1),uint(2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(ULong.class,Arrays.asList(ulong(1L),ulong(2L)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(Float.class,Arrays.asList(1.0f,2.0f),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(Double.class,Arrays.asList(1.0,2.0),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(BigInteger.class,Arrays.asList(new BigInteger("1"),new BigInteger("2")),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByIndex(BigDecimal.class,Arrays.asList(new BigDecimal("1"),new BigDecimal("2")),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(Byte.class,Arrays.asList((byte)1,(byte)2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(Short.class,Arrays.asList((short)1,(short)2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(Integer.class,Arrays.asList(1,2),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(Long.class,Arrays.asList(1L,2L),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(UByte.class,Arrays.asList(ubyte((byte)1),ubyte((byte)2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(UShort.class,Arrays.asList(ushort((short)1),ushort((short)2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(UInteger.class,Arrays.asList(uint(1),uint(2)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(ULong.class,Arrays.asList(ulong(1L),ulong(2L)),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(Float.class,Arrays.asList(1.0f,2.0f),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(Double.class,Arrays.asList(1.0,2.0),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(BigInteger.class,Arrays.asList(new BigInteger("1"),new BigInteger("2")),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  testConversionFetchArrayByName(BigDecimal.class,Arrays.asList(new BigDecimal("1"),new BigDecimal("2")),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()));
  assertEquals((byte)1,(byte)create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,Byte.class));
  assertEquals((short)1,(short)create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,Short.class));
  assertEquals(1,(int)create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,Integer.class));
  assertEquals(1L,(long)create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,Long.class));
  assertEquals(ubyte((byte)1),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,UByte.class));
  assertEquals(ushort((short)1),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,UShort.class));
  assertEquals(uint(1),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,UInteger.class));
  assertEquals(ulong(1L),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,ULong.class));
  assertEquals(1.0f,create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,Float.class),0.0f);
  assertEquals(1.0,create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,Double.class),0.0);
  assertEquals(new BigInteger("1"),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,BigInteger.class));
  assertEquals(new BigDecimal("1"),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(0,BigDecimal.class));
  assertEquals((byte)1,(byte)create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),Byte.class));
  assertEquals((short)1,(short)create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),Short.class));
  assertEquals(1,(int)create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),Integer.class));
  assertEquals(1L,(long)create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),Long.class));
  assertEquals(ubyte((byte)1),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),UByte.class));
  assertEquals(ushort((short)1),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),UShort.class));
  assertEquals(uint(1),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),UInteger.class));
  assertEquals(ulong(1L),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),ULong.class));
  assertEquals(1.0f,create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),Float.class),0.0f);
  assertEquals(1.0,create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),Double.class),0.0);
  assertEquals(new BigInteger("1"),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),BigInteger.class));
  assertEquals(new BigDecimal("1"),create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).limit(1).fetchOne(TAuthor_ID().getName(),BigDecimal.class));
}
