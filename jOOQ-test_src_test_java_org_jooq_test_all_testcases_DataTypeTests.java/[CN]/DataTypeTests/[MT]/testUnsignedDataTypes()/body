{
  if (TUnsigned() == null) {
    log.info("SKIPPING","Unsigned tests");
    return;
  }
  jOOQAbstractTest.reset=false;
  assertEquals(1,create().insertInto(TUnsigned(),TUnsigned_U_BYTE(),TUnsigned_U_SHORT(),TUnsigned_U_INT(),TUnsigned_U_LONG()).values((UByte)null,null,null,null).execute());
  assertEquals(1,create().selectCount().from(TUnsigned()).fetchOne(0));
  U u=create().selectFrom(TUnsigned()).fetchOne();
  assertNotNull(u);
  assertNull(u.getValue(TUnsigned_U_BYTE()));
  assertNull(u.getValue(TUnsigned_U_SHORT()));
  assertNull(u.getValue(TUnsigned_U_INT()));
  assertNull(u.getValue(TUnsigned_U_LONG()));
  assertEquals(1,create().insertInto(TUnsigned()).set(TUnsigned_U_BYTE(),Unsigned.ubyte((byte)1)).set(TUnsigned_U_SHORT(),Unsigned.ushort((short)1)).set(TUnsigned_U_INT(),Unsigned.uint(1)).set(TUnsigned_U_LONG(),Unsigned.ulong(1L)).execute());
  assertEquals(2,create().selectCount().from(TUnsigned()).fetchOne(0));
  u=create().selectFrom(TUnsigned()).where(TUnsigned_U_INT().equal(Unsigned.uint(1))).fetchOne();
  assertNotNull(u);
  assertEquals(Unsigned.ubyte("1"),u.getValue(TUnsigned_U_BYTE()));
  assertEquals(Unsigned.ushort("1"),u.getValue(TUnsigned_U_SHORT()));
  assertEquals(Unsigned.uint("1"),u.getValue(TUnsigned_U_INT()));
  assertEquals(Unsigned.ulong("1"),u.getValue(TUnsigned_U_LONG()));
  assertEquals("1",u.getValue(TUnsigned_U_BYTE(),String.class));
  assertEquals("1",u.getValue(TUnsigned_U_SHORT(),String.class));
  assertEquals("1",u.getValue(TUnsigned_U_INT(),String.class));
  assertEquals("1",u.getValue(TUnsigned_U_LONG(),String.class));
  assertEquals(Unsigned.ubyte("1"),u.getValue(TUnsigned_U_BYTE()));
  assertEquals(Unsigned.ushort("1"),u.getValue(TUnsigned_U_SHORT()));
  assertEquals(Unsigned.uint("1"),u.getValue(TUnsigned_U_INT()));
  assertEquals(Unsigned.ulong("1"),u.getValue(TUnsigned_U_LONG()));
  assertEquals(1,create().insertInto(TUnsigned()).set(TUnsigned_U_BYTE(),Unsigned.ubyte((byte)-1)).set(TUnsigned_U_SHORT(),Unsigned.ushort((short)-1)).set(TUnsigned_U_INT(),Unsigned.uint(-1)).set(TUnsigned_U_LONG(),Unsigned.ulong(-1L)).execute());
  assertEquals(3,create().selectCount().from(TUnsigned()).fetchOne(0));
  u=create().selectFrom(TUnsigned()).where(TUnsigned_U_INT().equal(Unsigned.uint(-1))).fetchOne();
  assertNotNull(u);
  assertEquals(Unsigned.ubyte(UByte.MAX_VALUE),u.getValue(TUnsigned_U_BYTE()));
  assertEquals(Unsigned.ushort(UShort.MAX_VALUE),u.getValue(TUnsigned_U_SHORT()));
  assertEquals(Unsigned.uint(UInteger.MAX_VALUE),u.getValue(TUnsigned_U_INT()));
  assertEquals(Unsigned.ulong(ULong.MAX_VALUE),u.getValue(TUnsigned_U_LONG()));
  assertEquals((byte)-1,u.getValue(TUnsigned_U_BYTE()).byteValue());
  assertEquals((short)-1,u.getValue(TUnsigned_U_SHORT()).shortValue());
  assertEquals(-1,u.getValue(TUnsigned_U_INT()).intValue());
  assertEquals(-1L,u.getValue(TUnsigned_U_LONG()).longValue());
}
