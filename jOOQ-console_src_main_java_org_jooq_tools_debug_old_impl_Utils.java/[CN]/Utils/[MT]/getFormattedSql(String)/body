{
  if (text == null) {
    return null;
  }
  String originalText=text;
  text=text.trim();
  if (text.length() == 0) {
    return originalText;
  }
  int startIndex=originalText.indexOf(text);
  int endIndex=startIndex + text.length();
  text=text.replaceAll("[\\t\\n\\x0B\\f\\r]+"," ");
  String textIndent="  ";
  StringBuilder sb=new StringBuilder();
  int charCount=text.length();
  char quoteStart=0;
  boolean isLineStart=false;
  String currentIndent="";
  boolean isWritingKeyword=isSqlKeywordStart(text.trim());
  Stack<Boolean> isParenthesisNewLineStack=new Stack<Boolean>();
  for (int i=0; i < charCount; i++) {
    char c=text.charAt(i);
    if (quoteStart != 0) {
      if (c == quoteStart) {
        quoteStart=0;
      }
      sb.append(c);
    }
 else {
switch (c) {
case '"':
case '\'':
{
          isWritingKeyword=false;
          if (isLineStart) {
            isLineStart=false;
            sb.append(currentIndent);
          }
          quoteStart=c;
          sb.append(c);
          break;
        }
case '(':
{
        isWritingKeyword=false;
        boolean isNewLine=false;
        if (text.length() <= i + 1 || !text.substring(i + 1).matches("\\s*(\\w+|[^\\w\\s])\\s*\\).*")) {
          while (text.length() > i + 1 && text.charAt(i + 1) == ' ') {
            i++;
          }
          isNewLine=true;
          if (isLineStart) {
            isLineStart=false;
            sb.append(currentIndent);
          }
          sb.append(c);
          sb.append('\n');
          isLineStart=true;
          currentIndent+=textIndent;
        }
 else {
          sb.append(c);
        }
        isParenthesisNewLineStack.push(isNewLine);
        break;
      }
case ')':
{
      isWritingKeyword=false;
      if (!isParenthesisNewLineStack.isEmpty()) {
        boolean isNewLine=isParenthesisNewLineStack.pop();
        if (isNewLine) {
          if (isLineStart) {
            isLineStart=false;
          }
 else {
            sb.append('\n');
          }
          int length=currentIndent.length();
          length-=textIndent.length();
          if (length >= 0) {
            currentIndent=currentIndent.substring(0,length);
          }
          sb.append(currentIndent);
        }
      }
      sb.append(c);
      break;
    }
case ' ':
{
    boolean isFirstKeyWord=!isWritingKeyword;
    isWritingKeyword=text.length() > i + 1 && isSqlKeywordStart(text.substring(i + 1).trim());
    if (!isLineStart && isWritingKeyword && isFirstKeyWord) {
      while (text.length() > i + 1 && text.charAt(i + 1) == ' ') {
        i++;
      }
      sb.append('\n');
      isLineStart=true;
    }
 else {
      if (text.length() > i + 1 && text.charAt(i + 1) != ' ') {
        sb.append(c);
      }
    }
    break;
  }
case ',':
{
  isWritingKeyword=false;
  if (isLineStart) {
    isLineStart=false;
    sb.append(currentIndent);
  }
  sb.append(c);
  if (text.length() > i + 1 && text.charAt(i + 1) != ' ') {
    sb.append(' ');
  }
  break;
}
case '[':
case ']':
isWritingKeyword=false;
default :
{
if (isLineStart) {
isLineStart=false;
sb.append(currentIndent);
}
sb.append(c);
break;
}
}
}
}
String newContent=sb.toString().replaceAll(" +\n","\n");
String newText=originalText.substring(0,startIndex) + newContent + originalText.substring(endIndex);
return newText;
}
