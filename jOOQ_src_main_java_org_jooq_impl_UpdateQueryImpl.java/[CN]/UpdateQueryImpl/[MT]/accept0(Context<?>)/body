{
  ctx.start(UPDATE_UPDATE).keyword("update").sql(' ').declareTables(true).visit(table).declareTables(false).end(UPDATE_UPDATE);
  ctx.formatSeparator().start(UPDATE_SET).keyword("set").sql(' ');
  if (multiRow != null) {
    boolean qualify=ctx.qualify();
    ctx.start(UPDATE_SET_ASSIGNMENT).qualify(false).visit(multiRow).qualify(qualify).sql(" = ");
    if (multiValue != null && !asList().contains(ctx.configuration().dialect().family())) {
      ctx.visit(multiValue);
    }
 else {
      Select<?> select=multiSelect;
      if (multiValue != null) {
        select=select(multiValue.fields());
      }
      ctx.sql('(').formatIndentStart().formatNewLine().subquery(true).visit(select).subquery(false).formatIndentEnd().formatNewLine().sql(')');
    }
    ctx.end(UPDATE_SET_ASSIGNMENT);
  }
 else {
    ctx.formatIndentLockStart().visit(updateMap).formatIndentLockEnd();
  }
  ctx.end(UPDATE_SET);
switch (ctx.configuration().dialect().family()) {
default :
    ctx.start(UPDATE_FROM);
  if (!from.isEmpty()) {
    ctx.formatSeparator().keyword("from").sql(' ').declareTables(true).visit(from).declareTables(false);
  }
ctx.end(UPDATE_FROM);
break;
}
ctx.start(UPDATE_WHERE);
if (!(getWhere() instanceof TrueCondition)) {
ctx.formatSeparator().keyword("where").sql(' ').visit(getWhere());
}
ctx.end(UPDATE_WHERE).start(UPDATE_RETURNING);
toSQLReturning(ctx);
ctx.end(UPDATE_RETURNING);
}
