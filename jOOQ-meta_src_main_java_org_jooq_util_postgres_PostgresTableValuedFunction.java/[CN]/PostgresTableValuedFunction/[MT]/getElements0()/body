{
  List<ColumnDefinition> result=new ArrayList<ColumnDefinition>();
  Long oid=null;
  try {
    oid=Long.valueOf(specificName.substring(specificName.lastIndexOf("_") + 1));
  }
 catch (  Exception ignore) {
  }
  if (oid != null) {
    for (    Record record : create().fetch(" SELECT columns.proargname AS column_name," + "        ROW_NUMBER() OVER(PARTITION BY p.oid ORDER BY o.ordinal) AS ordinal_position," + "        format_type(t.oid, t.typtypmod) AS data_type,"+ "        information_schema._pg_char_max_length(t.oid, t.typtypmod) AS character_maximum_length,"+ "        information_schema._pg_numeric_precision(t.oid, t.typtypmod) AS numeric_precision,"+ "        information_schema._pg_numeric_scale(t.oid, t.typtypmod) AS numeric_scale,"+ "        not(t.typnotnull) AS is_nullable"+ " FROM pg_proc p,"+ " LATERAL generate_series(1, array_length(p.proargmodes, 1)) o(ordinal),"+ " LATERAL (SELECT p.proargnames[o.ordinal], p.proargmodes[o.ordinal], p.proallargtypes[o.ordinal]) columns(proargname, proargmode, proargtype),"+ " LATERAL ("+ "   SELECT pg_type.oid oid, pg_type.* FROM pg_type WHERE pg_type.oid = columns.proargtype"+ " ) t"+ " WHERE p.proretset"+ " AND columns.proargmode = 't'"+ " AND p.oid = ?",oid)) {
      DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),getSchema(),record.getValue("data_type",String.class),record.getValue("character_maximum_length",Integer.class),record.getValue("numeric_precision",Integer.class),record.getValue("numeric_scale",Integer.class),record.getValue("is_nullable",boolean.class),false,null);
      ColumnDefinition column=new DefaultColumnDefinition(getDatabase().getTable(getSchema(),getName()),record.getValue("column_name",String.class),record.getValue("ordinal_position",int.class),type,false,null);
      result.add(column);
    }
  }
  return result;
}
