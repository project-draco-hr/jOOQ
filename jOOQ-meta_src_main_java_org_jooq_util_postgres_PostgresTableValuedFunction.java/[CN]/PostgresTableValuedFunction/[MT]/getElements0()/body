{
  List<ColumnDefinition> result=new ArrayList<ColumnDefinition>();
  Routines r=ROUTINES;
  Parameters p=PARAMETERS;
  PgNamespace pg_n=PG_NAMESPACE;
  PgProc pg_p=PG_PROC;
  for (  Record record : create().select(r.ROUTINE_NAME,p.PARAMETER_NAME,rowNumber().over(partitionBy(p.SPECIFIC_NAME).orderBy(p.ORDINAL_POSITION)).as(p.ORDINAL_POSITION.getName()),p.DATA_TYPE,p.CHARACTER_MAXIMUM_LENGTH,p.NUMERIC_PRECISION,p.NUMERIC_SCALE).from(r).join(p).on(row(r.SPECIFIC_CATALOG,r.SPECIFIC_SCHEMA,r.SPECIFIC_NAME).eq(p.SPECIFIC_CATALOG,p.SPECIFIC_SCHEMA,p.SPECIFIC_NAME)).join(pg_n).on(r.SPECIFIC_SCHEMA.eq(pg_n.NSPNAME)).join(pg_p).on(pg_p.PRONAMESPACE.eq(oid(pg_n))).and(pg_p.PRONAME.eq(r.ROUTINE_NAME)).where(r.SPECIFIC_NAME.eq(specificName)).and(p.PARAMETER_MODE.ne("IN")).and(pg_p.PRORETSET).fetch()) {
    DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),getSchema(),record.getValue(p.DATA_TYPE),record.getValue(p.CHARACTER_MAXIMUM_LENGTH),record.getValue(p.NUMERIC_PRECISION),record.getValue(p.NUMERIC_SCALE),true,false,null);
    ColumnDefinition column=new DefaultColumnDefinition(getDatabase().getTable(getSchema(),getName()),record.getValue(p.PARAMETER_NAME),record.getValue(p.ORDINAL_POSITION),type,false,null);
    result.add(column);
  }
  return result;
}
