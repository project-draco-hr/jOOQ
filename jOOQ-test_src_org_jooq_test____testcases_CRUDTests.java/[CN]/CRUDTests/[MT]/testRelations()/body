{
  if (getDialect() == SQLDialect.SQLITE) {
    log.info("SKIPPING","referentials test");
    return;
  }
  jOOQAbstractTest.reset=false;
  B book1984=create().fetchOne(TBook(),TBook_TITLE().equal("1984"));
  Record authorOrwell=(Record)invoke(book1984,"fetchTAuthorByAuthorId");
  assertEquals("Orwell",authorOrwell.getValue(TAuthor_LAST_NAME()));
  List<?> books1=(List<?>)invoke(authorOrwell,"fetchTBookListByAuthorId");
  assertEquals(2,books1.size());
  List<Object> booksToBookStores=new ArrayList<Object>();
  for (  Object b : books1) {
    booksToBookStores.addAll((List<?>)invoke(b,"fetchTBookToBookStoreList"));
  }
  assertEquals(3,booksToBookStores.size());
  Set<String> bookStoreNames=new TreeSet<String>();
  List<Object> bookStores=new ArrayList<Object>();
  for (  Object b : booksToBookStores) {
    Object store=invoke(b,"fetchTBookStore");
    bookStores.add(store);
    bookStoreNames.add((String)invoke(store,"getName"));
  }
  assertEquals(Arrays.asList("Ex Libris","Orell F??ssli"),new ArrayList<String>(bookStoreNames));
  booksToBookStores=new ArrayList<Object>();
  for (  Object b : bookStores) {
    booksToBookStores.addAll((List<?>)invoke(b,"fetchTBookToBookStoreList"));
  }
  Set<String> book2Names=new TreeSet<String>();
  List<Object> books2=new ArrayList<Object>();
  for (  Object b : booksToBookStores) {
    Object book=invoke(b,"fetchTBook");
    books2.add(book);
    book2Names.add((String)invoke(book,"getTitle"));
  }
  assertEquals(Arrays.asList("1984","Animal Farm","O Alquimista"),new ArrayList<String>(book2Names));
  Set<String> authorNames=new TreeSet<String>();
  for (  Object b : books2) {
    Object author=invoke(b,"fetchTAuthorByAuthorId");
    authorNames.add((String)invoke(author,"getLastName"));
  }
  assertEquals(Arrays.asList("Coelho","Orwell"),new ArrayList<String>(authorNames));
}
