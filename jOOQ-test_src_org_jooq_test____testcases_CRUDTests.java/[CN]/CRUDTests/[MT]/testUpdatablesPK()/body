{
  jOOQAbstractTest.reset=false;
  B book=create().newRecord(TBook());
  try {
    book.refresh();
  }
 catch (  InvalidResultException expected) {
  }
  B book1=create().fetchOne(TBook(),TBook_TITLE().equal("1984"));
  B book2=create().fetchOne(TBook(),TBook_TITLE().equal("1984"));
  assertEquals(0,book1.store());
  Integer id=book1.getValue(TBook_ID());
  book1.setValue(TBook_TITLE(),"1985");
  assertEquals("1984",book1.original().getValue(TBook_TITLE()));
  assertEquals("1984",book1.original(TBook_TITLE()));
  assertTrue(book1.changed());
  assertTrue(book1.changed(TBook_TITLE()));
  assertEquals(1,book1.store());
  assertEquals("1985",book1.original().getValue(TBook_TITLE()));
  assertEquals("1985",book1.original(TBook_TITLE()));
  assertFalse(book1.changed());
  assertFalse(book1.changed(TBook_TITLE()));
  book1=create().fetchOne(TBook(),TBook_ID().equal(id));
  book1.setValue(TBook_TITLE(),"1999");
  book1.setValue(TBook_AUTHOR_ID(),3);
  assertEquals("1999",book1.getValue(TBook_TITLE()));
  book1.refresh(TBook_TITLE());
  assertEquals("1985",book1.getValue(TBook_TITLE()));
  assertEquals(3,(int)book1.getValue(TBook_AUTHOR_ID()));
  book1.refresh();
  assertEquals(1,(int)book1.getValue(TBook_AUTHOR_ID()));
  assertEquals(0,book1.store());
  assertEquals(id,book2.getValue(TBook_ID()));
  assertEquals("1984",book2.getValue(TBook_TITLE()));
  book2.refresh();
  assertEquals(id,book1.getValue(TBook_ID()));
  assertEquals(id,book2.getValue(TBook_ID()));
  assertEquals("1985",book1.getValue(TBook_TITLE()));
  assertEquals("1985",book2.getValue(TBook_TITLE()));
  if (getDialect() == SQLDialect.ASE) {
    create().truncate(table("t_book_to_book_store")).execute();
  }
  assertEquals(1,book1.delete());
  assertEquals(0,book1.delete());
  assertEquals(0,book2.delete());
  assertEquals(null,create().fetchOne(TBook(),TBook_ID().equal(id)));
  assertEquals(1,book1.store());
  book1.refresh();
  book2.refresh();
  assertEquals(id,book1.getValue(TBook_ID()));
  assertEquals(id,book2.getValue(TBook_ID()));
  assertEquals("1985",book1.getValue(TBook_TITLE()));
  assertEquals("1985",book2.getValue(TBook_TITLE()));
  book1=book1.copy();
  book2=book2.copy();
  assertNull(book1.getValue(TBook_ID()));
  assertNull(book2.getValue(TBook_ID()));
  assertEquals("1985",book1.getValue(TBook_TITLE()));
  assertEquals("1985",book2.getValue(TBook_TITLE()));
  try {
    book1.store();
  }
 catch (  DataAccessException expected) {
  }
  try {
    book2.store();
  }
 catch (  DataAccessException expected) {
  }
  book1.setValue(TBook_ID(),11);
  book2.setValue(TBook_ID(),12);
  assertEquals(1,book1.store());
  assertEquals(1,book2.store());
  book1=create().newRecord(TBook());
  book2=create().newRecord(TBook());
  book1.setValue(TBook_ID(),11);
  book2.setValue(TBook_ID(),12);
  book1.refresh();
  book2.refresh();
  assertEquals(Integer.valueOf(11),book1.getValue(TBook_ID()));
  assertEquals(Integer.valueOf(12),book2.getValue(TBook_ID()));
  assertEquals("1985",book1.getValue(TBook_TITLE()));
  assertEquals("1985",book2.getValue(TBook_TITLE()));
  A author=create().newRecord(TAuthor());
  author.setValue(TAuthor_ID(),77);
  author.setValue(TAuthor_LAST_NAME(),"D??blin");
  assertEquals(1,author.store());
  assertEquals(Integer.valueOf(77),create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("D??blin")).getValue(TAuthor_ID()));
  S store=create().newRecord(TBookStore());
  assertEquals(0,store.store());
  author=create().newRecord(TAuthor());
  author.setValue(TAuthor_ID(),78);
  author.setValue(TAuthor_LAST_NAME(),"Cohen");
  assertEquals(1,author.store());
  assertEquals(0,author.store());
  author.setValue(TAuthor_FIRST_NAME(),"Arthur");
  assertEquals(1,author.store());
  assertEquals(1,create().select(count()).from(TAuthor()).where(TAuthor_FIRST_NAME().equal("Arthur")).and(TAuthor_LAST_NAME().equal("Cohen")).fetchOne(0));
  author=create().selectFrom(TAuthor()).where(TAuthor_FIRST_NAME().equal("Arthur")).fetchOne();
  author.setValue(TAuthor_FIRST_NAME(),"Leonard");
  author.setValue(TAuthor_FIRST_NAME(),"Leonard");
  assertEquals(1,author.store());
  assertEquals(1,create().select(count()).from(TAuthor()).where(TAuthor_FIRST_NAME().equal("Leonard")).and(TAuthor_LAST_NAME().equal("Cohen")).fetchOne(0));
}
