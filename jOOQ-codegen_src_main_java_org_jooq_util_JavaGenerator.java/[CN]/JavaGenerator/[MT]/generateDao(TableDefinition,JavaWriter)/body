{
  UniqueKeyDefinition key=table.getPrimaryKey();
  if (key == null) {
    log.info("Skipping DAO generation",out.file().getName());
    return;
  }
  final String className=getStrategy().getJavaClassName(table,Mode.DAO);
  final List<String> interfaces=out.ref(getStrategy().getJavaClassImplements(table,Mode.DAO));
  final String tableRecord=out.ref(getStrategy().getFullJavaClassName(table,Mode.RECORD));
  final String daoImpl=out.ref(DAOImpl.class);
  final String tableIdentifier=out.ref(getStrategy().getFullJavaIdentifier(table),2);
  String tType=(scala ? "Unit" : "Void");
  String pType=out.ref(getStrategy().getFullJavaClassName(table,Mode.POJO));
  List<ColumnDefinition> keyColumns=key.getKeyColumns();
  if (keyColumns.size() == 1) {
    tType=getJavaType(keyColumns.get(0).getType());
  }
 else   if (keyColumns.size() <= Constants.MAX_ROW_DEGREE) {
    String generics="";
    String separator="";
    for (    ColumnDefinition column : keyColumns) {
      generics+=separator + out.ref(getJavaType(column.getType()));
      separator=", ";
    }
    if (scala)     tType=Record.class.getName() + keyColumns.size() + "["+ generics+ "]";
 else     tType=Record.class.getName() + keyColumns.size() + "<"+ generics+ ">";
  }
 else {
    tType=Record.class.getName();
  }
  tType=out.ref(tType);
  printPackage(out,table,Mode.DAO);
  generateDaoClassJavadoc(table,out);
  printClassAnnotations(out,table.getSchema());
  if (generateSpringAnnotations())   out.println("@%s",out.ref("org.springframework.stereotype.Repository"));
  if (scala)   out.println("class %s(configuration: %s) extends %s[%s, %s, %s](%s, classOf[%s], configuration)[[before= with ][separator= with ][%s]] {",className,Configuration.class,daoImpl,tableRecord,pType,tType,tableIdentifier,pType,interfaces);
 else   out.println("public class %s extends %s<%s, %s, %s>[[before= implements ][%s]] {",className,daoImpl,tableRecord,pType,tType,interfaces);
  out.tab(1).javadoc("Create a new %s without any configuration",className);
  if (scala) {
    out.tab(1).println("def this() = {");
    out.tab(2).println("this(null)");
    out.tab(1).println("}");
  }
 else {
    out.tab(1).println("public %s() {",className);
    out.tab(2).println("super(%s, %s.class);",tableIdentifier,pType);
    out.tab(1).println("}");
  }
  if (scala) {
  }
 else {
    out.tab(1).javadoc("Create a new %s with an attached configuration",className);
    if (generateSpringAnnotations())     out.tab(1).println("@%s",out.ref("org.springframework.beans.factory.annotation.Autowired"));
    out.tab(1).println("public %s(%s configuration) {",className,Configuration.class);
    out.tab(2).println("super(%s, %s.class, configuration);",tableIdentifier,pType);
    out.tab(1).println("}");
  }
  if (scala) {
    out.println();
    out.tab(1).println("override protected def getId(o: %s): %s = {",pType,tType);
  }
 else {
    out.tab(1).overrideInherit();
    out.tab(1).println("protected %s getId(%s object) {",tType,pType);
  }
  if (keyColumns.size() == 1) {
    if (scala)     out.tab(2).println("o.%s",getStrategy().getJavaGetterName(keyColumns.get(0),Mode.POJO));
 else     out.tab(2).println("return object.%s();",getStrategy().getJavaGetterName(keyColumns.get(0),Mode.POJO));
  }
 else {
    String params="";
    String separator="";
    for (    ColumnDefinition column : keyColumns) {
      if (scala)       params+=separator + "o." + getStrategy().getJavaGetterName(column,Mode.POJO);
 else       params+=separator + "object." + getStrategy().getJavaGetterName(column,Mode.POJO)+ "()";
      separator=", ";
    }
    if (scala)     out.tab(2).println("compositeKeyRecord(%s)",params);
 else     out.tab(2).println("return compositeKeyRecord(%s);",params);
  }
  out.tab(1).println("}");
  for (  ColumnDefinition column : table.getColumns()) {
    final String colName=column.getOutputName();
    final String colClass=getStrategy().getJavaClassName(column);
    final String colType=out.ref(getJavaType(column.getType()));
    final String colIdentifier=out.ref(getStrategy().getFullJavaIdentifier(column),colRefSegments(column));
    out.tab(1).javadoc("Fetch records that have <code>%s IN (values)</code>",colName);
    if (scala) {
      out.tab(1).println("def fetchBy%s(values: %s*): %s[%s] = {",colClass,colType,List.class,pType);
      out.tab(2).println("fetch(%s, values:_*)",colIdentifier);
      out.tab(1).println("}");
    }
 else {
      out.tab(1).println("public %s<%s> fetchBy%s(%s... values) {",List.class,pType,colClass,colType);
      out.tab(2).println("return fetch(%s, values);",colIdentifier);
      out.tab(1).println("}");
    }
    ukLoop:     for (    UniqueKeyDefinition uk : column.getUniqueKeys()) {
      if (uk.getKeyColumns().size() == 1 && uk.getKeyColumns().get(0).equals(column)) {
        out.tab(1).javadoc("Fetch a unique record that has <code>%s = value</code>",colName);
        if (scala) {
          out.tab(1).println("def fetchOneBy%s(value: %s): %s = {",colClass,colType,pType);
          out.tab(2).println("fetchOne(%s, value)",colIdentifier);
          out.tab(1).println("}");
        }
 else {
          out.tab(1).println("public %s fetchOneBy%s(%s value) {",pType,colClass,colType);
          out.tab(2).println("return fetchOne(%s, value);",colIdentifier);
          out.tab(1).println("}");
        }
        break ukLoop;
      }
    }
  }
  generateDaoClassFooter(table,out);
  out.println("}");
}
