{
  log.info("Generating Identities");
  List<IdentityDefinition> identities=database.getIdentities(schema);
  if (identities.size() == 0) {
    return;
  }
  JavaWriter out=new JavaWriter(new File(getStrategy().getFile(schema).getParentFile(),"Identities.java"));
  printPackage(out,schema);
  printClassJavadoc(out,"A class modelling identity columns of the <code>" + schema.getOutputName() + "</code> schema");
  out.println("public class Identities {");
  out.println();
  for (int i=0; i < identities.size(); i++) {
    final IdentityDefinition identity=identities.get(i);
    try {
      final String identityType=getStrategy().getFullJavaClassName(identity.getColumn().getContainer(),Mode.RECORD);
      final String columnType=getJavaType(identity.getColumn().getType());
      final String identityId=getStrategy().getJavaIdentifier(identity.getColumn().getContainer());
      final int block=i / INITIALISER_SIZE;
      out.tab(1).println("public static final %s<%s, %s> IDENTITY_%s = Identities%s.IDENTITY_%s;",Identity.class,identityType,columnType,identityId,block,identityId);
    }
 catch (    Exception e) {
      log.error("Error while generating identity" + identity,e);
    }
  }
  int identityCounter=0;
  out.tab(1).header("[#1459] distribute members to avoid static initialisers > 64kb");
  for (  IdentityDefinition identity : identities) {
    final int block=identityCounter / INITIALISER_SIZE;
    if (identityCounter % INITIALISER_SIZE == 0) {
      if (identityCounter > 0) {
        out.tab(1).println("}");
      }
      out.println();
      out.tab(1).println("private static class Identities%s extends %s {",block,AbstractKeys.class);
    }
    out.tab(2).println("static %s<%s, %s> %s = createIdentity(%s, %s);",Identity.class,getStrategy().getFullJavaClassName(identity.getTable(),Mode.RECORD),getJavaType(identity.getColumn().getType()),getStrategy().getJavaIdentifier(identity),getStrategy().getFullJavaIdentifier(identity.getColumn().getContainer()),getStrategy().getFullJavaIdentifier(identity.getColumn()));
    identityCounter++;
  }
  if (identityCounter > 0) {
    out.println("\t}");
  }
  out.println("}");
  out.close();
  watch.splitInfo("Identities generated");
}
