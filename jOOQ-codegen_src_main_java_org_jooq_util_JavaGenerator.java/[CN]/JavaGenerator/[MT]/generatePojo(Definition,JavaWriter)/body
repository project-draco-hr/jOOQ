{
  final String className=getStrategy().getJavaClassName(tableOrUDT,Mode.POJO);
  final String superName=out.ref(getStrategy().getJavaClassExtends(tableOrUDT,Mode.POJO));
  final List<String> interfaces=out.ref(getStrategy().getJavaClassImplements(tableOrUDT,Mode.POJO));
  final List<String> superTypes=list(superName,interfaces);
  if (generateInterfaces()) {
    interfaces.add(out.ref(getStrategy().getFullJavaClassName(tableOrUDT,Mode.INTERFACE)));
  }
  printPackage(out,tableOrUDT,Mode.POJO);
  if (tableOrUDT instanceof TableDefinition)   generatePojoClassJavadoc((TableDefinition)tableOrUDT,out);
 else   generateUDTPojoClassJavadoc((UDTDefinition)tableOrUDT,out);
  printClassAnnotations(out,tableOrUDT.getSchema());
  if (tableOrUDT instanceof TableDefinition)   printTableJPAAnnotation(out,(TableDefinition)tableOrUDT);
  int maxLength=0;
  for (  TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
    maxLength=Math.max(maxLength,out.ref(getJavaType(column.getType(),Mode.POJO)).length());
  }
  if (scala) {
    out.println("%sclass %s(",(generateImmutablePojos() ? "case " : ""),className);
    String separator="  ";
    for (    TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
      out.tab(1).println("%s%s%s: %s",separator,generateImmutablePojos() ? "" : "private var ",getStrategy().getJavaMemberName(column,Mode.POJO),StringUtils.rightPad(out.ref(getJavaType(column.getType(),Mode.POJO)),maxLength));
      separator=", ";
    }
    out.println(")[[before= extends ][%s]][[before= with ][separator= with ][%s]] {",first(superTypes),remaining(superTypes));
  }
 else {
    out.println("public class %s[[before= extends ][%s]][[before= implements ][%s]] {",className,list(superName),interfaces);
    out.printSerial();
    out.println();
    for (    TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
      out.tab(1).println("private %s%s %s;",generateImmutablePojos() ? "final " : "",StringUtils.rightPad(out.ref(getJavaType(column.getType(),Mode.POJO)),maxLength),getStrategy().getJavaMemberName(column,Mode.POJO));
    }
  }
  if (!generateImmutablePojos()) {
    out.println();
    if (scala) {
      int size=getTypedElements(tableOrUDT).size();
      if (size > 0) {
        List<String> nulls=new ArrayList<String>();
        for (        TypedElementDefinition<?> column : getTypedElements(tableOrUDT))         if (size == 1)         nulls.add("null : " + out.ref(getJavaType(column.getType(),Mode.POJO)));
 else         nulls.add("null");
        out.tab(1).println("def this() = {",className);
        out.tab(2).println("this([[%s]])",nulls);
        out.tab(1).println("}");
      }
    }
 else {
      out.tab(1).println("public %s() {}",className);
    }
  }
  out.println();
  if (scala) {
    out.tab(1).println("def this (value: %s) = {",className,className);
    out.tab(2).println("this(");
    String separator="  ";
    for (    TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
      out.tab(3).println("%svalue.%s",separator,getStrategy().getJavaMemberName(column,Mode.POJO),getStrategy().getJavaMemberName(column,Mode.POJO));
      separator=", ";
    }
    out.tab(2).println(")");
    out.tab(1).println("}");
  }
 else {
    out.tab(1).println("public %s(%s value) {",className,className);
    for (    TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
      out.tab(2).println("this.%s = value.%s;",getStrategy().getJavaMemberName(column,Mode.POJO),getStrategy().getJavaMemberName(column,Mode.POJO));
    }
    out.tab(1).println("}");
  }
  if (scala) {
  }
 else   if (getTypedElements(tableOrUDT).size() > 0 && getTypedElements(tableOrUDT).size() < 256) {
    out.println();
    out.tab(1).print("public %s(",className);
    String separator1="";
    for (    TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
      out.println(separator1);
      out.tab(2).print("%s %s",StringUtils.rightPad(out.ref(getJavaType(column.getType(),Mode.POJO)),maxLength),getStrategy().getJavaMemberName(column,Mode.POJO));
      separator1=",";
    }
    out.println();
    out.tab(1).println(") {");
    for (    TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
      final String columnMember=getStrategy().getJavaMemberName(column,Mode.POJO);
      out.tab(2).println("this.%s = %s;",columnMember,columnMember);
    }
    out.tab(1).println("}");
  }
  for (  TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
    final String columnType=out.ref(getJavaType(column.getType(),Mode.POJO));
    final String columnSetterReturnType=fluentSetters() ? className : (scala ? "Unit" : "void");
    final String columnSetter=getStrategy().getJavaSetterName(column,Mode.POJO);
    final String columnGetter=getStrategy().getJavaGetterName(column,Mode.POJO);
    final String columnMember=getStrategy().getJavaMemberName(column,Mode.POJO);
    final boolean isUDT=column.getType().isUDT();
    final boolean isUDTArray=column.getType().isArray() && database.getArray(column.getType().getSchema(),column.getType().getUserType()).getElementType().isUDT();
    out.println();
    if (column instanceof ColumnDefinition)     printColumnJPAAnnotation(out,(ColumnDefinition)column);
    printValidationAnnotation(out,column);
    if (scala) {
      out.tab(1).println("def %s: %s = {",columnGetter,columnType);
      out.tab(2).println("this.%s",columnMember);
      out.tab(1).println("}");
    }
 else {
      out.tab(1).overrideIf(generateInterfaces());
      out.tab(1).println("public %s %s() {",columnType,columnGetter);
      out.tab(2).println("return this.%s;",columnMember);
      out.tab(1).println("}");
    }
    if (!generateImmutablePojos()) {
      if (!(generateInterfaces() && isUDTArray)) {
        out.println();
        if (scala) {
          out.tab(1).println("def %s(%s: %s): %s = {",columnSetter,columnMember,columnType,columnSetterReturnType);
          out.tab(2).println("this.%s = %s",columnMember,columnMember);
          if (fluentSetters())           out.tab(2).println("this");
          out.tab(1).println("}");
        }
 else {
          out.tab(1).overrideIf(generateInterfaces() && !generateImmutableInterfaces() && !isUDT);
          out.tab(1).println("public %s %s(%s %s) {",columnSetterReturnType,columnSetter,varargsIfArray(columnType),columnMember);
          out.tab(2).println("this.%s = %s;",columnMember,columnMember);
          if (fluentSetters())           out.tab(2).println("return this;");
          out.tab(1).println("}");
        }
      }
      if (generateInterfaces() && (isUDT || isUDTArray)) {
        final String columnTypeInterface=out.ref(getJavaType(column.getType(),Mode.INTERFACE));
        out.println();
        if (scala) {
          out.tab(1).println("def %s(%s: %s): %s = {",columnSetter,columnMember,columnTypeInterface,columnSetterReturnType);
          out.tab(2).println("if (%s == null)",columnMember);
          out.tab(3).println("this.%s = null",columnMember);
          out.tab(2).println("else");
          out.tab(3).println("this.%s = %s.into(new %s)",columnMember,columnMember,columnType);
          if (fluentSetters())           out.tab(2).println("this");
          out.tab(1).println("}");
        }
 else {
          out.tab(1).override();
          out.tab(1).println("public %s %s(%s %s) {",columnSetterReturnType,columnSetter,varargsIfArray(columnTypeInterface),columnMember);
          out.tab(2).println("if (%s == null)",columnMember);
          out.tab(3).println("this.%s = null;",columnMember);
          if (isUDT) {
            out.tab(2).println("else");
            out.tab(3).println("this.%s = %s.into(new %s());",columnMember,columnMember,columnType);
          }
 else           if (isUDTArray) {
            final ArrayDefinition array=database.getArray(column.getType().getSchema(),column.getType().getUserType());
            final String componentType=out.ref(getJavaType(array.getElementType(),Mode.POJO));
            final String componentTypeInterface=out.ref(getJavaType(array.getElementType(),Mode.INTERFACE));
            out.tab(2).println("else {");
            out.tab(3).println("this.%s = new %s();",columnMember,ArrayList.class);
            out.println();
            out.tab(3).println("for (%s i : %s)",componentTypeInterface,columnMember);
            out.tab(4).println("this.%s.add(i.into(new %s()));",columnMember,componentType);
            out.tab(2).println("}");
          }
          if (fluentSetters())           out.tab(2).println("return this;");
          out.tab(1).println("}");
        }
      }
    }
  }
  if (generatePojosEqualsAndHashCode()) {
    generatePojoEqualsAndHashCode(tableOrUDT,out);
  }
  if (generatePojosToString()) {
    generatePojoToString(tableOrUDT,out);
  }
  if (generateInterfaces() && !generateImmutablePojos()) {
    printFromAndInto(out,tableOrUDT);
  }
  if (tableOrUDT instanceof TableDefinition)   generatePojoClassFooter((TableDefinition)tableOrUDT,out);
 else   generateUDTPojoClassFooter((UDTDefinition)tableOrUDT,out);
  out.println("}");
  closeJavaWriter(out);
}
