{
  final String className=getStrategy().getJavaClassName(tableOrUDT,Mode.POJO);
  final String superName=out.ref(getStrategy().getJavaClassExtends(tableOrUDT,Mode.POJO));
  final List<String> interfaces=out.ref(getStrategy().getJavaClassImplements(tableOrUDT,Mode.POJO));
  if (generateInterfaces()) {
    interfaces.add(out.ref(getStrategy().getFullJavaClassName(tableOrUDT,Mode.INTERFACE)));
  }
  printPackage(out,tableOrUDT,Mode.POJO);
  if (tableOrUDT instanceof TableDefinition)   generatePojoClassJavadoc((TableDefinition)tableOrUDT,out);
 else   generateUDTPojoClassJavadoc((UDTDefinition)tableOrUDT,out);
  printClassAnnotations(out,tableOrUDT.getSchema());
  if (tableOrUDT instanceof TableDefinition)   printTableJPAAnnotation(out,(TableDefinition)tableOrUDT);
  out.println("public class %s[[before= extends ][%s]][[before= implements ][%s]] {",className,list(superName),interfaces);
  out.printSerial();
  out.println();
  int maxLength=0;
  for (  TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
    maxLength=Math.max(maxLength,out.ref(getJavaType(column.getType(),Mode.POJO)).length());
  }
  for (  TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
    out.tab(1).println("private %s%s %s;",generateImmutablePojos() ? "final " : "",StringUtils.rightPad(out.ref(getJavaType(column.getType(),Mode.POJO)),maxLength),getStrategy().getJavaMemberName(column,Mode.POJO));
  }
  if (!generateImmutablePojos()) {
    out.println();
    out.tab(1).print("public %s() {}",className);
    out.println();
  }
  out.println();
  out.tab(1).println("public %s(%s value) {",className,className);
  for (  TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
    out.tab(2).println("this.%s = value.%s;",getStrategy().getJavaMemberName(column,Mode.POJO),getStrategy().getJavaMemberName(column,Mode.POJO));
  }
  out.tab(1).println("}");
  if (getTypedElements(tableOrUDT).size() > 0 && getTypedElements(tableOrUDT).size() < 256) {
    out.println();
    out.tab(1).print("public %s(",className);
    String separator1="";
    for (    TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
      out.println(separator1);
      out.tab(2).print("%s %s",StringUtils.rightPad(out.ref(getJavaType(column.getType(),Mode.POJO)),maxLength),getStrategy().getJavaMemberName(column,Mode.POJO));
      separator1=",";
    }
    out.println();
    out.tab(1).println(") {");
    for (    TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
      final String columnMember=getStrategy().getJavaMemberName(column,Mode.POJO);
      out.tab(2).println("this.%s = %s;",columnMember,columnMember);
    }
    out.tab(1).println("}");
  }
  for (  TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
    final String columnType=out.ref(getJavaType(column.getType(),Mode.POJO));
    final String columnSetterReturnType=fluentSetters() ? className : "void";
    final String columnSetter=getStrategy().getJavaSetterName(column,Mode.POJO);
    final String columnGetter=getStrategy().getJavaGetterName(column,Mode.POJO);
    final String columnMember=getStrategy().getJavaMemberName(column,Mode.POJO);
    final boolean isUDT=column.getType().isUDT();
    out.println();
    if (column instanceof ColumnDefinition)     printColumnJPAAnnotation(out,(ColumnDefinition)column);
    printValidationAnnotation(out,column);
    out.tab(1).overrideIf(generateInterfaces());
    out.tab(1).println("public %s %s() {",columnType,columnGetter);
    out.tab(2).println("return this.%s;",columnMember);
    out.tab(1).println("}");
    if (!generateImmutablePojos()) {
      out.println();
      out.tab(1).overrideIf(generateInterfaces() && !isUDT);
      out.tab(1).println("public %s %s(%s %s) {",columnSetterReturnType,columnSetter,columnType,columnMember);
      out.tab(2).println("this.%s = %s;",columnMember,columnMember);
      if (fluentSetters())       out.tab(2).println("return this;");
      out.tab(1).println("}");
      if (generateInterfaces() && isUDT) {
        final String columnTypeInterface=out.ref(getJavaType(column.getType(),Mode.INTERFACE));
        out.println();
        out.tab(1).override();
        out.tab(1).println("public %s %s(%s %s) {",columnSetterReturnType,columnSetter,columnTypeInterface,columnMember);
        out.tab(2).println("if (%s == null)",columnMember);
        out.tab(3).println("this.%s = null;",columnMember);
        out.tab(2).println("else");
        out.tab(3).println("this.%s = %s.into(new %s());",columnMember,columnMember,columnType);
        if (fluentSetters())         out.tab(2).println("return this;");
        out.tab(1).println("}");
      }
    }
  }
  if (generatePojosEqualsAndHashCode()) {
    generatePojoEqualsAndHashCode(tableOrUDT,out);
  }
  if (generateInterfaces() && !generateImmutablePojos()) {
    printFromAndInto(out,tableOrUDT);
  }
  if (tableOrUDT instanceof TableDefinition)   generatePojoClassFooter((TableDefinition)tableOrUDT,out);
 else   generateUDTPojoClassFooter((UDTDefinition)tableOrUDT,out);
  out.println("}");
  out.close();
}
