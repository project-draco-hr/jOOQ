{
  log.info("Generating record",getStrategy().getFileName(table,Mode.RECORD));
  final UniqueKeyDefinition key=table.getPrimaryKey();
  final String className=getStrategy().getJavaClassName(table,Mode.RECORD);
  final String tableIdentifier=getStrategy().getFullJavaIdentifier(table);
  final String recordType=getStrategy().getFullJavaClassName(table,Mode.RECORD);
  final List<String> interfaces=getStrategy().getJavaClassImplements(table,Mode.RECORD);
  JavaWriter out=new JavaWriter(getStrategy().getFile(table,Mode.RECORD));
  printPackage(out,table,Mode.RECORD);
  printClassJavadoc(out,table);
  printTableJPAAnnotation(out,table);
  Class<?> baseClass;
  if (generateRelations() && key != null) {
    baseClass=UpdatableRecordImpl.class;
  }
 else {
    baseClass=TableRecordImpl.class;
  }
  int degree=table.getColumns().size();
  String rowType=null;
  String rowTypeRecord=null;
  if (degree <= Constants.MAX_ROW_DEGREE) {
    rowType=getRowType(table.getColumns());
    rowTypeRecord=Record.class.getName() + degree + "<"+ rowType+ ">";
    interfaces.add(rowTypeRecord);
  }
  if (generateInterfaces()) {
    interfaces.add(getStrategy().getFullJavaClassName(table,Mode.INTERFACE));
  }
  out.println("public class %s extends %s<%s>[[before= implements ][%s]] {",className,baseClass,recordType,interfaces);
  out.printSerial();
  for (int i=0; i < degree; i++) {
    ColumnDefinition column=table.getColumn(i);
    final String comment=StringUtils.defaultString(column.getComment());
    final String setter=getStrategy().getJavaSetterName(column,Mode.DEFAULT);
    final String getter=getStrategy().getJavaGetterName(column,Mode.DEFAULT);
    final String type=getJavaType(column.getType());
    final String name=column.getQualifiedOutputName();
    out.tab(1).javadoc("Setter for <code>%s</code>. %s",name,comment);
    out.tab(1).overrideIf(generateInterfaces());
    out.tab(1).println("public void %s(%s value) {",setter,type);
    out.tab(2).println("setValue(%s, value);",i);
    out.tab(1).println("}");
    out.tab(1).javadoc("Getter for <code>%s</code>. %s",name,comment);
    printColumnJPAAnnotation(out,column);
    printColumnValidationAnnotation(out,column);
    out.tab(1).overrideIf(generateInterfaces());
    out.tab(1).println("public %s %s() {",type,getter);
    out.tab(2).println("return (%s) getValue(%s);",type,i);
    out.tab(1).println("}");
  }
  if (generateRelations() && key != null) {
    int keyDegree=key.getKeyColumns().size();
    if (keyDegree <= Constants.MAX_ROW_DEGREE) {
      String keyType=getRowType(key.getKeyColumns());
      out.tab(1).header("Primary key information");
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s%s<%s> key() {",Record.class,keyDegree,keyType);
      out.tab(2).println("return (%s%s) super.key();",Record.class,keyDegree);
      out.tab(1).println("}");
    }
  }
  if (degree <= Constants.MAX_ROW_DEGREE) {
    out.tab(1).header("Record%s type implementation",degree);
    out.tab(1).overrideInherit();
    out.tab(1).println("public %s%s<%s> fieldsRow() {",Row.class,degree,rowType);
    out.tab(2).println("return (%s%s) super.fieldsRow();",Row.class,degree);
    out.tab(1).println("}");
    out.tab(1).overrideInherit();
    out.tab(1).println("public %s%s<%s> valuesRow() {",Row.class,degree,rowType);
    out.tab(2).println("return (%s%s) super.valuesRow();",Row.class,degree);
    out.tab(1).println("}");
    for (int i=1; i <= degree; i++) {
      ColumnDefinition column=table.getColumn(i - 1);
      final String colType=getJavaType(column.getType());
      final String colIdentifier=getStrategy().getFullJavaIdentifier(column);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s<%s> field%s() {",Field.class,colType,i);
      out.tab(2).println("return %s;",colIdentifier);
      out.tab(1).println("}");
    }
    for (int i=1; i <= degree; i++) {
      ColumnDefinition column=table.getColumn(i - 1);
      final String colType=getJavaType(column.getType());
      final String colGetter=getStrategy().getJavaGetterName(column,Mode.RECORD);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s value%s() {",colType,i);
      out.tab(2).println("return %s();",colGetter);
      out.tab(1).println("}");
    }
  }
  if (generateInterfaces()) {
    printFromAndInto(out,table);
  }
  out.tab(1).header("Constructors");
  out.tab(1).javadoc("Create a detached %s",className);
  out.tab(1).println("public %s() {",className);
  out.tab(2).println("super(%s);",tableIdentifier);
  out.tab(1).println("}");
  List<String> arguments=new ArrayList<String>();
  for (int i=0; i < degree; i++) {
    final ColumnDefinition column=table.getColumn(i);
    final String columnMember=getStrategy().getJavaMemberName(column,Mode.DEFAULT);
    final String type=getJavaType(column.getType());
    arguments.add(type + " " + columnMember);
  }
  out.tab(1).javadoc("Create a detached, initialised %s",className);
  out.tab(1).println("public %s([[%s]]) {",className,arguments);
  out.tab(2).println("super(%s);",tableIdentifier);
  out.println();
  for (int i=0; i < degree; i++) {
    final ColumnDefinition column=table.getColumn(i);
    final String columnMember=getStrategy().getJavaMemberName(column,Mode.DEFAULT);
    out.tab(2).println("setValue(%s, %s);",i,columnMember);
  }
  out.tab(1).println("}");
  generateRecordClassFooter(table,out);
  out.println("}");
  out.close();
}
