{
  log.info("Generating Keys");
  JavaWriter out=new JavaWriter(new File(getStrategy().getFile(schema).getParentFile(),"Keys.java"));
  printPackage(out,schema);
  printClassJavadoc(out,"A class modelling foreign key relationships between tables of the <code>" + schema.getOutputName() + "</code> schema");
  out.println("public class Keys {");
  out.tab(1).header("IDENTITY definitions");
  out.println();
  List<IdentityDefinition> allIdentities=new ArrayList<IdentityDefinition>();
  List<UniqueKeyDefinition> allUniqueKeys=new ArrayList<UniqueKeyDefinition>();
  List<ForeignKeyDefinition> allForeignKeys=new ArrayList<ForeignKeyDefinition>();
  for (  TableDefinition table : database.getTables(schema)) {
    try {
      IdentityDefinition identity=table.getIdentity();
      if (identity != null) {
        final String identityType=getStrategy().getFullJavaClassName(identity.getColumn().getContainer(),Mode.RECORD);
        final String columnType=getJavaType(identity.getColumn().getType());
        final String identityId=getStrategy().getJavaIdentifier(identity.getColumn().getContainer());
        final int block=allIdentities.size() / INITIALISER_SIZE;
        out.tab(1).println("public static final %s<%s, %s> IDENTITY_%s = Identities%s.IDENTITY_%s;",Identity.class,identityType,columnType,identityId,block,identityId);
        allIdentities.add(identity);
      }
    }
 catch (    Exception e) {
      log.error("Error while generating table " + table,e);
    }
  }
  out.tab(1).header("UNIQUE and PRIMARY KEY definitions");
  out.println();
  for (  TableDefinition table : database.getTables(schema)) {
    try {
      List<UniqueKeyDefinition> uniqueKeys=table.getUniqueKeys();
      for (      UniqueKeyDefinition uniqueKey : uniqueKeys) {
        final String keyType=getStrategy().getFullJavaClassName(uniqueKey.getTable(),Mode.RECORD);
        final String keyId=getStrategy().getJavaIdentifier(uniqueKey);
        final int block=allUniqueKeys.size() / INITIALISER_SIZE;
        out.tab(1).println("public static final %s<%s> %s = UniqueKeys%s.%s;",UniqueKey.class,keyType,keyId,block,keyId);
        allUniqueKeys.add(uniqueKey);
      }
    }
 catch (    Exception e) {
      log.error("Error while generating table " + table,e);
    }
  }
  out.tab(1).header("FOREIGN KEY definitions");
  out.println();
  for (  TableDefinition table : database.getTables(schema)) {
    try {
      List<ForeignKeyDefinition> foreignKeys=table.getForeignKeys();
      for (      ForeignKeyDefinition foreignKey : foreignKeys) {
        final String keyType=getStrategy().getFullJavaClassName(foreignKey.getKeyTable(),Mode.RECORD);
        final String referencedType=getStrategy().getFullJavaClassName(foreignKey.getReferencedTable(),Mode.RECORD);
        final String keyId=getStrategy().getJavaIdentifier(foreignKey);
        final int block=allForeignKeys.size() / INITIALISER_SIZE;
        out.tab(1).println("public static final %s<%s, %s> %s = ForeignKeys%s.%s;",ForeignKey.class,keyType,referencedType,keyId,block,keyId);
        allForeignKeys.add(foreignKey);
      }
    }
 catch (    Exception e) {
      log.error("Error while generating reference " + table,e);
    }
  }
  int identityCounter=0;
  int uniqueKeyCounter=0;
  int foreignKeyCounter=0;
  out.tab(1).header("[#1459] distribute members to avoid static initialisers > 64kb");
  for (  IdentityDefinition identity : allIdentities) {
    printIdentity(out,identityCounter,identity);
    identityCounter++;
  }
  if (identityCounter > 0) {
    out.println("\t}");
  }
  for (  UniqueKeyDefinition uniqueKey : allUniqueKeys) {
    printUniqueKey(out,uniqueKeyCounter,uniqueKey);
    uniqueKeyCounter++;
  }
  if (uniqueKeyCounter > 0) {
    out.println("\t}");
  }
  for (  ForeignKeyDefinition foreignKey : allForeignKeys) {
    printForeignKey(out,foreignKeyCounter,foreignKey);
    foreignKeyCounter++;
  }
  if (foreignKeyCounter > 0) {
    out.println("\t}");
  }
  out.println("}");
  out.close();
  watch.splitInfo("Keys generated");
}
