{
  StringBuilder sb=new StringBuilder();
  if (db.getArray(schema,u) != null) {
    ArrayDefinition array=database.getArray(schema,u);
    sb.append(getJavaTypeReference(db,array.getElementType()));
    sb.append(".asArrayDataType(");
    sb.append(getStrategy().getFullJavaClassName(array,Mode.RECORD));
    sb.append(".class)");
  }
 else   if (db.getUDT(schema,u) != null) {
    UDTDefinition udt=db.getUDT(schema,u);
    sb.append(getStrategy().getFullJavaIdentifier(udt));
    sb.append(".getDataType()");
  }
 else   if (db.getEnum(schema,u) != null) {
    sb.append("org.jooq.util.");
    sb.append(db.getDialect().getName().toLowerCase());
    sb.append(".");
    sb.append(db.getDialect().getName());
    sb.append("DataType.");
    sb.append(DefaultDataType.normalise(DefaultDataType.getDataType(db.getDialect(),String.class).getTypeName()));
    sb.append(".asEnumDataType(");
    sb.append(getStrategy().getFullJavaClassName(db.getEnum(schema,u)));
    sb.append(".class)");
  }
 else {
    DataType<?> dataType=null;
    try {
      dataType=DefaultDataType.getDataType(db.getDialect(),t,p,s);
    }
 catch (    SQLDialectNotSupportedException ignore) {
    }
    if (dataType != null && dataType.getSQLDataType() != null) {
      DataType<?> sqlDataType=dataType.getSQLDataType();
      sb.append(SQLDataType.class.getCanonicalName());
      sb.append(".");
      sb.append(DefaultDataType.normalise(sqlDataType.getTypeName()));
      if (dataType.hasPrecision() && p > 0) {
        sb.append(".precision(").append(p);
        if (dataType.hasScale() && s > 0) {
          sb.append(", ").append(s);
        }
        sb.append(")");
      }
      if (dataType.hasLength() && l > 0) {
        sb.append(".length(").append(l).append(")");
      }
      if (db.getConfiguredCustomType(u) != null) {
        sb.append(".asConvertedDataType(new ");
        sb.append(db.getConfiguredCustomType(u).getConverter());
        sb.append("())");
      }
    }
 else {
      String typeClass="org.jooq.util." + db.getDialect().getName().toLowerCase() + "."+ db.getDialect().getName()+ "DataType";
      sb.append(typeClass);
      sb.append(".");
      try {
        String type1=getType(db,schema,t,p,s,u,null);
        String type2=getType(db,schema,t,0,0,u,null);
        String typeName=DefaultDataType.normalise(t);
        Reflect.on(typeClass).field(typeName);
        sb.append(typeName);
        if (!type1.equals(type2)) {
          Class<?> clazz=DefaultDataType.getType(db.getDialect(),t,p,s);
          sb.append(".asNumberDataType(");
          sb.append(clazz.getCanonicalName());
          sb.append(".class)");
        }
      }
 catch (      SQLDialectNotSupportedException e) {
        sb=new StringBuilder();
        sb.append(DefaultDataType.class.getName());
        sb.append(".getDefaultDataType(\"");
        sb.append(t.replace("\"","\\\""));
        sb.append("\")");
      }
catch (      ReflectException e) {
        sb=new StringBuilder();
        sb.append(DefaultDataType.class.getName());
        sb.append(".getDefaultDataType(\"");
        sb.append(t.replace("\"","\\\""));
        sb.append("\")");
      }
    }
  }
  return sb.toString();
}
