{
  String qualified=out.ref(getStrategy().getFullJavaClassName(tableOrUDT,Mode.INTERFACE));
  out.tab(1).header("FROM and INTO");
  out.tab(1).overrideInherit();
  out.tab(1).println("public void from(%s from) {",qualified);
  for (  TypedElementDefinition<?> column : getTypedElements(tableOrUDT)) {
    String setter=getStrategy().getJavaSetterName(column,Mode.INTERFACE);
    String getter=getStrategy().getJavaGetterName(column,Mode.INTERFACE);
    if (scala)     out.tab(2).println("%s(from.%s)",setter,getter);
 else     out.tab(2).println("%s(from.%s());",setter,getter);
  }
  out.tab(1).println("}");
  if (scala) {
    out.tab(1).println("public <E extends %s> E into(E into) {",qualified);
    out.tab(2).println("into.from(this)");
    out.tab(2).println("return into");
    out.tab(1).println("}");
  }
 else {
    out.tab(1).overrideInherit();
    out.tab(1).println("public <E extends %s> E into(E into) {",qualified);
    out.tab(2).println("into.from(this);");
    out.tab(2).println("return into;");
    out.tab(1).println("}");
  }
}
