{
  log.info("Generating interface",getStrategy().getFileName(table,Mode.INTERFACE));
  final String className=getStrategy().getJavaClassName(table,Mode.INTERFACE);
  final List<String> interfaces=getStrategy().getJavaClassImplements(table,Mode.INTERFACE);
  JavaWriter out=new JavaWriter(getStrategy().getFile(table,Mode.INTERFACE));
  printPackage(out,table,Mode.INTERFACE);
  printClassJavadoc(out,table);
  printTableJPAAnnotation(out,table);
  out.println("public interface %s [[before=extends ][%s]] {",className,interfaces);
  for (  ColumnDefinition column : table.getColumns()) {
    final String comment=StringUtils.defaultString(column.getComment());
    final String setterReturnType=fluentSetters() ? className : "void";
    final String setter=getStrategy().getJavaSetterName(column,Mode.DEFAULT);
    final String getter=getStrategy().getJavaGetterName(column,Mode.DEFAULT);
    final String type=getJavaType((column).getType());
    final String name=column.getQualifiedOutputName();
    out.tab(1).javadoc("Setter for <code>%s</code>. %s",name,comment);
    out.tab(1).println("public %s %s(%s value);",setterReturnType,setter,type);
    out.tab(1).javadoc("Getter for <code>%s</code>. %s",name,comment);
    printColumnJPAAnnotation(out,column);
    printColumnValidationAnnotation(out,column);
    out.tab(1).println("public %s %s();",type,getter);
  }
  String local=getStrategy().getJavaClassName(table,Mode.INTERFACE);
  String qualified=getStrategy().getFullJavaClassName(table,Mode.INTERFACE);
  out.tab(1).header("FROM and INTO");
  out.tab(1).javadoc("Load data from another generated Record/POJO implementing the common interface %s",local);
  out.tab(1).println("public void from(%s from);",qualified);
  out.tab(1).javadoc("Copy data into another generated Record/POJO implementing the common interface %s",local);
  out.tab(1).println("public <E extends %s> E into(E into);",qualified);
  out.println("}");
  out.close();
}
