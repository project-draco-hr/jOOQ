{
  this.database=db;
  this.database.addFilter(new AvoidAmbiguousClassesFilter());
  this.database.setIncludeRelations(generateRelations());
  String url="";
  try {
    Connection connection=database.getConnection();
    if (connection != null)     url=connection.getMetaData().getURL();
  }
 catch (  SQLException ignore) {
  }
  log.info("License parameters");
  log.info("----------------------------------------------------------");
  log.info("  Thank you for using jOOQ and jOOQ's code generator");
  log.info("");
  log.info("Database parameters");
  log.info("----------------------------------------------------------");
  log.info("  dialect",database.getDialect());
  log.info("  URL",url);
  log.info("  target dir",getTargetDirectory());
  log.info("  target package",getTargetPackage());
  log.info("  includes",Arrays.asList(database.getIncludes()));
  log.info("  excludes",Arrays.asList(database.getExcludes()));
  log.info("  includeExcludeColumns",database.getIncludeExcludeColumns());
  log.info("----------------------------------------------------------");
  log.info("");
  log.info("DefaultGenerator parameters");
  log.info("----------------------------------------------------------");
  log.info("  strategy",strategy.delegate.getClass());
  log.info("  deprecated",generateDeprecated());
  log.info("  generated annotation",generateGeneratedAnnotation());
  log.info("  JPA annotations",generateJPAAnnotations());
  log.info("  validation annotations",generateValidationAnnotations());
  log.info("  instance fields",generateInstanceFields());
  log.info("  records",generateRecords() + ((!generateRecords && generateDaos) ? " (forced to true because of <daos/>)" : ""));
  log.info("  pojos",generatePojos() + ((!generatePojos && generateDaos) ? " (forced to true because of <daos/>)" : ((!generatePojos && generateImmutablePojos) ? " (forced to true because of <immutablePojos/>)" : "")));
  log.info("  immutable pojos",generateImmutablePojos());
  log.info("  interfaces",generateInterfaces());
  log.info("  daos",generateDaos());
  log.info("  relations",generateRelations() + ((!generateRelations && generateDaos) ? " (forced to true because of <daos/>)" : ""));
  log.info("  global references",generateGlobalObjectReferences());
  log.info("----------------------------------------------------------");
  if (!generateInstanceFields()) {
    log.warn("");
    log.warn("Deprecation warnings");
    log.warn("----------------------------------------------------------");
    log.warn("  <generateInstanceFields/> = false is deprecated! Please adapt your configuration.");
  }
  log.info("");
  log.info("Generation remarks");
  log.info("----------------------------------------------------------");
  if (generateImmutablePojos && generateInterfaces)   log.info("  immutable pojos","Immutable POJOs do not have any setters. Hence, setters are also missing from interfaces");
 else   log.info("  none");
  log.info("");
  log.info("----------------------------------------------------------");
  log.info("Generating schemata","Total: " + database.getSchemata().size());
  for (  SchemaDefinition schema : database.getSchemata()) {
    try {
      generate(schema);
    }
 catch (    Exception e) {
      throw new GeneratorException("Error generating code for schema " + schema,e);
    }
  }
}
