{
  this.isoDate=DatatypeConverter.printDateTime(Calendar.getInstance(TimeZone.getTimeZone("UTC")));
  this.schemaVersions=new LinkedHashMap<SchemaDefinition,String>();
  this.catalogVersions=new LinkedHashMap<CatalogDefinition,String>();
  this.database=db;
  this.database.addFilter(new AvoidAmbiguousClassesFilter());
  this.database.setIncludeRelations(generateRelations());
  this.database.setTableValuedFunctions(generateTableValuedFunctions());
  logDatabaseParameters(db);
  log.info("");
  log.info("JavaGenerator parameters");
  log.info("----------------------------------------------------------");
  log.info("  strategy",strategy.delegate.getClass());
  log.info("  deprecated",generateDeprecated());
  log.info("  generated annotation",generateGeneratedAnnotation() + ((!generateGeneratedAnnotation && (useSchemaVersionProvider || useCatalogVersionProvider)) ? " (forced to true because of <schemaVersionProvider/> or <catalogVersionProvider/>)" : ""));
  log.info("  JPA annotations",generateJPAAnnotations());
  log.info("  validation annotations",generateValidationAnnotations());
  log.info("  instance fields",generateInstanceFields());
  log.info("  routines",generateRoutines());
  log.info("  tables",generateTables() + ((!generateTables && generateRecords) ? " (forced to true because of <records/>)" : ((!generateTables && generateDaos) ? " (forced to true because of <daos/>)" : "")));
  log.info("  records",generateRecords() + ((!generateRecords && generateDaos) ? " (forced to true because of <daos/>)" : ""));
  log.info("  pojos",generatePojos() + ((!generatePojos && generateDaos) ? " (forced to true because of <daos/>)" : ((!generatePojos && generateImmutablePojos) ? " (forced to true because of <immutablePojos/>)" : "")));
  log.info("  immutable pojos",generateImmutablePojos());
  log.info("  interfaces",generateInterfaces() + ((!generateInterfaces && generateImmutableInterfaces) ? " (forced to true because of <immutableInterfaces/>)" : ""));
  log.info("  immutable interfaces",generateInterfaces());
  log.info("  daos",generateDaos());
  log.info("  relations",generateRelations() + ((!generateRelations && generateTables) ? " (forced to true because of <tables/>)" : ((!generateRelations && generateDaos) ? " (forced to true because of <daos/>)" : "")));
  log.info("  table-valued functions",generateTableValuedFunctions());
  log.info("  global references",generateGlobalObjectReferences());
  log.info("----------------------------------------------------------");
  if (!generateInstanceFields()) {
    log.warn("");
    log.warn("Deprecation warnings");
    log.warn("----------------------------------------------------------");
    log.warn("  <generateInstanceFields/> = false is deprecated! Please adapt your configuration.");
  }
  log.info("");
  logGenerationRemarks(db);
  log.info("");
  log.info("----------------------------------------------------------");
  log.info("Generating catalogs","Total: " + database.getCatalogs().size());
  for (  CatalogDefinition catalog : database.getCatalogs()) {
    try {
      if (generateCatalogIfEmpty(catalog))       generate(catalog);
 else       log.info("Excluding empty catalog",catalog);
    }
 catch (    Exception e) {
      throw new GeneratorException("Error generating code for catalog " + catalog,e);
    }
  }
}
