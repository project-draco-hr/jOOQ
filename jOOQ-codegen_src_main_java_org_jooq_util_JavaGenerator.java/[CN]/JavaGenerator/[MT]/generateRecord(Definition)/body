{
  log.info("Generating record",getStrategy().getFileName(tableOrUdt,Mode.RECORD));
  final UniqueKeyDefinition key=(tableOrUdt instanceof TableDefinition) ? ((TableDefinition)tableOrUdt).getPrimaryKey() : null;
  final String className=getStrategy().getJavaClassName(tableOrUdt,Mode.RECORD);
  final String tableIdentifier=getStrategy().getFullJavaIdentifier(tableOrUdt);
  final String recordType=getStrategy().getFullJavaClassName(tableOrUdt,Mode.RECORD);
  final List<String> interfaces=getStrategy().getJavaClassImplements(tableOrUdt,Mode.RECORD);
  final List<? extends TypedElementDefinition<?>> columns=getTypedElements(tableOrUdt);
  JavaWriter out=new JavaWriter(getStrategy().getFile(tableOrUdt,Mode.RECORD));
  printPackage(out,tableOrUdt,Mode.RECORD);
  if (tableOrUdt instanceof TableDefinition)   generateRecordClassJavadoc((TableDefinition)tableOrUdt,out);
 else   generateUDTRecordClassJavadoc((UDTDefinition)tableOrUdt,out);
  printClassAnnotations(out);
  if (tableOrUdt instanceof TableDefinition)   printTableJPAAnnotation(out,(TableDefinition)tableOrUdt);
  Class<?> baseClass;
  if (tableOrUdt instanceof UDTDefinition)   baseClass=UDTRecordImpl.class;
 else   if (generateRelations() && key != null)   baseClass=UpdatableRecordImpl.class;
 else   baseClass=TableRecordImpl.class;
  int degree=columns.size();
  String rowType=null;
  String rowTypeRecord=null;
  if (degree > 0 && degree <= Constants.MAX_ROW_DEGREE) {
    rowType=getRowType(columns);
    rowTypeRecord=Record.class.getName() + degree + "<"+ rowType+ ">";
    interfaces.add(rowTypeRecord);
  }
  if (generateInterfaces()) {
    interfaces.add(getStrategy().getFullJavaClassName(tableOrUdt,Mode.INTERFACE));
  }
  out.println("public class %s extends %s<%s>[[before= implements ][%s]] {",className,baseClass,recordType,interfaces);
  out.printSerial();
  for (int i=0; i < degree; i++) {
    TypedElementDefinition<?> column=columns.get(i);
    final String comment=StringUtils.defaultString(column.getComment());
    final String setterReturnType=fluentSetters() ? className : "void";
    final String setter=getStrategy().getJavaSetterName(column,Mode.DEFAULT);
    final String getter=getStrategy().getJavaGetterName(column,Mode.DEFAULT);
    final String type=getJavaType(column.getType());
    final String typeInterface=getJavaType(column.getType(),Mode.INTERFACE);
    final String name=column.getQualifiedOutputName();
    final boolean isUDT=database.getUDT(column.getSchema(),column.getType().getUserType()) != null;
    out.tab(1).javadoc("Setter for <code>%s</code>.%s",name,defaultIfBlank(" " + comment,""));
    out.tab(1).overrideIf(generateInterfaces() && !generateImmutablePojos() && !isUDT);
    out.tab(1).println("public %s %s(%s value) {",setterReturnType,setter,type);
    out.tab(2).println("setValue(%s, value);",i);
    if (fluentSetters())     out.tab(2).println("return this;");
    out.tab(1).println("}");
    if (generateInterfaces() && !generateImmutablePojos() && isUDT) {
      out.tab(1).javadoc("Setter for <code>%s</code>.%s",name,defaultIfBlank(" " + comment,""));
      out.tab(1).override();
      out.tab(1).println("public %s %s(%s value) {",setterReturnType,setter,typeInterface);
      out.tab(2).println("if (value == null)");
      out.tab(3).println("setValue(%s, null);",i);
      out.tab(2).println("else");
      out.tab(3).println("setValue(%s, value.into(new %s()));",i,type);
      if (fluentSetters())       out.tab(2).println("return this;");
      out.tab(1).println("}");
    }
    out.tab(1).javadoc("Getter for <code>%s</code>.%s",name,defaultIfBlank(" " + comment,""));
    if (tableOrUdt instanceof TableDefinition)     printColumnJPAAnnotation(out,(ColumnDefinition)column);
    printValidationAnnotation(out,column);
    out.tab(1).overrideIf(generateInterfaces());
    out.tab(1).println("public %s %s() {",type,getter);
    out.tab(2).println("return (%s) getValue(%s);",type,i);
    out.tab(1).println("}");
  }
  if (generateRelations() && key != null) {
    int keyDegree=key.getKeyColumns().size();
    if (keyDegree <= Constants.MAX_ROW_DEGREE) {
      String keyType=getRowType(key.getKeyColumns());
      out.tab(1).header("Primary key information");
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s%s<%s> key() {",Record.class,keyDegree,keyType);
      out.tab(2).println("return (%s%s) super.key();",Record.class,keyDegree);
      out.tab(1).println("}");
    }
  }
  if (tableOrUdt instanceof UDTDefinition) {
    for (    RoutineDefinition routine : ((UDTDefinition)tableOrUdt).getRoutines()) {
      boolean instance=routine.getInParameters().size() > 0 && routine.getInParameters().get(0).getInputName().toUpperCase().equals("SELF");
      try {
        if (!routine.isSQLUsable()) {
          printConvenienceMethodProcedure(out,routine,instance);
        }
 else {
          if (!routine.isAggregate()) {
            printConvenienceMethodFunction(out,routine,instance);
          }
        }
      }
 catch (      Exception e) {
        log.error("Error while generating routine " + routine,e);
      }
    }
  }
  if (degree > 0 && degree <= Constants.MAX_ROW_DEGREE) {
    out.tab(1).header("Record%s type implementation",degree);
    out.tab(1).overrideInherit();
    out.tab(1).println("public %s%s<%s> fieldsRow() {",Row.class,degree,rowType);
    out.tab(2).println("return (%s%s) super.fieldsRow();",Row.class,degree);
    out.tab(1).println("}");
    out.tab(1).overrideInherit();
    out.tab(1).println("public %s%s<%s> valuesRow() {",Row.class,degree,rowType);
    out.tab(2).println("return (%s%s) super.valuesRow();",Row.class,degree);
    out.tab(1).println("}");
    for (int i=1; i <= degree; i++) {
      TypedElementDefinition<?> column=columns.get(i - 1);
      final String colType=getJavaType(column.getType());
      final String colIdentifier=getStrategy().getFullJavaIdentifier(column);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s<%s> field%s() {",Field.class,colType,i);
      out.tab(2).println("return %s;",colIdentifier);
      out.tab(1).println("}");
    }
    for (int i=1; i <= degree; i++) {
      TypedElementDefinition<?> column=columns.get(i - 1);
      final String colType=getJavaType(column.getType());
      final String colGetter=getStrategy().getJavaGetterName(column,Mode.RECORD);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s value%s() {",colType,i);
      out.tab(2).println("return %s();",colGetter);
      out.tab(1).println("}");
    }
    for (int i=1; i <= degree; i++) {
      TypedElementDefinition<?> column=columns.get(i - 1);
      final String colType=getJavaType(column.getType());
      final String colSetter=getStrategy().getJavaSetterName(column,Mode.RECORD);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s value%s(%s value) {",className,i,colType);
      out.tab(2).println("%s(value);",colSetter);
      out.tab(2).println("return this;");
      out.tab(1).println("}");
    }
    List<String> arguments=new ArrayList<String>();
    for (int i=1; i <= degree; i++) {
      TypedElementDefinition<?> column=columns.get(i - 1);
      final String colType=getJavaType(column.getType());
      arguments.add(colType + " value" + i);
    }
    out.tab(1).overrideInherit();
    out.tab(1).println("public %s values([[%s]]) {",className,arguments);
    out.tab(2).println("return this;");
    out.tab(1).println("}");
  }
  if (generateInterfaces() && !generateImmutablePojos()) {
    printFromAndInto(out,tableOrUdt);
  }
  out.tab(1).header("Constructors");
  out.tab(1).javadoc("Create a detached %s",className);
  out.tab(1).println("public %s() {",className);
  out.tab(2).println("super(%s);",tableIdentifier);
  out.tab(1).println("}");
  if (degree > 0 && degree < 256) {
    List<String> arguments=new ArrayList<String>();
    for (int i=0; i < degree; i++) {
      final TypedElementDefinition<?> column=columns.get(i);
      final String columnMember=getStrategy().getJavaMemberName(column,Mode.DEFAULT);
      final String type=getJavaType(column.getType());
      arguments.add(type + " " + columnMember);
    }
    out.tab(1).javadoc("Create a detached, initialised %s",className);
    out.tab(1).println("public %s([[%s]]) {",className,arguments);
    out.tab(2).println("super(%s);",tableIdentifier);
    out.println();
    for (int i=0; i < degree; i++) {
      final TypedElementDefinition<?> column=columns.get(i);
      final String columnMember=getStrategy().getJavaMemberName(column,Mode.DEFAULT);
      out.tab(2).println("setValue(%s, %s);",i,columnMember);
    }
    out.tab(1).println("}");
  }
  if (tableOrUdt instanceof TableDefinition)   generateRecordClassFooter((TableDefinition)tableOrUdt,out);
 else   generateUDTRecordClassFooter((UDTDefinition)tableOrUdt,out);
  out.println("}");
  out.close();
}
