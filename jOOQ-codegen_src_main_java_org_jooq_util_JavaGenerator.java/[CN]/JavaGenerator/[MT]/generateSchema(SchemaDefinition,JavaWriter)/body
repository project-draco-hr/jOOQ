{
  final String catalogId=out.ref(getStrategy().getFullJavaIdentifier(schema.getCatalog()),2);
  final String schemaName=schema.getQualifiedOutputName();
  final String schemaId=getStrategy().getJavaIdentifier(schema);
  final String className=getStrategy().getJavaClassName(schema);
  final List<String> interfaces=out.ref(getStrategy().getJavaClassImplements(schema,Mode.DEFAULT));
  printPackage(out,schema);
  if (scala) {
    out.println("object %s {",className);
    out.tab(1).javadoc("The reference instance of <code>%s</code>",schemaName);
    out.tab(1).println("val %s = new %s",schemaId,className);
    out.println("}");
    out.println();
  }
  generateSchemaClassJavadoc(schema,out);
  printClassAnnotations(out,schema);
  if (scala) {
    out.println("class %s extends %s(\"%s\", %s)[[before= with ][separator= with ][%s]] {",className,SchemaImpl.class,schema.getOutputName(),catalogId,interfaces);
  }
 else {
    out.println("public class %s extends %s[[before= implements ][%s]] {",className,SchemaImpl.class,interfaces);
    out.printSerial();
    out.tab(1).javadoc("The reference instance of <code>%s</code>",schemaName);
    out.tab(1).println("public static final %s %s = new %s();",className,schemaId,className);
    if (generateGlobalObjectReferences() && generateGlobalTableReferences()) {
      for (      TableDefinition table : schema.getTables()) {
        final String tableClassName=out.ref(getStrategy().getFullJavaClassName(table));
        final String tableId=getStrategy().getJavaIdentifier(table);
        final String tableFullId=getStrategy().getFullJavaIdentifier(table);
        final String tableComment=!StringUtils.isBlank(table.getComment()) ? table.getComment() : "The table <code>" + table.getQualifiedOutputName() + "</code>.";
        out.tab(1).javadoc(tableComment);
        if (scala)         out.tab(1).println("val %s = %s",tableId,tableFullId);
 else         out.tab(1).println("public final %s %s = %s;",tableClassName,tableId,tableFullId);
        if (table.isTableValuedFunction()) {
          printTableValuedFunction(out,table,getStrategy().getJavaIdentifier(table));
        }
      }
    }
    out.tab(1).javadoc(NO_FURTHER_INSTANCES_ALLOWED);
    out.tab(1).println("private %s() {",className);
    out.tab(2).println("super(\"%s\", null);",schema.getOutputName());
    out.tab(1).println("}");
  }
  out.println();
  if (scala) {
    out.tab(1).println("override def getCatalog: %s = %s",Catalog.class,catalogId);
  }
 else {
    out.tab(1).overrideInherit();
    out.tab(1).println("public %s getCatalog() {",Catalog.class);
    out.tab(2).println("return %s;",catalogId);
    out.tab(1).println("}");
  }
  if (generateGlobalObjectReferences() && generateGlobalSequenceReferences()) {
    printReferences(out,database.getSequences(schema),Sequence.class,true);
  }
  printReferences(out,database.getTables(schema),Table.class,true);
  printReferences(out,database.getUDTs(schema),UDT.class,true);
  generateSchemaClassFooter(schema,out);
  out.println("}");
}
