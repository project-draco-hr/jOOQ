{
  final String schemaName=schema.getQualifiedOutputName();
  final String schemaId=getStrategy().getJavaIdentifier(schema);
  final String className=getStrategy().getJavaClassName(schema);
  final List<String> interfaces=out.ref(getStrategy().getJavaClassImplements(schema,Mode.DEFAULT));
  printPackage(out,schema);
  if (scala) {
    out.println("object %s {",className);
    out.tab(1).javadoc("The reference instance of <code>%s</code>",schemaName);
    out.tab(1).println("val %s = new %s",schemaId,className);
    out.println("}");
    out.println();
  }
  generateSchemaClassJavadoc(schema,out);
  printClassAnnotations(out,schema);
  if (scala) {
    out.println("class %s extends %s(\"%s\")[[before= with ][separator= with ][%s]] {",className,SchemaImpl.class,schema.getOutputName(),interfaces);
  }
 else {
    out.println("public class %s extends %s[[before= implements ][%s]] {",className,SchemaImpl.class,interfaces);
    out.printSerial();
    out.tab(1).javadoc("The reference instance of <code>%s</code>",schemaName);
    out.tab(1).println("public static final %s %s = new %s();",className,schemaId,className);
    out.tab(1).javadoc(NO_FURTHER_INSTANCES_ALLOWED);
    out.tab(1).println("private %s() {",className);
    out.tab(2).println("super(\"%s\");",schema.getOutputName());
    out.tab(1).println("}");
  }
  if (generateGlobalObjectReferences() && generateGlobalSequenceReferences()) {
    printSchemaReferences(out,database.getSequences(schema),Sequence.class,true);
  }
  printSchemaReferences(out,database.getTables(schema),Table.class,true);
  printSchemaReferences(out,database.getUDTs(schema),UDT.class,true);
  generateSchemaClassFooter(schema,out);
  out.println("}");
}
