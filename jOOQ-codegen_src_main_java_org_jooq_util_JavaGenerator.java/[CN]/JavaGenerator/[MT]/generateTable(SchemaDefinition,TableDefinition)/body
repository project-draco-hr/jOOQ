{
  UniqueKeyDefinition primaryKey=table.getPrimaryKey();
  JavaWriter out=newJavaWriter(getStrategy().getFile(table));
  final boolean updatable=generateRelations() && primaryKey != null;
  final String className=getStrategy().getJavaClassName(table);
  final String tableId=getStrategy().getJavaIdentifier(table);
  final String recordType=out.ref(getStrategy().getFullJavaClassName(table,Mode.RECORD));
  final List<String> interfaces=out.ref(getStrategy().getJavaClassImplements(table,Mode.DEFAULT));
  final String comment=defaultString(table.getComment());
  log.info("Generating table",getStrategy().getFileName(table) + " [input=" + table.getInputName()+ ", output="+ table.getOutputName()+ ", pk="+ (primaryKey != null ? primaryKey.getName() : "N/A")+ "]");
  printPackage(out,table);
  generateTableClassJavadoc(table,out);
  printClassAnnotations(out,schema);
  out.println("public class %s extends %s<%s>[[before= implements ][%s]] {",className,TableImpl.class,recordType,interfaces);
  out.printSerial();
  printSingletonInstance(out,table);
  printRecordTypeMethod(out,table);
  for (  ColumnDefinition column : table.getColumns()) {
    final String columnType=out.ref(getJavaType(column.getType()));
    final String columnTypeRef=getJavaTypeReference(column.getDatabase(),column.getType());
    final String columnId=out.ref(getStrategy().getJavaIdentifier(column),colRefSegments(column));
    final String columnName=column.getName();
    final String columnComment=StringUtils.defaultString(column.getComment());
    final List<String> converters=out.ref(list(column.getType().getConverter(),column.getType().getBinding()));
    String isStatic=generateInstanceFields() ? "" : "static ";
    String tableRef=generateInstanceFields() ? "this" : out.ref(getStrategy().getJavaIdentifier(table),2);
    out.tab(1).javadoc("The column <code>%s</code>.%s",column.getQualifiedOutputName(),defaultIfBlank(" " + columnComment,""));
    out.tab(1).println("public %sfinal %s<%s, %s> %s = createField(\"%s\", %s, %s, \"%s\"[[before=, ][new %s()]]);",isStatic,TableField.class,recordType,columnType,columnId,columnName,columnTypeRef,tableRef,escapeString(columnComment),converters);
  }
  if (generateInstanceFields()) {
    out.tab(1).javadoc("Create a <code>%s</code> table reference",table.getQualifiedOutputName());
    out.tab(1).println("public %s() {",className);
  }
 else {
    out.tab(1).javadoc(NO_FURTHER_INSTANCES_ALLOWED);
    out.tab(1).println("private %s() {",className);
  }
  out.tab(2).println("this(\"%s\", null);",table.getOutputName());
  out.tab(1).println("}");
  final String schemaId=out.ref(getStrategy().getFullJavaIdentifier(schema),2);
  if (generateInstanceFields()) {
    out.tab(1).javadoc("Create an aliased <code>%s</code> table reference",table.getQualifiedOutputName());
    out.tab(1).println("public %s(%s alias) {",className,String.class);
    out.tab(2).println("this(alias, %s);",tableId);
    out.tab(1).println("}");
  }
  out.println();
  out.tab(1).println("private %s(%s alias, %s<%s> aliased) {",className,String.class,Table.class,recordType);
  if (table.isTableValuedFunction())   out.tab(2).println("this(alias, aliased, new %s[%s]);",Field.class,table.getParameters().size());
 else   out.tab(2).println("this(alias, aliased, null);");
  out.tab(1).println("}");
  out.println();
  out.tab(1).println("private %s(%s alias, %s<%s> aliased, %s<?>[] parameters) {",className,String.class,Table.class,recordType,Field.class);
  out.tab(2).println("super(alias, %s, aliased, parameters, \"%s\");",schemaId,escapeString(comment));
  out.tab(1).println("}");
  if (generateRelations()) {
    IdentityDefinition identity=table.getIdentity();
    if (identity != null) {
      final String identityType=out.ref(getJavaType(identity.getColumn().getType()));
      final String identityFullId=out.ref(getStrategy().getFullJavaIdentifier(identity),2);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s<%s, %s> getIdentity() {",Identity.class,recordType,identityType);
      out.tab(2).println("return %s;",identityFullId);
      out.tab(1).println("}");
    }
    if (primaryKey != null) {
      final String keyFullId=out.ref(getStrategy().getFullJavaIdentifier(primaryKey),2);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s<%s> getPrimaryKey() {",UniqueKey.class,recordType);
      out.tab(2).println("return %s;",keyFullId);
      out.tab(1).println("}");
    }
    List<UniqueKeyDefinition> uniqueKeys=table.getUniqueKeys();
    if (uniqueKeys.size() > 0) {
      final List<String> keyFullIds=out.ref(getStrategy().getFullJavaIdentifiers(uniqueKeys),2);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s<%s<%s>> getKeys() {",List.class,UniqueKey.class,recordType);
      out.tab(2).println("return %s.<%s<%s>>asList([[%s]]);",Arrays.class,UniqueKey.class,recordType,keyFullIds);
      out.tab(1).println("}");
    }
    List<ForeignKeyDefinition> foreignKeys=table.getForeignKeys();
    if (foreignKeys.size() > 0) {
      final List<String> keyFullIds=out.ref(getStrategy().getFullJavaIdentifiers(foreignKeys),2);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s<%s<%s, ?>> getReferences() {",List.class,ForeignKey.class,recordType);
      out.tab(2).println("return %s.<%s<%s, ?>>asList([[%s]]);",Arrays.class,ForeignKey.class,recordType,keyFullIds);
      out.tab(1).println("}");
    }
  }
  if (updatable) {
    patternLoop:     for (    String pattern : database.getRecordVersionFields()) {
      Pattern p=Pattern.compile(pattern,Pattern.COMMENTS);
      for (      ColumnDefinition column : table.getColumns()) {
        if ((p.matcher(column.getName()).matches() || p.matcher(column.getQualifiedName()).matches())) {
          final String columnType=out.ref(getJavaType(column.getType()));
          final String columnId=getStrategy().getJavaIdentifier(column);
          out.tab(1).overrideInherit();
          out.tab(1).println("public %s<%s, %s> getRecordVersion() {",TableField.class,recordType,columnType);
          out.tab(2).println("return %s;",columnId);
          out.tab(1).println("}");
          break patternLoop;
        }
      }
    }
    timestampLoop:     for (    String pattern : database.getRecordTimestampFields()) {
      Pattern p=Pattern.compile(pattern,Pattern.COMMENTS);
      for (      ColumnDefinition column : table.getColumns()) {
        if ((p.matcher(column.getName()).matches() || p.matcher(column.getQualifiedName()).matches())) {
          final String columnType=out.ref(getJavaType(column.getType()));
          final String columnId=getStrategy().getJavaIdentifier(column);
          out.tab(1).overrideInherit();
          out.tab(1).println("public %s<%s, %s> getRecordTimestamp() {",TableField.class,recordType,columnType);
          out.tab(2).println("return %s;",columnId);
          out.tab(1).println("}");
          break timestampLoop;
        }
      }
    }
  }
  if (generateInstanceFields()) {
    out.tab(1).overrideInherit();
    out.tab(1).println("public %s as(%s alias) {",className,String.class);
    if (table.isTableValuedFunction())     out.tab(2).println("return new %s(alias, this, parameters);",className);
 else     out.tab(2).println("return new %s(alias, this);",className);
    out.tab(1).println("}");
  }
  if (generateInstanceFields()) {
    out.tab(1).javadoc("Rename this table");
    out.tab(1).println("public %s rename(%s name) {",className,String.class);
    if (table.isTableValuedFunction())     out.tab(2).println("return new %s(name, null, parameters);",className);
 else     out.tab(2).println("return new %s(name, null);",className);
    out.tab(1).println("}");
  }
  if (table.isTableValuedFunction()) {
    for (    boolean parametersAsField : new boolean[]{false,true}) {
      if (parametersAsField && table.getParameters().size() == 0)       break;
      out.tab(1).javadoc("Call this table-valued function");
      out.tab(1).print("public %s call(",className);
      printParameterDeclarations(out,table,parametersAsField);
      out.println(") {");
      out.tab(2).print("return new %s(getName(), null, new %s[] { ",className,Field.class);
      String separator="";
      for (      ParameterDefinition parameter : table.getParameters()) {
        out.print(separator);
        if (parametersAsField) {
          out.print("%s",getStrategy().getJavaMemberName(parameter));
        }
 else {
          out.print("%s.val(%s)",DSL.class,getStrategy().getJavaMemberName(parameter));
        }
        separator=", ";
      }
      out.println(" });");
      out.tab(1).println("}");
    }
  }
  generateTableClassFooter(table,out);
  out.println("}");
  out.close();
}
