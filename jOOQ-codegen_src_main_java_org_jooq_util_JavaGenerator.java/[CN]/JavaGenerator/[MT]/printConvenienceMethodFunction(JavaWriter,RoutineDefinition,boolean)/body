{
  if (function.getInParameters().size() > 254) {
    log.warn("Too many parameters","Function " + function + " has more than 254 in parameters. Skipping generation of convenience method.");
    return;
  }
  final String className=getStrategy().getFullJavaClassName(function);
  final String functionName=function.getQualifiedOutputName();
  final String functionType=getJavaType(function.getReturnType());
  final String methodName=getStrategy().getJavaMethodName(function,Mode.DEFAULT);
  final String configurationArgument=disambiguateJavaMemberName(function.getInParameters(),"configuration");
  final String localVar=disambiguateJavaMemberName(function.getInParameters(),"f");
  out.tab(1).javadoc("Call <code>%s</code>",functionName);
  out.tab(1).print("public %s%s %s(",!instance ? "static " : "",functionType,methodName);
  String glue="";
  if (!instance) {
    out.print("%s %s",Configuration.class,configurationArgument);
    glue=", ";
  }
  for (  ParameterDefinition parameter : function.getInParameters()) {
    if (instance && parameter.equals(function.getInParameters().get(0))) {
      continue;
    }
    final String paramType=getNumberType(parameter.getType());
    final String paramMember=getStrategy().getJavaMemberName(parameter);
    out.print("%s%s %s",glue,paramType,paramMember);
    glue=", ";
  }
  out.println(") {");
  out.tab(2).println("%s %s = new %s();",className,localVar,className);
  for (  ParameterDefinition parameter : function.getInParameters()) {
    final String paramSetter=getStrategy().getJavaSetterName(parameter,Mode.DEFAULT);
    final String paramMember=(instance && parameter.equals(function.getInParameters().get(0))) ? "this" : getStrategy().getJavaMemberName(parameter);
    out.tab(2).println("%s.%s(%s);",localVar,paramSetter,paramMember);
  }
  out.println();
  out.tab(2).println("%s.execute(%s);",localVar,instance ? "configuration()" : configurationArgument);
  out.tab(2).println("return %s.getReturnValue();",localVar);
  out.tab(1).println("}");
}
