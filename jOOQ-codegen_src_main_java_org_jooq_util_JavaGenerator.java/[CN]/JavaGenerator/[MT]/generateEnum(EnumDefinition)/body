{
  log.info("Generating ENUM",getStrategy().getFileName(e,Mode.ENUM));
  final String className=getStrategy().getJavaClassName(e,Mode.ENUM);
  final List<String> interfaces=getStrategy().getJavaClassImplements(e,Mode.ENUM);
  JavaWriter out=new JavaWriter(getStrategy().getFile(e,Mode.ENUM));
  printPackage(out,e);
  printClassJavadoc(out,e);
  interfaces.add(EnumType.class.getName());
  out.println("public enum %s[[before= implements ][%s]] {",className,interfaces);
  for (  String literal : e.getLiterals()) {
    final String identifier=GenerationUtil.convertToJavaIdentifier(literal);
    out.println();
    out.tab(1).println("%s(\"%s\"),",identifier,literal);
  }
  out.println();
  out.tab(1).println(";");
  out.println();
  out.tab(1).println("private final java.lang.String literal;");
  out.println();
  out.tab(1).println("private %s(java.lang.String literal) {",className);
  out.tab(2).println("this.literal = literal;");
  out.tab(1).println("}");
  out.tab(1).overrideInherit();
  out.tab(1).println("public java.lang.String getName() {");
  out.tab(2).println("return %s;",e.isSynthetic() ? "null" : "\"" + e.getName() + "\"");
  out.tab(1).println("}");
  out.tab(1).overrideInherit();
  out.tab(1).println("public java.lang.String getLiteral() {");
  out.tab(2).println("return literal;");
  out.tab(1).println("}");
  out.println("}");
  out.close();
}
