{
  String newVersion=schema.getDatabase().getSchemaVersionProvider().version(schema);
  if (StringUtils.isBlank(newVersion)) {
    log.info("No schema version is applied for schema " + schema.getInputName() + ". Regenerating.");
  }
 else {
    schemaVersions.put(schema,newVersion);
    String oldVersion=readVersion(getStrategy().getFile(schema));
    if (StringUtils.isBlank(oldVersion)) {
      log.info("No previous version available for schema " + schema.getInputName() + ". Regenerating.");
    }
 else     if (!oldVersion.equals(newVersion)) {
      log.info("Existing version " + oldVersion + " is not up to date with "+ newVersion+ " for schema "+ schema.getInputName()+ ". Regenerating.");
    }
 else {
      log.info("Existing version " + oldVersion + " is up to date with "+ newVersion+ " for schema "+ schema.getInputName()+ ". Ignoring schema.");
      return;
    }
  }
  generateSchema(schema);
  if (generateGlobalObjectReferences() && generateGlobalSequenceReferences() && database.getSequences(schema).size() > 0) {
    generateSequences(schema);
  }
  if (database.getTables(schema).size() > 0) {
    generateTables(schema);
  }
  if (generatePojos() && database.getTables(schema).size() > 0) {
    generatePojos(schema);
  }
  if (generateDaos() && database.getTables(schema).size() > 0) {
    generateDaos(schema);
  }
  if (generateGlobalObjectReferences() && generateGlobalTableReferences() && database.getTables(schema).size() > 0) {
    generateTableReferences(schema);
  }
  if (generateRelations() && database.getTables(schema).size() > 0) {
    generateRelations(schema);
  }
  if (generateRecords() && database.getTables(schema).size() > 0) {
    generateRecords(schema);
  }
  if (generateInterfaces() && database.getTables(schema).size() > 0) {
    generateInterfaces(schema);
  }
  if (database.getUDTs(schema).size() > 0) {
    generateUDTs(schema);
  }
  if (generatePojos() && database.getUDTs(schema).size() > 0) {
    generateUDTPojos(schema);
  }
  if (database.getUDTs(schema).size() > 0) {
    generateUDTRecords(schema);
  }
  if (generateInterfaces() && database.getUDTs(schema).size() > 0) {
    generateUDTInterfaces(schema);
  }
  if (database.getUDTs(schema).size() > 0) {
    generateUDTRoutines(schema);
  }
  if (generateGlobalObjectReferences() && generateGlobalUDTReferences() && database.getUDTs(schema).size() > 0) {
    generateUDTReferences(schema);
  }
  if (database.getArrays(schema).size() > 0) {
    generateArrays(schema);
  }
  if (database.getEnums(schema).size() > 0) {
    generateEnums(schema);
  }
  if (generateGlobalObjectReferences() && generateGlobalRoutineReferences() && database.getRoutines(schema).size() > 0 || hasTableValuedFunctions(schema)) {
    generateRoutines(schema);
  }
  if (database.getPackages(schema).size() > 0) {
    generatePackages(schema);
  }
  log.info("Removing excess files");
  empty(getStrategy().getFile(schema).getParentFile(),".java",files);
  files.clear();
  watch.splitInfo("GENERATION FINISHED: " + schema.getQualifiedName());
}
