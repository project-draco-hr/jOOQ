{
  final String catalogName=catalog.getQualifiedOutputName();
  final String catalogId=getStrategy().getJavaIdentifier(catalog);
  final String className=getStrategy().getJavaClassName(catalog);
  final List<String> interfaces=out.ref(getStrategy().getJavaClassImplements(catalog,Mode.DEFAULT));
  printPackage(out,catalog);
  if (scala) {
    out.println("object %s {",className);
    out.tab(1).javadoc("The reference instance of <code>%s</code>",catalogName);
    out.tab(1).println("val %s = new %s",catalogId,className);
    out.println("}");
    out.println();
  }
  generateCatalogClassJavadoc(catalog,out);
  printClassAnnotations(out,null,catalog);
  if (scala) {
    out.println("class %s extends %s(\"%s\")[[before= with ][separator= with ][%s]] {",className,CatalogImpl.class,catalog.getOutputName(),interfaces);
  }
 else {
    out.println("public class %s extends %s[[before= implements ][%s]] {",className,CatalogImpl.class,interfaces);
    out.printSerial();
    out.tab(1).javadoc("The reference instance of <code>%s</code>",catalogName);
    out.tab(1).println("public static final %s %s = new %s();",className,catalogId,className);
  }
  List<SchemaDefinition> schemas=new ArrayList<SchemaDefinition>();
  if (generateGlobalObjectReferences() && generateGlobalSchemaReferences()) {
    for (    SchemaDefinition schema : catalog.getSchemata()) {
      if (generateSchemaIfEmpty(schema)) {
        schemas.add(schema);
        final String schemaClassName=out.ref(getStrategy().getFullJavaClassName(schema));
        final String schemaId=getStrategy().getJavaIdentifier(schema);
        final String schemaFullId=getStrategy().getFullJavaIdentifier(schema);
        final String schemaComment=!StringUtils.isBlank(schema.getComment()) ? schema.getComment() : "The schema <code>" + schema.getQualifiedOutputName() + "</code>.";
        out.tab(1).javadoc(schemaComment);
        if (scala)         out.tab(1).println("val %s = %s",schemaId,schemaFullId);
 else         out.tab(1).println("public final %s %s = %s;",schemaClassName,schemaId,schemaFullId);
      }
    }
  }
  if (scala)   ;
 else {
    out.tab(1).javadoc(NO_FURTHER_INSTANCES_ALLOWED);
    out.tab(1).println("private %s() {",className);
    out.tab(2).println("super(\"%s\");",catalog.getOutputName());
    out.tab(1).println("}");
  }
  printReferences(out,schemas,Schema.class,false);
  generateCatalogClassFooter(catalog,out);
  out.println("}");
}
