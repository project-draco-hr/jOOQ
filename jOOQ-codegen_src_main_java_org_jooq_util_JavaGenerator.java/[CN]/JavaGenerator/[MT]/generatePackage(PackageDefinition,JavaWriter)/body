{
  final SchemaDefinition schema=pkg.getSchema();
  final String className=getStrategy().getJavaClassName(pkg);
  final String identifier=getStrategy().getJavaIdentifier(pkg);
  final String schemaIdentifier=out.ref(getStrategy().getFullJavaIdentifier(schema),2);
  final List<String> interfaces=out.ref(getStrategy().getJavaClassImplements(pkg,Mode.DEFAULT));
  printPackage(out,pkg);
  generatePackageClassJavadoc(pkg,out);
  printClassAnnotations(out,schema);
  if (scala) {
    out.println("object %s extends %s(\"%s\", %s)[[before= with ][%s]] {",className,PackageImpl.class,pkg.getOutputName(),schemaIdentifier,interfaces);
    out.tab(1).javadoc("The reference instance of <code>%s</code>",pkg.getQualifiedOutputName());
    out.tab(1).println("val %s = %s",identifier,className);
  }
 else {
    out.println("public class %s extends %s[[before= implements ][%s]] {",className,PackageImpl.class,interfaces);
    out.printSerial();
    printSingletonInstance(out,pkg);
  }
  for (  AttributeDefinition constant : pkg.getConstants()) {
    printConstant(out,constant);
  }
  for (  RoutineDefinition routine : pkg.getRoutines()) {
    printRoutine(out,routine);
    try {
      generateRoutine(schema,routine);
    }
 catch (    Exception e) {
      log.error("Error while generating routine " + routine,e);
    }
  }
  if (scala) {
  }
 else {
    out.tab(1).javadoc(NO_FURTHER_INSTANCES_ALLOWED);
    out.tab(1).println("private %s() {",className);
    out.tab(2).println("super(\"%s\", %s);",pkg.getOutputName(),schemaIdentifier);
    out.tab(1).println("}");
  }
  generatePackageClassFooter(pkg,out);
  out.println("}");
}
