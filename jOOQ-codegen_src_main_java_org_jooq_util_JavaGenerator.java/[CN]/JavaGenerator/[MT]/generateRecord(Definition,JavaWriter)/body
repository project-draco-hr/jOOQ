{
  final UniqueKeyDefinition key=(tableOrUdt instanceof TableDefinition) ? ((TableDefinition)tableOrUdt).getPrimaryKey() : null;
  final String className=getStrategy().getJavaClassName(tableOrUdt,Mode.RECORD);
  final String tableIdentifier=out.ref(getStrategy().getFullJavaIdentifier(tableOrUdt),2);
  final List<String> interfaces=out.ref(getStrategy().getJavaClassImplements(tableOrUdt,Mode.RECORD));
  final List<? extends TypedElementDefinition<?>> columns=getTypedElements(tableOrUdt);
  printPackage(out,tableOrUdt,Mode.RECORD);
  if (tableOrUdt instanceof TableDefinition)   generateRecordClassJavadoc((TableDefinition)tableOrUdt,out);
 else   generateUDTRecordClassJavadoc((UDTDefinition)tableOrUdt,out);
  printClassAnnotations(out,tableOrUdt.getSchema());
  if (tableOrUdt instanceof TableDefinition)   printTableJPAAnnotation(out,(TableDefinition)tableOrUdt);
  Class<?> baseClass;
  if (tableOrUdt instanceof UDTDefinition)   baseClass=UDTRecordImpl.class;
 else   if (generateRelations() && key != null)   baseClass=UpdatableRecordImpl.class;
 else   baseClass=TableRecordImpl.class;
  int degree=columns.size();
  String rowType=null;
  String rowTypeRecord=null;
  if (degree > 0 && degree <= Constants.MAX_ROW_DEGREE) {
    rowType=refRowType(out,columns);
    if (scala)     rowTypeRecord=out.ref(Record.class.getName() + degree) + "[" + rowType+ "]";
 else     rowTypeRecord=out.ref(Record.class.getName() + degree) + "<" + rowType+ ">";
    interfaces.add(rowTypeRecord);
  }
  if (generateInterfaces()) {
    interfaces.add(out.ref(getStrategy().getFullJavaClassName(tableOrUdt,Mode.INTERFACE)));
  }
  if (scala)   out.println("class %s extends %s[%s](%s)[[before= with ][separator= with ][%s]] {",className,baseClass,className,tableIdentifier,interfaces);
 else   out.println("public class %s extends %s<%s>[[before= implements ][%s]] {",className,baseClass,className,interfaces);
  out.printSerial();
  for (int i=0; i < degree; i++) {
    TypedElementDefinition<?> column=columns.get(i);
    final String comment=StringUtils.defaultString(column.getComment());
    final String setterReturnType=fluentSetters() ? className : tokenVoid;
    final String setter=getStrategy().getJavaSetterName(column,Mode.RECORD);
    final String getter=getStrategy().getJavaGetterName(column,Mode.RECORD);
    final String scalaAccessorName=getStrategy().getJavaMethodName(column,Mode.RECORD);
    final String type=out.ref(getJavaType(column.getType()));
    final String name=column.getQualifiedOutputName();
    final boolean isUDT=column.getType().isUDT();
    final boolean isArray=column.getType().isArray();
    final boolean isUDTArray=column.getType().isArray() && database.getArray(column.getType().getSchema(),column.getType().getUserType()).getElementType().isUDT();
    if (!(generateInterfaces() && isArray)) {
      out.tab(1).javadoc("Setter for <code>%s</code>.%s",name,defaultIfBlank(" " + comment,""));
      if (scala) {
        out.tab(1).println("def %s(value: %s): %s = {",setter,type,setterReturnType);
        out.tab(2).println("set(%s, value)",i);
        if (fluentSetters())         out.tab(2).println("this");
        out.tab(1).println("}");
        out.tab(1).javadoc("Scala-Style Setter for <code>%s</code>.%s",name,defaultIfBlank(" " + comment,""));
        out.tab(1).println("def %s_=(value: %s): %s = %s(value)",scalaAccessorName,type,setterReturnType,setter);
      }
 else {
        out.tab(1).overrideIf(generateInterfaces() && !generateImmutableInterfaces() && !isUDT);
        out.tab(1).println("public %s %s(%s value) {",setterReturnType,setter,varargsIfArray(type));
        out.tab(2).println("set(%s, value);",i);
        if (fluentSetters())         out.tab(2).println("return this;");
        out.tab(1).println("}");
      }
    }
    if (generateInterfaces() && !generateImmutableInterfaces() && (isUDT || isArray)) {
      final String columnType=out.ref(getJavaType(column.getType(),Mode.RECORD));
      final String columnTypeInterface=out.ref(getJavaType(column.getType(),Mode.INTERFACE));
      out.tab(1).javadoc("Setter for <code>%s</code>.%s",name,defaultIfBlank(" " + comment,""));
      out.tab(1).override();
      if (scala) {
        out.tab(1).println("def %s(value: %s): %s = {",setter,columnTypeInterface,setterReturnType);
        out.tab(2).println("if (value == null)");
        out.tab(3).println("set(%s, null)",i);
        out.tab(2).println("else");
        out.tab(3).println("set(%s, value.into(new %s()))",i,type);
        if (fluentSetters())         out.tab(2).println("this");
        out.tab(1).println("}");
        out.tab(1).javadoc("Scala-Style Setter for <code>%s</code>.%s",name,defaultIfBlank(" " + comment,""));
        out.tab(1).println("def %s_=(value: %s): %s = %s(value)",scalaAccessorName,columnTypeInterface,setterReturnType,setter);
      }
 else {
        out.tab(1).println("public %s %s(%s value) {",setterReturnType,setter,varargsIfArray(columnTypeInterface));
        out.tab(2).println("if (value == null)");
        out.tab(3).println("set(%s, null);",i);
        if (isUDT) {
          out.tab(2).println("else");
          out.tab(3).println("set(%s, value.into(new %s()));",i,type);
        }
 else         if (isArray) {
          final ArrayDefinition array=database.getArray(column.getType().getSchema(),column.getType().getUserType());
          final String componentType=out.ref(getJavaType(array.getElementType(),Mode.RECORD));
          final String componentTypeInterface=out.ref(getJavaType(array.getElementType(),Mode.INTERFACE));
          out.tab(2).println("else {");
          out.tab(3).println("%s a = new %s();",columnType,columnType);
          out.println();
          out.tab(3).println("for (%s i : value)",componentTypeInterface);
          if (isUDTArray)           out.tab(4).println("a.add(i.into(new %s()));",componentType);
 else           out.tab(4).println("a.add(i);",componentType);
          out.println();
          out.tab(3).println("set(1, a);");
          out.tab(2).println("}");
        }
        if (fluentSetters())         out.tab(2).println("return this;");
        out.tab(1).println("}");
      }
    }
    out.tab(1).javadoc("Getter for <code>%s</code>.%s",name,defaultIfBlank(" " + comment,""));
    if (tableOrUdt instanceof TableDefinition)     printColumnJPAAnnotation(out,(ColumnDefinition)column);
    printValidationAnnotation(out,column);
    if (scala) {
      out.tab(1).println("def %s: %s = {",getter,type);
      out.tab(2).println("val r = get(%s)",i);
      out.tab(2).println("if (r == null) null else r.asInstanceOf[%s]",type);
      out.tab(1).println("}");
      out.tab(1).javadoc("Scala-Style Getter for <code>%s</code>.%s",name,defaultIfBlank(" " + comment,""));
      out.tab(1).println("def %s: %s = %s",scalaAccessorName,type,getter);
    }
 else {
      out.tab(1).overrideIf(generateInterfaces());
      out.tab(1).println("public %s %s() {",type,getter);
      out.tab(2).println("return (%s) get(%s);",type,i);
      out.tab(1).println("}");
    }
  }
  if (generateRelations() && key != null) {
    int keyDegree=key.getKeyColumns().size();
    if (keyDegree <= Constants.MAX_ROW_DEGREE) {
      String keyType=refRowType(out,key.getKeyColumns());
      out.tab(1).header("Primary key information");
      if (scala) {
        out.tab(1).println("override def key: %s[%s] = {",out.ref(Record.class.getName() + keyDegree),keyType);
        out.tab(2).println("return super.key.asInstanceOf[ %s[%s] ]",out.ref(Record.class.getName() + keyDegree),keyType);
        out.tab(1).println("}");
      }
 else {
        out.tab(1).overrideInherit();
        out.tab(1).println("public %s<%s> key() {",out.ref(Record.class.getName() + keyDegree),keyType);
        out.tab(2).println("return (%s) super.key();",out.ref(Record.class.getName() + keyDegree));
        out.tab(1).println("}");
      }
    }
  }
  if (tableOrUdt instanceof UDTDefinition) {
    for (    RoutineDefinition routine : ((UDTDefinition)tableOrUdt).getRoutines()) {
      boolean instance=routine.getInParameters().size() > 0 && routine.getInParameters().get(0).getInputName().toUpperCase().equals("SELF");
      try {
        if (!routine.isSQLUsable()) {
          printConvenienceMethodProcedure(out,routine,instance);
        }
 else {
          if (!routine.isAggregate()) {
            printConvenienceMethodFunction(out,routine,instance);
          }
        }
      }
 catch (      Exception e) {
        log.error("Error while generating routine " + routine,e);
      }
    }
  }
  if (degree > 0 && degree <= Constants.MAX_ROW_DEGREE) {
    out.tab(1).header("Record%s type implementation",degree);
    if (scala) {
      out.println();
      out.tab(1).println("override def fieldsRow: %s[%s] = {",out.ref(Row.class.getName() + degree),rowType);
      out.tab(2).println("super.fieldsRow.asInstanceOf[ %s[%s] ]",out.ref(Row.class.getName() + degree),rowType);
      out.tab(1).println("}");
    }
 else {
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s<%s> fieldsRow() {",out.ref(Row.class.getName() + degree),rowType);
      out.tab(2).println("return (%s) super.fieldsRow();",out.ref(Row.class.getName() + degree));
      out.tab(1).println("}");
    }
    if (scala) {
      out.println();
      out.tab(1).println("override def valuesRow: %s[%s] = {",out.ref(Row.class.getName() + degree),rowType);
      out.tab(2).println("super.valuesRow.asInstanceOf[ %s[%s] ]",out.ref(Row.class.getName() + degree),rowType);
      out.tab(1).println("}");
    }
 else {
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s<%s> valuesRow() {",out.ref(Row.class.getName() + degree),rowType);
      out.tab(2).println("return (%s) super.valuesRow();",out.ref(Row.class.getName() + degree));
      out.tab(1).println("}");
    }
    for (int i=1; i <= degree; i++) {
      TypedElementDefinition<?> column=columns.get(i - 1);
      final String colType=out.ref(getJavaType(column.getType()));
      final String colIdentifier=out.ref(getStrategy().getFullJavaIdentifier(column),colRefSegments(column));
      if (scala) {
        out.tab(1).println("override def field%s: %s[%s] = %s",i,Field.class,colType,colIdentifier);
      }
 else {
        out.tab(1).overrideInherit();
        out.tab(1).println("public %s<%s> field%s() {",Field.class,colType,i);
        out.tab(2).println("return %s;",colIdentifier);
        out.tab(1).println("}");
      }
    }
    for (int i=1; i <= degree; i++) {
      TypedElementDefinition<?> column=columns.get(i - 1);
      final String colType=out.ref(getJavaType(column.getType()));
      final String colGetter=getStrategy().getJavaGetterName(column,Mode.RECORD);
      if (scala) {
        out.tab(1).println("override def value%s: %s = %s",i,colType,colGetter);
      }
 else {
        out.tab(1).overrideInherit();
        out.tab(1).println("public %s value%s() {",colType,i);
        out.tab(2).println("return %s();",colGetter);
        out.tab(1).println("}");
      }
    }
    for (int i=1; i <= degree; i++) {
      TypedElementDefinition<?> column=columns.get(i - 1);
      final String colType=out.ref(getJavaType(column.getType()));
      final String colSetter=getStrategy().getJavaSetterName(column,Mode.RECORD);
      if (scala) {
        out.println();
        out.tab(1).println("override def value%s(value: %s): %s = {",i,colType,className);
        out.tab(2).println("%s(value)",colSetter);
        out.tab(2).println("this");
        out.tab(1).println("}");
      }
 else {
        out.tab(1).overrideInherit();
        out.tab(1).println("public %s value%s(%s value) {",className,i,varargsIfArray(colType));
        out.tab(2).println("%s(value);",colSetter);
        out.tab(2).println("return this;");
        out.tab(1).println("}");
      }
    }
    List<String> arguments=new ArrayList<String>();
    List<String> calls=new ArrayList<String>();
    for (int i=1; i <= degree; i++) {
      TypedElementDefinition<?> column=columns.get(i - 1);
      final String colType=out.ref(getJavaType(column.getType()));
      if (scala) {
        arguments.add("value" + i + ": "+ colType);
        calls.add("this.value" + i + "(value"+ i+ ")");
      }
 else {
        arguments.add(colType + " value" + i);
        calls.add("value" + i + "(value"+ i+ ");");
      }
    }
    if (scala) {
      out.println();
      out.tab(1).println("override def values([[%s]]): %s = {",arguments,className);
      for (      String call : calls)       out.tab(2).println(call);
      out.tab(2).println("this");
      out.tab(1).println("}");
    }
 else {
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s values([[%s]]) {",className,arguments);
      for (      String call : calls)       out.tab(2).println(call);
      out.tab(2).println("return this;");
      out.tab(1).println("}");
    }
  }
  if (generateInterfaces()) {
    printFromAndInto(out,tableOrUdt);
  }
  if (scala) {
  }
 else {
    out.tab(1).header("Constructors");
    out.tab(1).javadoc("Create a detached %s",className);
    out.tab(1).println("public %s() {",className);
    out.tab(2).println("super(%s);",tableIdentifier);
    out.tab(1).println("}");
  }
  if (degree > 0 && degree < 256) {
    List<String> arguments=new ArrayList<String>();
    for (int i=0; i < degree; i++) {
      final TypedElementDefinition<?> column=columns.get(i);
      final String columnMember=getStrategy().getJavaMemberName(column,Mode.DEFAULT);
      final String type=out.ref(getJavaType(column.getType()));
      if (scala)       arguments.add(columnMember + ": " + type);
 else       arguments.add(type + " " + columnMember);
    }
    out.tab(1).javadoc("Create a detached, initialised %s",className);
    if (scala) {
      out.tab(1).println("def this([[%s]]) = {",arguments);
      out.tab(2).println("this()",tableIdentifier);
    }
 else {
      out.tab(1).println("public %s([[%s]]) {",className,arguments);
      out.tab(2).println("super(%s);",tableIdentifier);
    }
    out.println();
    for (int i=0; i < degree; i++) {
      final TypedElementDefinition<?> column=columns.get(i);
      final String columnMember=getStrategy().getJavaMemberName(column,Mode.DEFAULT);
      if (scala)       out.tab(2).println("set(%s, %s)",i,columnMember);
 else       out.tab(2).println("set(%s, %s);",i,columnMember);
    }
    out.tab(1).println("}");
  }
  if (tableOrUdt instanceof TableDefinition)   generateRecordClassFooter((TableDefinition)tableOrUdt,out);
 else   generateUDTRecordClassFooter((UDTDefinition)tableOrUdt,out);
  out.println("}");
}
