{
  Thread clientThread=new Thread("SQL Remote Debugger Server on port " + port){
    @Override public void run(){
      Debugger sqlQueryDebugger=null;
      boolean isLogging=false;
      try {
        ObjectInputStream in=new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
        final ObjectOutputStream out=new ObjectOutputStream(new BufferedOutputStream(socket.getOutputStream()));
        sqlQueryDebugger=new Debugger(){
          @Override public synchronized void debugQueries(          DebuggerData sqlQueryDebuggerData){
            try {
              out.writeObject(new ClientDebugQueriesMessage(sqlQueryDebuggerData));
              out.flush();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
          @Override public synchronized void debugResultSet(          int sqlQueryDebuggerDataID,          DebuggerResultSetData sqlQueryDebuggerResultSetData){
            try {
              out.writeObject(new ClientDebugResultSetMessage(sqlQueryDebuggerDataID,sqlQueryDebuggerResultSetData));
              out.flush();
            }
 catch (            IOException e) {
              e.printStackTrace();
            }
          }
        }
;
        for (Message o; (o=(Message)in.readObject()) != null; ) {
          if (o instanceof ServerLoggingActivationMessage) {
            isLogging=((ServerLoggingActivationMessage)o).isLogging();
            if (isLogging) {
              DebuggerRegister.addSqlQueryDebugger(sqlQueryDebugger);
            }
 else {
              DebuggerRegister.removeSqlQueryDebugger(sqlQueryDebugger);
            }
          }
        }
      }
 catch (      Exception e) {
        if (isLogging) {
          e.printStackTrace();
        }
      }
 finally {
        if (sqlQueryDebugger != null) {
          DebuggerRegister.removeSqlQueryDebugger(sqlQueryDebugger);
        }
      }
    }
  }
;
  clientThread.setDaemon(true);
  clientThread.start();
}
