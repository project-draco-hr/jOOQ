{
  if (typeName == null)   return null;
  Iterator<CustomType> it1=configuredCustomTypes.iterator();
  while (it1.hasNext()) {
    CustomType type=it1.next();
    if (type == null || (type.getName() == null && type.getType() == null)) {
      try {
        StringWriter writer=new StringWriter();
        JAXB.marshal(type,writer);
        log.warn("Invalid custom type encountered: " + writer.toString());
      }
 catch (      Exception e) {
        log.warn("Invalid custom type encountered: " + type);
      }
      it1.remove();
      continue;
    }
    if (StringUtils.equals(type.getType() != null ? type.getType() : type.getName(),typeName)) {
      return type;
    }
  }
  Iterator<ForcedType> it2=configuredForcedTypes.iterator();
  while (it2.hasNext()) {
    ForcedType type=it2.next();
    if (StringUtils.isBlank(type.getName())) {
      if (StringUtils.isBlank(type.getUserType())) {
        log.warn("Bad configuration for <forcedType/>. Either <name/> or <userType/> is required: " + toString(type));
        it2.remove();
        continue;
      }
      if (StringUtils.isBlank(type.getBinding()) && StringUtils.isBlank(type.getConverter())) {
        log.warn("Bad configuration for <forcedType/>. Either <binding/> or <converter/> is required: " + toString(type));
        it2.remove();
        continue;
      }
    }
 else {
      if (!StringUtils.isBlank(type.getUserType())) {
        log.warn("Bad configuration for <forcedType/>. <userType/> is not allowed when <name/> is provided: " + toString(type));
        type.setUserType(null);
      }
      if (!StringUtils.isBlank(type.getBinding())) {
        log.warn("Bad configuration for <forcedType/>. <binding/> is not allowed when <name/> is provided: " + toString(type));
        type.setBinding(null);
      }
      if (!StringUtils.isBlank(type.getConverter())) {
        log.warn("Bad configuration for <forcedType/>. <converter/> is not allowed when <name/> is provided: " + toString(type));
        type.setConverter(null);
      }
    }
    if (type.getUserType() != null && StringUtils.equals(type.getUserType(),typeName)) {
      return customType(this,type);
    }
  }
  return null;
}
