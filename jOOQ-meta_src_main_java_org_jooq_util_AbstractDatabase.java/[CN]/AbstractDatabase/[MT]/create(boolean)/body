{
  final Configuration configuration=create0().configuration();
  if (muteExceptions) {
    return DSL.using(configuration);
  }
 else {
    final Settings newSettings=SettingsTools.clone(configuration.settings()).withRenderFormatted(true);
    final ExecuteListenerProvider[] oldProviders=configuration.executeListenerProviders();
    final ExecuteListenerProvider[] newProviders=new ExecuteListenerProvider[oldProviders.length + 1];
    System.arraycopy(oldProviders,0,newProviders,0,oldProviders.length);
    newProviders[oldProviders.length]=new DefaultExecuteListenerProvider(new DefaultExecuteListener(){
class SQLPerformanceWarning extends Exception {
      }
      @Override public void start(      ExecuteContext ctx){
        if (!initialised) {
          DSL.using(configuration).selectOne().fetch();
          initialised=true;
        }
      }
      @Override public void executeStart(      ExecuteContext ctx){
        ctx.data("org.jooq.util.AbstractDatabase.watch",new StopWatch());
      }
      @Override public void executeEnd(      ExecuteContext ctx){
        StopWatch watch=(StopWatch)ctx.data("org.jooq.util.AbstractDatabase.watch");
        if (watch.split() > 5L * 1000 * 1000* 1000) {
          watch.splitWarn("Slow SQL");
          log.warn("Slow SQL","jOOQ Meta executed a slow query (slower than 5 seconds)" + "\n\n" + "Please report this bug here: https://github.com/jOOQ/jOOQ/issues/new\n\n"+ formatted(ctx.query()),new SQLPerformanceWarning());
        }
      }
      @Override public void exception(      ExecuteContext ctx){
        log.warn("SQL exception","Exception while executing meta query: " + (ctx.sqlException() != null ? ctx.sqlException().getMessage() : ctx.exception() != null ? ctx.exception().getMessage() : "No exception available") + "\n\n"+ "Please report this bug here: https://github.com/jOOQ/jOOQ/issues/new\n\n"+ formatted(ctx.query()));
      }
      private String formatted(      Query query){
        return DSL.using(configuration.derive(newSettings)).renderInlined(query);
      }
    }
);
    return DSL.using(configuration.derive(newProviders));
  }
}
