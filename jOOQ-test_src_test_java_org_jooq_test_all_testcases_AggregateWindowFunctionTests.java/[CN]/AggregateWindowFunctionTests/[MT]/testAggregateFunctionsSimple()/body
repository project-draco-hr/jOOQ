{
  Field<BigDecimal> median=median(TBook_ID());
switch (dialect().family()) {
case DERBY:
case FIREBIRD:
case H2:
case MARIADB:
case MYSQL:
case SQLITE:
case POSTGRES:
    median=avg(TBook_ID());
  break;
}
Result<Record9<Integer,Integer,Integer,Integer,BigDecimal,BigDecimal,Integer,Integer,BigDecimal>> result1=create().select(TBook_AUTHOR_ID(),count(),count(TBook_ID()),countDistinct(TBook_AUTHOR_ID()),sum(TBook_ID()),avg(TBook_ID()),min(TBook_ID()),max(TBook_ID()),median).from(TBook()).groupBy(TBook_AUTHOR_ID()).orderBy(TBook_AUTHOR_ID()).fetch();
assertEquals(2,(int)result1.get(0).value2());
assertEquals(2,(int)result1.get(0).value3());
assertEquals(1,(int)result1.get(0).value4());
assertEquals(3d,result1.get(0).getValue(4,Double.class),0.0);
assertEquals(1,(int)result1.get(0).value7());
assertEquals(2,(int)result1.get(0).value8());
assertEquals(2,(int)result1.get(1).value2());
assertEquals(2,(int)result1.get(1).value3());
assertEquals(1,(int)result1.get(1).value4());
assertEquals(7d,result1.get(1).getValue(4,Double.class),0.0);
assertEquals(3,(int)result1.get(1).value7());
assertEquals(4,(int)result1.get(1).value8());
assertTrue(asList(1.0,1.5,2.0).contains(result1.get(0).getValue(5,Double.class)));
assertTrue(asList(1.0,1.5,2.0).contains(result1.get(0).getValue(8,Double.class)));
assertTrue(asList(3.0,3.5,4.0).contains(result1.get(1).getValue(5,Double.class)));
assertTrue(asList(3.0,3.5,4.0).contains(result1.get(1).getValue(8,Double.class)));
int distinct1=create().select(countDistinct(TBook_AUTHOR_ID())).from(TBook()).fetchOne(0,Integer.class);
int distinct2=create().select(minDistinct(TBook_AUTHOR_ID())).from(TBook()).fetchOne(0,Integer.class);
int distinct3=create().select(maxDistinct(TBook_AUTHOR_ID())).from(TBook()).fetchOne(0,Integer.class);
int distinct4=create().select(sumDistinct(TBook_AUTHOR_ID())).from(TBook()).fetchOne(0,Integer.class);
double distinct5=create().select(avgDistinct(TBook_AUTHOR_ID())).from(TBook()).fetchOne(0,Double.class);
assertEquals(2,distinct1);
assertEquals(1,distinct2);
assertEquals(2,distinct3);
assertEquals(3,distinct4);
assertTrue(asList(1.0,1.5,2.0).contains(distinct5));
}
