{
  Result<?> result=create().select(REFERENTIAL_CONSTRAINTS.UNIQUE_CONSTRAINT_NAME,REFERENTIAL_CONSTRAINTS.UNIQUE_CONSTRAINT_SCHEMA,KEY_COLUMN_USAGE.CONSTRAINT_NAME,KEY_COLUMN_USAGE.TABLE_SCHEMA,KEY_COLUMN_USAGE.TABLE_NAME,KEY_COLUMN_USAGE.COLUMN_NAME).from(REFERENTIAL_CONSTRAINTS).join(KEY_COLUMN_USAGE).on(KEY_COLUMN_USAGE.CONSTRAINT_SCHEMA.equal(REFERENTIAL_CONSTRAINTS.CONSTRAINT_SCHEMA)).and(KEY_COLUMN_USAGE.CONSTRAINT_NAME.equal(REFERENTIAL_CONSTRAINTS.CONSTRAINT_NAME)).where(KEY_COLUMN_USAGE.TABLE_SCHEMA.in(getInputSchemata())).orderBy(KEY_COLUMN_USAGE.TABLE_SCHEMA.asc(),KEY_COLUMN_USAGE.TABLE_NAME.asc(),KEY_COLUMN_USAGE.CONSTRAINT_NAME.asc(),KEY_COLUMN_USAGE.ORDINAL_POSITION.asc()).fetch();
  for (  Record record : result) {
    SchemaDefinition foreignKeySchema=getSchema(record.getValue(KEY_COLUMN_USAGE.TABLE_SCHEMA));
    SchemaDefinition uniqueKeySchema=getSchema(record.getValue(REFERENTIAL_CONSTRAINTS.UNIQUE_CONSTRAINT_SCHEMA));
    String foreignKey=record.getValue(KEY_COLUMN_USAGE.CONSTRAINT_NAME);
    String foreignKeyTable=record.getValue(KEY_COLUMN_USAGE.TABLE_NAME);
    String foreignKeyColumn=record.getValue(KEY_COLUMN_USAGE.COLUMN_NAME);
    String uniqueKey=record.getValue(REFERENTIAL_CONSTRAINTS.UNIQUE_CONSTRAINT_NAME);
    TableDefinition referencingTable=getTable(foreignKeySchema,foreignKeyTable);
    if (referencingTable != null) {
      ColumnDefinition referencingColumn=referencingTable.getColumn(foreignKeyColumn);
      relations.addForeignKey(foreignKeyTable + "__" + foreignKey,uniqueKey,referencingColumn,uniqueKeySchema);
    }
  }
}
