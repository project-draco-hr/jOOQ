{
  List<RoutineDefinition> result=new ArrayList<RoutineDefinition>();
  Routines r1=ROUTINES.as("r1");
  for (  Record record : create().select(r1.ROUTINE_SCHEMA,r1.ROUTINE_NAME,r1.SPECIFIC_NAME,when(condition("{0} && ARRAY['o','b']::\"char\"[]",PG_PROC.PROARGMODES),inline("void")).otherwise(r1.DATA_TYPE).as("data_type"),r1.CHARACTER_MAXIMUM_LENGTH,r1.NUMERIC_PRECISION,r1.NUMERIC_SCALE,r1.TYPE_UDT_SCHEMA,r1.TYPE_UDT_NAME,when(count().over(partitionBy(r1.ROUTINE_SCHEMA,r1.ROUTINE_NAME)).gt(one()),rowNumber().over(partitionBy(r1.ROUTINE_SCHEMA,r1.ROUTINE_NAME).orderBy(r1.SPECIFIC_NAME))).as("overload"),PG_PROC.PROISAGG).from(r1).join(PG_NAMESPACE).on(PG_NAMESPACE.NSPNAME.eq(r1.SPECIFIC_SCHEMA)).join(PG_PROC).on(PG_PROC.PRONAMESPACE.eq(oid(PG_NAMESPACE))).and(PG_PROC.PRONAME.concat("_").concat(oid(PG_PROC)).eq(r1.SPECIFIC_NAME)).where(r1.ROUTINE_SCHEMA.in(getInputSchemata())).and(tableValuedFunctions() ? condition(not(PG_PROC.PRORETSET)) : trueCondition()).orderBy(r1.ROUTINE_SCHEMA.asc(),r1.ROUTINE_NAME.asc(),field(name("overload")).asc()).fetch()) {
    result.add(new PostgresRoutineDefinition(this,record));
  }
  return result;
}
