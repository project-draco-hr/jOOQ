{
  List<RoutineDefinition> result=new ArrayList<RoutineDefinition>();
  Routines r1=ROUTINES.as("r1");
  Routines r2=ROUTINES.as("r2");
  for (  Record record : create().select(r1.ROUTINE_SCHEMA,r1.ROUTINE_NAME,r1.SPECIFIC_NAME,decode().when(DSL.exists(selectOne().from(PARAMETERS).where(PARAMETERS.SPECIFIC_SCHEMA.equal(r1.SPECIFIC_SCHEMA)).and(PARAMETERS.SPECIFIC_NAME.equal(r1.SPECIFIC_NAME)).and(upper(PARAMETERS.PARAMETER_MODE).notEqual("IN"))),val("void")).otherwise(r1.DATA_TYPE).as("data_type"),r1.CHARACTER_MAXIMUM_LENGTH,r1.NUMERIC_PRECISION,r1.NUMERIC_SCALE,r1.TYPE_UDT_NAME,decode().when(DSL.exists(selectOne().from(r2).where(r2.ROUTINE_SCHEMA.in(getInputSchemata())).and(r2.ROUTINE_SCHEMA.equal(r1.ROUTINE_SCHEMA)).and(r2.ROUTINE_NAME.equal(r1.ROUTINE_NAME)).and(r2.SPECIFIC_NAME.notEqual(r1.SPECIFIC_NAME))),select(count()).from(r2).where(r2.ROUTINE_SCHEMA.in(getInputSchemata())).and(r2.ROUTINE_SCHEMA.equal(r1.ROUTINE_SCHEMA)).and(r2.ROUTINE_NAME.equal(r1.ROUTINE_NAME)).and(r2.SPECIFIC_NAME.lessOrEqual(r1.SPECIFIC_NAME)).asField()).as("overload")).from(r1).where(r1.ROUTINE_SCHEMA.in(getInputSchemata())).orderBy(r1.ROUTINE_SCHEMA.asc(),r1.ROUTINE_NAME.asc()).fetch()) {
    result.add(new PostgresRoutineDefinition(this,record));
  }
  return result;
}
