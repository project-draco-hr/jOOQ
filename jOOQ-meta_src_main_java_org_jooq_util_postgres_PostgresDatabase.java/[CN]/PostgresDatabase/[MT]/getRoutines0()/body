{
  List<RoutineDefinition> result=new ArrayList<RoutineDefinition>();
  Table<RoutinesRecord> r1=ROUTINES.as("r1");
  Table<RoutinesRecord> r2=ROUTINES.as("r2");
  for (  Record record : create().select(r1.getField(Routines.ROUTINE_NAME),r1.getField(Routines.SPECIFIC_NAME),create().decode().when(create().exists(create().selectOne().from(PARAMETERS).where(Parameters.SPECIFIC_SCHEMA.equal(r1.getField(Routines.SPECIFIC_SCHEMA))).and(Parameters.SPECIFIC_NAME.equal(r1.getField(Routines.SPECIFIC_NAME))).and(Parameters.PARAMETER_MODE.upper().notEqual("IN"))),create().val("void")).otherwise(r1.getField(Routines.DATA_TYPE)).as("data_type"),r1.getField(Routines.NUMERIC_PRECISION),r1.getField(Routines.NUMERIC_SCALE),r1.getField(Routines.TYPE_UDT_NAME),create().decode().when(create().exists(create().selectOne().from(r2).where(r2.getField(Routines.ROUTINE_SCHEMA).equal(getSchemaName())).and(r2.getField(Routines.ROUTINE_NAME).equal(r1.getField(Routines.ROUTINE_NAME))).and(r2.getField(Routines.SPECIFIC_NAME).notEqual(r1.getField(Routines.SPECIFIC_NAME)))),create().select(create().count()).from(r2).where(r2.getField(Routines.ROUTINE_SCHEMA).equal(getSchemaName())).and(r2.getField(Routines.ROUTINE_NAME).equal(r1.getField(Routines.ROUTINE_NAME))).and(r2.getField(Routines.SPECIFIC_NAME).lessOrEqual(r1.getField(Routines.SPECIFIC_NAME))).asField()).as("overload")).from(r1).where(r1.getField(Routines.ROUTINE_SCHEMA).equal(getSchemaName())).orderBy(r1.getField(Routines.ROUTINE_NAME).asc()).fetch()) {
    result.add(new PostgresRoutineDefinition(this,record));
  }
  return result;
}
