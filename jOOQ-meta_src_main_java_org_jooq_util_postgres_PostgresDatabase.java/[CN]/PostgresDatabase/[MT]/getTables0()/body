{
  List<TableDefinition> result=new ArrayList<TableDefinition>();
  Map<Name,PostgresTableDefinition> map=new HashMap<Name,PostgresTableDefinition>();
  for (  Record record : create().select().from(select(TABLES.TABLE_SCHEMA,TABLES.TABLE_NAME,TABLES.TABLE_NAME.as("specific_name"),inline(false).as("table_valued_function"),PG_DESCRIPTION.DESCRIPTION).from(TABLES).join(PG_NAMESPACE).on(TABLES.TABLE_SCHEMA.eq(PG_NAMESPACE.NSPNAME)).join(PG_CLASS).on(PG_CLASS.RELNAME.eq(TABLES.TABLE_NAME)).and(PG_CLASS.RELNAMESPACE.eq(oid(PG_NAMESPACE))).leftOuterJoin(PG_DESCRIPTION).on(PG_DESCRIPTION.OBJOID.eq(oid(PG_CLASS))).and(PG_DESCRIPTION.OBJSUBID.eq(0)).where(TABLES.TABLE_SCHEMA.in(getInputSchemata())).unionAll(select(ROUTINES.ROUTINE_SCHEMA,ROUTINES.ROUTINE_NAME,ROUTINES.SPECIFIC_NAME,inline(true).as("table_valued_function"),inline("")).from(ROUTINES).join(PG_NAMESPACE).on(ROUTINES.SPECIFIC_SCHEMA.eq(PG_NAMESPACE.NSPNAME)).join(PG_PROC).on(PG_PROC.PRONAMESPACE.eq(oid(PG_NAMESPACE))).and(PG_PROC.PRONAME.concat("_").concat(oid(PG_PROC)).eq(ROUTINES.SPECIFIC_NAME)).where(ROUTINES.ROUTINE_SCHEMA.in(getInputSchemata())).and(PG_PROC.PRORETSET)).asTable("tables")).orderBy(1,2).fetch()) {
    SchemaDefinition schema=getSchema(record.getValue(TABLES.TABLE_SCHEMA));
    String name=record.getValue(TABLES.TABLE_NAME);
    boolean tableValuedFunction=record.getValue("table_valued_function",boolean.class);
    String comment=record.getValue(PG_DESCRIPTION.DESCRIPTION,String.class);
    if (tableValuedFunction) {
      result.add(new PostgresTableValuedFunction(schema,name,record.getValue(ROUTINES.SPECIFIC_NAME),comment));
    }
 else {
      PostgresTableDefinition t=new PostgresTableDefinition(schema,name,comment);
      result.add(t);
      map.put(name(schema.getName(),name),t);
    }
  }
  PgClass ct=PG_CLASS.as("ct");
  PgNamespace cn=PG_NAMESPACE.as("cn");
  PgInherits i=PG_INHERITS.as("i");
  PgClass pt=PG_CLASS.as("pt");
  PgNamespace pn=PG_NAMESPACE.as("pn");
  if (is84()) {
    for (    Record5<String,String,String,String,Integer> inheritance : create().select(cn.NSPNAME,ct.RELNAME,pn.NSPNAME,pt.RELNAME,max(i.INHSEQNO).over().partitionBy(i.INHRELID).as("m")).from(ct).join(cn).on(ct.RELNAMESPACE.eq(oid(cn))).join(i).on(i.INHRELID.eq(oid(ct))).join(pt).on(i.INHPARENT.eq(oid(pt))).join(pn).on(pt.RELNAMESPACE.eq(oid(pn))).fetch()) {
      Name child=name(inheritance.value1(),inheritance.value2());
      Name parent=name(inheritance.value3(),inheritance.value4());
      if (inheritance.value5() > 1) {
        log.info("Multiple inheritance","Multiple inheritance is not supported by jOOQ: " + child + " inherits from "+ parent);
      }
 else {
        PostgresTableDefinition childTable=map.get(child);
        PostgresTableDefinition parentTable=map.get(parent);
        if (childTable != null && parentTable != null) {
          childTable.setParentTable(parentTable);
          parentTable.getChildTables().add(childTable);
        }
      }
    }
  }
  return result;
}
