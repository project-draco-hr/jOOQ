{
  CommonTableExpression<Record2<Integer,String>> t1=name("t1").fields("f1","f2").as(select(val(1),val("a")));
  CommonTableExpression<Record2<Integer,String>> t2=name("t2").fields("f3","f4").as(select(val(2),val("b")));
  Table<Record2<Integer,String>> a1=t1.as("a1");
  Table<Record2<Integer,String>> a2=t2.as("a2");
  Result<?> result3=create().with(t1).with(t2).select(a1.field("f1").add(a2.field("f3")).as("add"),a1.field("f2").concat(a2.field("f4")).as("concat")).from(a1,a2).fetch();
  assertEquals(1,result3.size());
  assertEquals(2,result3.fields().length);
  assertEquals("add",result3.field(0).getName());
  assertEquals("concat",result3.field(1).getName());
  assertEquals(Integer.class,result3.field(0).getType());
  assertEquals(String.class,result3.field(1).getType());
  assertEquals(3,result3.getValue(0,0));
  assertEquals("ab",result3.getValue(0,1));
  Table<Record2<Integer,String>> b1=t1.as("a1","i1","s1");
  Table<Record2<Integer,String>> b2=t2.as("a2","i2","s2");
  Result<?> result4=create().with(t1).with(t2).select(b1.field("i1").add(b2.field("i2")).as("add"),b1.field("s1").concat(b2.field("s2")).as("concat")).from(b1,b2).fetch();
  assertEquals(1,result4.size());
  assertEquals(2,result4.fields().length);
  assertEquals("add",result4.field(0).getName());
  assertEquals("concat",result4.field(1).getName());
  assertEquals(Integer.class,result4.field(0).getType());
  assertEquals(String.class,result4.field(1).getType());
  assertEquals(3,result4.getValue(0,0));
  assertEquals("ab",result4.getValue(0,1));
}
