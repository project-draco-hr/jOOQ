{
  return new SourceVisitor<Void,Void>(this){
    @Override public Void visitMethodInvocation(    MethodInvocationTree node,    Void p){
      try {
        ExecutableElement elementFromUse=elementFromUse(node);
        Support support=elementFromUse.getAnnotation(Support.class);
        if (support != null && support.value().length > 0) {
          Element enclosing=elementFromDeclaration(enclosingMethod(getPath(root,node)));
          EnumSet<SQLDialect> supported=EnumSet.copyOf(asList(support.value()));
          EnumSet<SQLDialect> allowed=EnumSet.noneOf(SQLDialect.class);
          EnumSet<SQLDialect> required=EnumSet.allOf(SQLDialect.class);
          EnumSet<SQLDialect> x;
          while (enclosing != null) {
            Allow allow=enclosing.getAnnotation(Allow.class);
            Require require=enclosing.getAnnotation(Require.class);
            if (allow != null)             allowed.addAll(asList(allow.value()));
            if (require != null)             required.retainAll(asList(require.value()));
            enclosing=enclosing.getEnclosingElement();
          }
          if (allowed.isEmpty())           error(node,"No jOOQ API usage is allowed at current scope. Use @Allow.");
          if (required.isEmpty())           error(node,"No jOOQ API usage is allowed at current scope due to conflicting @Require specification.");
          x=EnumSet.copyOf(allowed);
          x.retainAll(supported);
          if (x.isEmpty())           error(node,"None of the supported dialects (" + supported + ") are allowed in the current scope ("+ allowed+ ")");
          if (!supported.containsAll(required))           error(node,"Not all of the required dialects (" + required + ") from the current scope are supported ("+ supported+ ")");
        }
      }
 catch (      final Exception e) {
        print(new Printer(){
          @Override public void print(          PrintWriter t){
            e.printStackTrace(t);
          }
        }
);
      }
      return super.visitMethodInvocation(node,p);
    }
  }
;
}
