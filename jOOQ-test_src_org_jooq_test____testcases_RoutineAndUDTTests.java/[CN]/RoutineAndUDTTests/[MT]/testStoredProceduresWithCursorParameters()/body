{
switch (getDialect()) {
case H2:
case HSQLDB:
case ORACLE:
case POSTGRES:
    break;
default :
  log.info("SKIPPING","Stored procedures tests with CURSOR type parameters");
return;
}
{
Object integerArray=null;
Result<Record> bFromCursor=invoke(cRoutines(),"fGetOneCursor",create().configuration(),integerArray);
assertNotNull(bFromCursor);
assertTrue(bFromCursor.isEmpty());
assertEquals(0,bFromCursor.size());
if (TArrays_STRING_R() != null) {
ArrayRecord<Integer> i=newNUMBER_R();
i.set(1,2,4,6);
integerArray=i;
}
 else if (TArrays_STRING() != null) {
integerArray=new Integer[]{1,2,4,6};
}
bFromCursor=invoke(cRoutines(),"fGetOneCursor",create().configuration(),integerArray);
Result<B> bFromTable=create().selectFrom(TBook()).where(TBook_ID().in(1,2,4)).orderBy(TBook_ID()).fetch();
assertNotNull(bFromCursor);
assertFalse(bFromCursor.isEmpty());
assertEquals(3,bFromCursor.size());
compareBookResults(bFromCursor,bFromTable);
}
{
Field<Result<Record>> field=FGetOneCursorField(null);
Result<Record> bFromCursor;
switch (getDialect()) {
case HSQLDB:
bFromCursor=create().select().from(table(field)).fetch();
break;
default :
bFromCursor=create().select(field).fetchOne(field);
break;
}
assertNotNull(bFromCursor);
assertTrue(bFromCursor.isEmpty());
assertEquals(0,bFromCursor.size());
field=FGetOneCursorField(new Integer[]{1,2,4,6});
switch (getDialect()) {
case HSQLDB:
bFromCursor=create().select().from(table(field)).fetch();
break;
default :
bFromCursor=create().select(field).fetchOne(field);
break;
}
Result<B> bFromTable=create().selectFrom(TBook()).where(TBook_ID().in(1,2,4)).orderBy(TBook_ID()).fetch();
assertNotNull(bFromCursor);
assertFalse(bFromCursor.isEmpty());
assertEquals(3,bFromCursor.size());
compareBookResults(bFromCursor,bFromTable);
}
if (getDialect() == SQLDialect.HSQLDB) {
log.info("SKIPPING","Cursor OUT parameter tests");
return;
}
if (supportsOUTParameters()) {
Object integerArray=null;
Object result=invoke(cRoutines(),"pGetOneCursor",create().configuration(),integerArray);
assertNotNull(result);
assertEquals("0","" + invoke(result,"getTotal"));
Result<Record> bFromCursor=invoke(result,"getBooks");
assertTrue(bFromCursor.isEmpty());
assertEquals(0,bFromCursor.size());
if (TArrays_STRING_R() != null) {
ArrayRecord<Integer> i=newNUMBER_R();
i.set(1,2,4,6);
integerArray=i;
}
 else if (TArrays_STRING() != null) {
integerArray=new Integer[]{1,2,4,6};
}
result=invoke(cRoutines(),"pGetOneCursor",create().configuration(),integerArray);
assertEquals("3","" + invoke(result,"getTotal"));
bFromCursor=invoke(result,"getBooks");
Result<B> bFromTable=create().selectFrom(TBook()).where(TBook_ID().in(1,2,4)).orderBy(TBook_ID()).fetch();
assertNotNull(bFromCursor);
assertFalse(bFromCursor.isEmpty());
assertEquals(3,bFromCursor.size());
compareBookResults(bFromCursor,bFromTable);
}
 else {
log.info("SKIPPING","One cursor OUT parameter test");
}
if (getDialect() == SQLDialect.POSTGRES) {
log.info("SKIPPING","UDT/Enum types returned in refcursor (see [#707])");
}
 else if (supportsOUTParameters()) {
Object result=invoke(cRoutines(),"pGetTwoCursors",create());
assertNotNull(result);
Result<A> aFromTable=create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch();
Result<B> bFromTable=create().selectFrom(TBook()).orderBy(TBook_ID()).fetch();
Result<Record> aFromCursor=invoke(result,"getAuthors");
Result<Record> bFromCursor=invoke(result,"getBooks");
assertNotNull(aFromCursor);
assertNotNull(bFromCursor);
assertEquals(2,aFromCursor.size());
assertEquals(4,bFromCursor.size());
assertFalse(aFromCursor.isEmpty());
assertFalse(bFromCursor.isEmpty());
compareAuthorResults(aFromCursor,aFromTable);
compareBookResults(bFromCursor,bFromTable);
}
 else {
log.info("SKIPPING","Two cursor OUT parameter test");
}
}
