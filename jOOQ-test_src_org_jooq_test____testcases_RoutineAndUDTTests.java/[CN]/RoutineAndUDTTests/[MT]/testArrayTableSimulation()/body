{
  Result<Record> result;
  Integer[] array=new Integer[0];
  result=create().select().from(table(new Integer[0])).fetch();
  assertEquals(0,result.size());
  assertEquals(1,result.getFields().size());
  array=new Integer[]{null};
  result=create().select().from(table(array)).fetch();
  assertEquals(1,result.size());
  assertEquals(1,result.getFields().size());
  assertEquals(null,result.getValue(0,0));
  array=new Integer[]{null,1};
  result=create().select().from(table(array)).fetch();
  assertEquals(2,result.size());
  assertEquals(1,result.getFields().size());
  assertTrue(asList(array).containsAll(result.getValues(0)));
  array=new Integer[]{null,1,2};
  result=create().select().from(table(array)).fetch();
  assertEquals(3,result.size());
  assertEquals(1,result.getFields().size());
  assertTrue(asList(array).containsAll(result.getValues(0)));
  array=new Integer[]{2,3};
  Table<?> table=table(array);
  result=create().select(TBook_ID(),TBook_TITLE()).from(TBook()).join(table).on(table.getField(0).cast(Integer.class).equal(TBook_ID())).orderBy(TBook_ID().asc()).fetch();
  assertEquals(2,result.size());
  assertEquals(Integer.valueOf(2),result.getValue(0,TBook_ID()));
  assertEquals(Integer.valueOf(3),result.getValue(1,TBook_ID()));
  assertEquals("Animal Farm",result.getValue(0,TBook_TITLE()));
  assertEquals("O Alquimista",result.getValue(1,TBook_TITLE()));
  result=create().select(TBook_ID(),TBook_TITLE()).from(TBook()).join(table.as("t")).on(table.as("t").getField(0).cast(Integer.class).equal(TBook_ID())).orderBy(TBook_ID().asc()).fetch();
  assertEquals(2,result.size());
  assertEquals(Integer.valueOf(2),result.getValue(0,TBook_ID()));
  assertEquals(Integer.valueOf(3),result.getValue(1,TBook_ID()));
  assertEquals("Animal Farm",result.getValue(0,TBook_TITLE()));
  assertEquals("O Alquimista",result.getValue(1,TBook_TITLE()));
}
