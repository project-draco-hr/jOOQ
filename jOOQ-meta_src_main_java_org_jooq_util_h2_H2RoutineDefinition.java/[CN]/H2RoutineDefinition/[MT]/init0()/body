{
  for (  Record record : create().select(FunctionColumns.COLUMN_NAME,FunctionColumns.TYPE_NAME,FunctionColumns.PRECISION,FunctionColumns.SCALE,FunctionColumns.POS,FunctionColumns.NULLABLE,FunctionColumns.COLUMN_DEFAULT.nvl2(true,false).as("default")).from(FUNCTION_COLUMNS).where(FunctionColumns.ALIAS_SCHEMA.equal(getSchema().getName())).and(FunctionColumns.ALIAS_NAME.equal(getName())).and(FunctionColumns.POS.gt(0)).orderBy(FunctionColumns.POS.asc()).fetch()) {
    String paramName=record.get(FunctionColumns.COLUMN_NAME);
    String typeName=record.get(FunctionColumns.TYPE_NAME);
    Integer precision=record.get(FunctionColumns.PRECISION);
    Short scale=record.get(FunctionColumns.SCALE);
    int position=record.get(FunctionColumns.POS);
    boolean nullable=record.get(FunctionColumns.NULLABLE,boolean.class);
    boolean defaulted=record.get("default",boolean.class);
    if (position == 0 && H2DataType.OTHER.getTypeName().equalsIgnoreCase(typeName)) {
      continue;
    }
    DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),getSchema(),typeName,precision,precision,scale,nullable,defaulted);
    ParameterDefinition parameter=new DefaultParameterDefinition(this,paramName,position,type);
    addParameter(InOutDefinition.IN,parameter);
  }
}
