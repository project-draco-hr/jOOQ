{
  Field<?>[] fields;
  int columnCount=0;
  try {
    columnCount=meta.getColumnCount();
    fields=new Field[columnCount];
  }
 catch (  SQLException e) {
    log.info("Cannot fetch column count for cursor : " + e.getMessage());
    fields=new Field[]{field("dummy")};
  }
  try {
    for (int i=1; i <= columnCount; i++) {
      Name name;
      String columnLabel=meta.getColumnLabel(i);
      String columnName=meta.getColumnName(i);
      if (columnName.equals(columnLabel)) {
        try {
          String columnSchema=meta.getSchemaName(i);
          String columnTable=meta.getTableName(i);
          name=name(columnSchema,columnTable,columnName);
        }
 catch (        SQLFeatureNotSupportedException e) {
          name=name(columnLabel);
        }
      }
 else {
        name=name(columnLabel);
      }
      int precision=meta.getPrecision(i);
      int scale=meta.getScale(i);
      DataType<?> dataType=SQLDataType.OTHER;
      String type=meta.getColumnTypeName(i);
      try {
        dataType=DefaultDataType.getDataType(configuration.family(),type,precision,scale);
        if (dataType.hasPrecision()) {
          dataType=dataType.precision(precision);
        }
        if (dataType.hasScale()) {
          dataType=dataType.scale(scale);
        }
        if (dataType.hasLength()) {
          dataType=dataType.length(precision);
        }
      }
 catch (      SQLDialectNotSupportedException ignore) {
        log.debug("Not supported by dialect",ignore.getMessage());
      }
      fields[i - 1]=field(name,dataType);
    }
  }
 catch (  SQLException e) {
    throw Tools.translate(null,e);
  }
  return new Fields<Record>(fields);
}
