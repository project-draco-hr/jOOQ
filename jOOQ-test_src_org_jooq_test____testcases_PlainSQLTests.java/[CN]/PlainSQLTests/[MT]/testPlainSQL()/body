{
  jOOQAbstractTest.reset=false;
  Field<Integer> ID=field(TBook_ID().getName(),Integer.class);
  Result<Record> result=create().select().from("t_book").orderBy(ID).fetch();
  assertEquals(4,result.size());
  assertEquals(BOOK_IDS,result.getValues(ID));
  assertEquals(BOOK_TITLES,result.getValues(TBook_TITLE()));
  Result<Record1<Integer>> result2=create().select(ID).from("(select * from t_book) b").orderBy(ID).fetch();
  assertEquals(4,result2.size());
  assertEquals(BOOK_IDS,result2.getValues(ID));
  Result<Record> result3=create().select().from("(select * from t_book) b").orderBy(ID).fetch();
  assertEquals(4,result3.size());
  assertEquals(Arrays.asList(1,2,3,4),result3.getValues(ID));
  Result<Record> result4=create().select().from(table("t_book").as("b")).orderBy(ID).fetch();
  assertEquals(4,result4.size());
  assertEquals(BOOK_IDS,result4.getValues(ID));
  Result<Record> result5=create().select().from(table("(select * from t_book)").as("b")).orderBy(ID).fetch();
  assertEquals(4,result5.size());
  assertEquals(Arrays.asList(1,2,3,4),result5.getValues(ID));
  Field<?> LAST_NAME=field(TAuthor_LAST_NAME().getName());
  Field<?> COUNT1=field("count(*) x");
  Field<?> COUNT2=field("count(*) y",Integer.class);
  Result<?> result6=create().select(LAST_NAME,COUNT1,COUNT2).from("t_author a").join("t_book b").on("a.id = b.author_id").where("b.title != 'Brida'").groupBy(LAST_NAME).orderBy(LAST_NAME).fetch();
  assertEquals(2,result6.size());
  assertEquals("Coelho",result6.getValue(0,LAST_NAME));
  assertEquals("Orwell",result6.getValue(1,LAST_NAME));
  assertEquals("1",result6.get(0).getValue(COUNT1,String.class));
  assertEquals("2",result6.get(1).getValue(COUNT1,String.class));
  assertEquals(Integer.valueOf(1),result6.getValue(0,COUNT2));
  assertEquals(Integer.valueOf(2),result6.getValue(1,COUNT2));
  Result<?> result7=create().select(LAST_NAME,COUNT1,COUNT2).from("t_author a").join("t_book b").on("a.id = b.author_id").where("b.title != 'Brida'").groupBy(LAST_NAME).having("{count}(*) = ?",1).fetch();
  assertEquals(1,result7.size());
  assertEquals("Coelho",result7.getValue(0,LAST_NAME));
  assertEquals("1",result7.get(0).getValue(COUNT1,String.class));
  assertEquals(Integer.valueOf(1),result7.getValue(0,COUNT2));
  assertEquals(1,create().query("insert into t_author (id, first_name, last_name) values (?, ?, ?)",3,"Mich??le","Roten").execute());
  A author=create().fetchOne(TAuthor(),TAuthor_ID().equal(3));
  assertEquals(Integer.valueOf(3),author.getValue(TAuthor_ID()));
  assertEquals("Mich??le",author.getValue(TAuthor_FIRST_NAME()));
  assertEquals("Roten",author.getValue(TAuthor_LAST_NAME()));
  assertEquals(1,create().query("update t_author set first_name = ? where id = 3",(Object[])null).execute());
  author.refresh();
  assertEquals(Integer.valueOf(3),author.getValue(TAuthor_ID()));
  assertEquals(null,author.getValue(TAuthor_FIRST_NAME()));
  assertEquals("Roten",author.getValue(TAuthor_LAST_NAME()));
  assertEquals(1,create().query("update t_author set first_name = ? where id = 3","Mich??le").execute());
  author.refresh();
  assertEquals(Integer.valueOf(3),author.getValue(TAuthor_ID()));
  assertEquals("Mich??le",author.getValue(TAuthor_FIRST_NAME()));
  assertEquals("Roten",author.getValue(TAuthor_LAST_NAME()));
  assertEquals(1,create().query("update t_author set first_name = ? where id = 3",(Object)null).execute());
  author.refresh();
  assertEquals(Integer.valueOf(3),author.getValue(TAuthor_ID()));
  assertEquals(null,author.getValue(TAuthor_FIRST_NAME()));
  assertEquals("Roten",author.getValue(TAuthor_LAST_NAME()));
  assertEquals("ABC",create().select(function("upper",String.class,val("aBc"))).fetchOne(0));
  assertEquals("abc",create().select(function("lower",SQLDataType.VARCHAR,val("aBc"))).fetchOne(0));
  Result<Record> books=create().fetch("select * from t_book where id in (?, ?) order by id",1,2);
  assertNotNull(books);
  assertEquals(2,books.size());
  assertEquals(Integer.valueOf(1),books.getValue(0,TBook_ID()));
  assertEquals(Integer.valueOf(2),books.getValue(1,TBook_ID()));
  assertEquals(Integer.valueOf(1),books.getValue(0,TBook_AUTHOR_ID()));
  assertEquals(Integer.valueOf(1),books.getValue(1,TBook_AUTHOR_ID()));
}
