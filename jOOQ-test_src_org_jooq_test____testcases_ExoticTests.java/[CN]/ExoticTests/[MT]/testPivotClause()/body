{
switch (getDialect()) {
case ASE:
case DB2:
case DERBY:
case H2:
case HSQLDB:
case INGRES:
case MYSQL:
case POSTGRES:
case SQLITE:
case SQLSERVER:
case SYBASE:
    log.info("SKIPPING","PIVOT clause tests");
  return;
}
Result<Record> result1=create().select().from(TBookToBookStore().pivot(count()).on(TBookToBookStore_BOOK_STORE_NAME()).in("Orell F??ssli","Ex Libris","Buchhandlung im Volkshaus")).orderBy(literal(1).asc(),literal(2).asc()).fetch();
assertEquals(6,result1.size());
assertEquals(TBookToBookStore_BOOK_ID().getName(),result1.getField(0).getName());
assertEquals(TBookToBookStore_STOCK().getName(),result1.getField(1).getName());
assertTrue(result1.getField(2).getName().contains("Orell F??ssli"));
assertTrue(result1.getField(3).getName().contains("Ex Libris"));
assertTrue(result1.getField(4).getName().contains("Buchhandlung im Volkshaus"));
assertEquals(asList(1,1,0,1,0),asList(result1.get(0).into(Integer[].class)));
assertEquals(asList(1,10,1,0,0),asList(result1.get(1).into(Integer[].class)));
assertEquals(asList(2,10,1,0,0),asList(result1.get(2).into(Integer[].class)));
assertEquals(asList(3,1,0,0,1),asList(result1.get(3).into(Integer[].class)));
assertEquals(asList(3,2,0,1,0),asList(result1.get(4).into(Integer[].class)));
assertEquals(asList(3,10,1,0,0),asList(result1.get(5).into(Integer[].class)));
Result<Record> result2=create().select().from(TBookToBookStore().pivot(avg(TBookToBookStore_STOCK()).as("AVG"),max(TBookToBookStore_STOCK()).as("MAX"),sum(TBookToBookStore_STOCK()).as("SUM"),count(TBookToBookStore_STOCK()).as("CNT")).on(TBookToBookStore_BOOK_STORE_NAME()).in(val("Orell F??ssli").as("BS1"),val("Ex Libris").as("BS2"),val("Buchhandlung im Volkshaus").as("BS3"))).orderBy(val(1).asc()).fetch();
assertEquals(3,result2.size());
assertEquals(TBookToBookStore_BOOK_ID().getName(),result2.getField(0).getName());
assertEquals("BS1_AVG",result2.getField(1).getName());
assertEquals("BS1_MAX",result2.getField(2).getName());
assertEquals("BS1_SUM",result2.getField(3).getName());
assertEquals("BS1_CNT",result2.getField(4).getName());
assertEquals("BS2_AVG",result2.getField(5).getName());
assertEquals("BS2_MAX",result2.getField(6).getName());
assertEquals("BS2_SUM",result2.getField(7).getName());
assertEquals("BS2_CNT",result2.getField(8).getName());
assertEquals("BS3_AVG",result2.getField(9).getName());
assertEquals("BS3_MAX",result2.getField(10).getName());
assertEquals("BS3_SUM",result2.getField(11).getName());
assertEquals("BS3_CNT",result2.getField(12).getName());
assertEquals(asList(1,10,10,10,1,1,1,1,1,null,null,null,0),asList(result2.get(0).into(Integer[].class)));
assertEquals(asList(2,10,10,10,1,null,null,null,0,null,null,null,0),asList(result2.get(1).into(Integer[].class)));
assertEquals(asList(3,10,10,10,1,2,2,2,1,1,1,1,1),asList(result2.get(2).into(Integer[].class)));
Field<Integer> lang=TBook_LANGUAGE_ID().cast(Integer.class).as("lang");
Result<Record> result3=create().select().from(table(create().select(TBook_AUTHOR_ID(),lang).from(TBook())).pivot(count()).on(lang).in(1,2,3,4)).fetch();
assertEquals(2,result3.size());
assertEquals(5,result3.getFields().size());
assertEquals(AUTHOR_IDS,result3.getValues(0));
assertEquals(asList(1,2,0,0,0),asList(result3.get(0).into(Integer[].class)));
}
