{
  SQLDialect family=context.configuration().dialect().family();
  Converter<?,?> converter=DataTypes.converter(type);
  if (converter != null) {
    val=((Converter)converter).to(val);
    type=converter.fromType();
  }
  if (isInline(context)) {
    if (val == null) {
      context.keyword("null");
    }
 else     if (type == Boolean.class) {
      if (asList(ASE,DB2,FIREBIRD,ORACLE,SQLSERVER,SQLITE,SYBASE).contains(family)) {
        context.sql(((Boolean)val) ? "1" : "0");
      }
 else {
        context.keyword(((Boolean)val).toString());
      }
    }
 else     if (type == byte[].class) {
      byte[] binary=(byte[])val;
      if (asList(ASE,SQLSERVER,SYBASE).contains(family)) {
        context.sql("0x").sql(convertBytesToHex(binary));
      }
 else       if (family == DB2) {
        context.keyword("blob").sql("(X'").sql(convertBytesToHex(binary)).sql("')");
      }
 else       if (asList(DERBY,H2,HSQLDB,INGRES,MARIADB,MYSQL,SQLITE).contains(family)) {
        context.sql("X'").sql(convertBytesToHex(binary)).sql("'");
      }
 else       if (asList(ORACLE).contains(family)) {
        context.keyword("hextoraw('").sql(convertBytesToHex(binary)).sql("')");
      }
 else       if (family == POSTGRES) {
        context.sql("E'").sql(convertBytesToPostgresOctal(binary)).keyword("'::bytea");
      }
 else {
        context.sql("X'").sql(convertBytesToHex(binary)).sql("'");
      }
    }
 else     if (Interval.class.isAssignableFrom(type)) {
      context.sql("'").sql(escape(val)).sql("'");
    }
 else     if (Number.class.isAssignableFrom(type)) {
      context.sql(((Number)val).toString());
    }
 else     if (type == Date.class) {
      if (asList(ASE,SQLITE,SQLSERVER,SYBASE).contains(family)) {
        context.sql("'").sql(escape(val)).sql("'");
      }
 else       if (family == DERBY) {
        context.keyword("date('").sql(escape(val)).sql("')");
      }
 else {
        context.keyword("date '").sql(escape(val)).sql("'");
      }
    }
 else     if (type == Timestamp.class) {
      if (asList(ASE,SQLITE,SQLSERVER,SYBASE).contains(family)) {
        context.sql("'").sql(escape(val)).sql("'");
      }
 else       if (family == DERBY) {
        context.keyword("timestamp('").sql(escape(val)).sql("')");
      }
 else       if (family == CUBRID) {
        context.keyword("datetime '").sql(escape(val)).sql("'");
      }
 else {
        context.keyword("timestamp '").sql(escape(val)).sql("'");
      }
    }
 else     if (type == Time.class) {
      if (asList(ASE,SQLITE,SQLSERVER,SYBASE).contains(family)) {
        context.sql("'").sql(escape(val)).sql("'");
      }
 else       if (family == DERBY) {
        context.keyword("time('").sql(escape(val)).sql("')");
      }
 else       if (family == ORACLE) {
        context.keyword("timestamp '1970-01-01 ").sql(escape(val)).sql("'");
      }
 else {
        context.keyword("time '").sql(escape(val)).sql("'");
      }
    }
 else     if (type.isArray()) {
      String separator="";
      if (family == H2) {
        context.sql("(");
        for (        Object o : ((Object[])val)) {
          context.sql(separator);
          toSQL(context,o,type.getComponentType());
          separator=", ";
        }
        context.sql(")");
      }
 else {
        context.keyword("ARRAY");
        context.sql("[");
        for (        Object o : ((Object[])val)) {
          context.sql(separator);
          toSQL(context,o,type.getComponentType());
          separator=", ";
        }
        context.sql("]");
      }
    }
 else     if (ArrayRecord.class.isAssignableFrom(type)) {
      context.sql(val.toString(),true);
    }
 else     if (EnumType.class.isAssignableFrom(type)) {
      toSQL(context,((EnumType)val).getLiteral());
    }
 else     if (UDTRecord.class.isAssignableFrom(type)) {
      context.sql("[UDT]");
    }
 else {
      context.sql("'").sql(escape(val),true).sql("'");
    }
  }
 else   if (family == SQLDialect.POSTGRES) {
    if (type.isArray() && byte[].class != type) {
      context.sql(getBindVariable(context));
      context.sql("::");
      context.keyword(DefaultDataType.getDataType(family,type).getCastTypeName(context.configuration()));
    }
 else     if (EnumType.class.isAssignableFrom(type)) {
      context.sql(getBindVariable(context));
      EnumType e=(EnumType)type.getEnumConstants()[0];
      Schema schema=e.getSchema();
      if (schema != null) {
        context.sql("::");
        schema=using(context.configuration()).map(schema);
        if (schema != null && TRUE.equals(context.configuration().settings().isRenderSchema())) {
          context.sql(schema);
          context.sql(".");
        }
        context.sql(name(e.getName()));
      }
    }
 else {
      context.sql(getBindVariable(context));
    }
  }
 else {
    context.sql(getBindVariable(context));
  }
}
