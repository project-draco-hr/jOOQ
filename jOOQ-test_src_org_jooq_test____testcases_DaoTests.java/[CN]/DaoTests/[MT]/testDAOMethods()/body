{
  if (TAuthorDao() == null) {
    log.info("SKIPPING","DAO tests");
    return;
  }
  jOOQAbstractTest.reset=false;
  Class<AP> type=TAuthorDao().getType();
  assertEquals(2,TAuthorDao().count());
  assertEquals(2,TAuthorDao().findAll().size());
  AP id1=TAuthorDao().findById(1);
  assertEquals(1,on(id1).get("id"));
  assertEquals("George",on(id1).get("firstName"));
  assertEquals("Orwell",on(id1).get("lastName"));
  assertTrue(TAuthorDao().exists(on(type).create().set("id",1).<AP>get()));
  assertTrue(TAuthorDao().existsById(1));
  assertNull(TAuthorDao().findById(17));
  AP author=on(type).create().set("id",3).set("lastName","Hesse").<AP>get();
  TAuthorDao().insert(author);
  assertEquals(3,TAuthorDao().count());
  AP id3=TAuthorDao().findById(3);
  assertEquals(3,on(id3).get("id"));
  assertEquals(null,on(id3).get("firstName"));
  assertEquals("Hesse",on(id3).get("lastName"));
  author=on(author).set("firstName","Hermann").<AP>get();
  TAuthorDao().update(author);
  id3=TAuthorDao().findById(3);
  assertEquals(3,TAuthorDao().count());
  assertEquals(3,on(id3).get("id"));
  assertEquals("Hermann",on(id3).get("firstName"));
  assertEquals("Hesse",on(id3).get("lastName"));
  TAuthorDao().delete(author);
  assertEquals(2,TAuthorDao().count());
  List<AP> authors=asList(on(type).create().set("id",4).set("lastName","Koontz").<AP>get(),on(type).create().set("id",5).set("lastName","Hitchcock").<AP>get());
  TAuthorDao().insert(authors);
  AP id4=TAuthorDao().findById(4);
  AP id5=TAuthorDao().findById(5);
  assertEquals(4,TAuthorDao().count());
  assertEquals(4,on(id4).get("id"));
  assertEquals(null,on(id4).get("firstName"));
  assertEquals("Koontz",on(id4).get("lastName"));
  assertEquals(5,on(id5).get("id"));
  assertEquals(null,on(id5).get("firstName"));
  assertEquals("Hitchcock",on(id5).get("lastName"));
  id4=on(id4).set("firstName","Dean").<AP>get();
  id5=on(id5).set("firstName","Alfred").<AP>get();
  TAuthorDao().update(id4,id5);
  id4=TAuthorDao().findById(4);
  id5=TAuthorDao().findById(5);
  assertEquals(4,TAuthorDao().count());
  assertEquals(4,on(id4).get("id"));
  assertEquals("Dean",on(id4).get("firstName"));
  assertEquals("Koontz",on(id4).get("lastName"));
  assertEquals(5,on(id5).get("id"));
  assertEquals("Alfred",on(id5).get("firstName"));
  assertEquals("Hitchcock",on(id5).get("lastName"));
}
