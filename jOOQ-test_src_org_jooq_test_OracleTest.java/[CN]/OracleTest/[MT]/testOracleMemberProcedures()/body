{
  jOOQAbstractTest.reset=false;
  UAuthorTypeRecord author1;
  UAuthorTypeRecord author2;
  author1=new UAuthorTypeRecord();
  author1.setId(1);
  author2=load(create(),author1);
  assertEquals(1,(int)author1.getId());
  assertEquals(1,(int)author2.getId());
  assertNull(author1.getFirstName());
  assertEquals("George",author2.getFirstName());
  assertNull(author1.getLastName());
  assertEquals("Orwell",author2.getLastName());
  author1=create().newRecord(U_AUTHOR_TYPE);
  author1.setId(1);
  author2=author1.load();
  assertEquals(1,(int)author1.getId());
  assertEquals(1,(int)author2.getId());
  assertEquals("George",author1.getFirstName());
  assertEquals("George",author2.getFirstName());
  assertEquals("Orwell",author1.getLastName());
  assertEquals("Orwell",author2.getLastName());
  author1=create().newRecord(U_AUTHOR_TYPE);
  assertEquals(BigDecimal.ZERO,author1.countBooks());
  assertEquals(BigDecimal.ZERO,create().select(countBooks(author1)).fetchOne(0));
  author1=create().newRecord(U_AUTHOR_TYPE);
  author1.setId(1);
  assertEquals(new BigDecimal("2"),author1.countBooks());
  assertEquals(new BigDecimal("2"),create().select(countBooks(author1)).fetchOne(0));
  author1=create().newRecord(U_AUTHOR_TYPE);
  GetBooks noBooks=author1.getBooks();
  assertNull(noBooks.getBook1().getId());
  assertNull(noBooks.getBook1().getTitle());
  assertNull(noBooks.getBook2().getId());
  assertNull(noBooks.getBook2().getTitle());
  author1=create().newRecord(U_AUTHOR_TYPE);
  author1.setId(1);
  GetBooks books=author1.getBooks();
  assertEquals(1,(int)books.getBook1().getId());
  assertEquals("1984",books.getBook1().getTitle());
  assertEquals(2,(int)books.getBook2().getId());
  assertEquals("Animal Farm",books.getBook2().getTitle());
  assertEquals(1,(int)author1.getId());
  assertEquals("George",author1.getFirstName());
  assertEquals("Orwell",author1.getLastName());
  UAuthorTypeRecord author3=UAuthorType.newAuthor(create(),3,"first","last");
  assertEquals(3,(int)author3.getId());
  assertEquals("first",author3.getFirstName());
  assertEquals("last",author3.getLastName());
  UAuthorTypeRecord author4=UAuthorType.getAuthor(create(),3);
  assertEquals(author3,author4);
  assertEquals(3,(int)author4.getId());
  assertEquals("first",author4.getFirstName());
  assertEquals("last",author4.getLastName());
  UAuthorTypeRecord author5=create().select(UAuthorType.getAuthor(3)).fetchOne(UAuthorType.getAuthor(3));
  assertEquals(author3,author5);
  assertEquals(3,(int)author5.getId());
  assertEquals("first",author5.getFirstName());
  assertEquals("last",author5.getLastName());
}
