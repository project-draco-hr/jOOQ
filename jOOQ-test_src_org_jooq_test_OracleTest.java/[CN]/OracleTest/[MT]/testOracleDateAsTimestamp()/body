{
  jOOQAbstractTest.reset=false;
  Timestamp now=new Timestamp(System.currentTimeMillis() / 1000 * 1000);
  Timestamp later=new Timestamp(System.currentTimeMillis() / 1000 * 1000 + 1000);
  GregorianCalendar calNow=new GregorianCalendar();
  GregorianCalendar calLater=new GregorianCalendar();
  calNow.setTime(now);
  calLater.setTime(later);
  DateAsTimestampT_976Record record=create().newRecord(DATE_AS_TIMESTAMP_T_976);
  record.setId(1);
  assertEquals(1,record.store());
  assertNull(record.getD());
  assertNull(record.getT());
  assertNull(record.getO());
  record.refresh();
  assertNull(record.getD());
  assertNull(record.getT());
  assertNull(record.getO());
  assertEquals(record,create().fetchOne(DATE_AS_TIMESTAMP_T_976,DATE_AS_TIMESTAMP_T_976.DATE_AS_TIMESTAMP_ID.equal(1)));
  DateAsTimestampT_976ObjectTypeRecord o=create().newRecord(DATE_AS_TIMESTAMP_T_976_OBJECT_TYPE);
  o.setD(now);
  DateAsTimestampT_976VarrayTypeRecord t=new DateAsTimestampT_976VarrayTypeRecord(create().configuration());
  t.set(now,now);
  record=create().newRecord(DATE_AS_TIMESTAMP_T_976);
  record.setId(2);
  record.setD(now);
  record.setO(o);
  record.setT(t);
  record.store();
  assertEquals(record,create().fetchOne(DATE_AS_TIMESTAMP_T_976,DATE_AS_TIMESTAMP_T_976.DATE_AS_TIMESTAMP_ID.equal(2)));
  record.setD(later);
  o.setD(later);
  t.set(later,later,later);
  record.changed(DATE_AS_TIMESTAMP_T_976.DATE_AS_TIMESTAMP_O,true);
  record.changed(DATE_AS_TIMESTAMP_T_976.DATE_AS_TIMESTAMP_T,true);
  record.store();
  assertEquals(record,create().fetchOne(DATE_AS_TIMESTAMP_T_976,DATE_AS_TIMESTAMP_T_976.DATE_AS_TIMESTAMP_ID.equal(2)));
  assertEquals(now,org.jooq.test.oracle2.generatedclasses.Routines.p_976(create().configuration(),now));
  assertEquals(now,org.jooq.test.oracle2.generatedclasses.Routines.f_976(create().configuration(),now));
  assertEquals(now,create().select(org.jooq.test.oracle2.generatedclasses.Routines.f_976(now)).fetchOne(0));
  assertEquals(now,org.jooq.test.oracle2.generatedclasses.packages.DateAsTimestampPkg_976.p_976(create().configuration(),now));
  assertEquals(now,org.jooq.test.oracle2.generatedclasses.packages.DateAsTimestampPkg_976.f_976(create().configuration(),now));
  assertEquals(now,create().select(org.jooq.test.oracle2.generatedclasses.packages.DateAsTimestampPkg_976.f_976(now)).fetchOne(0));
  DateAsTimestampTDatesRecord dates=create().newRecord(DATE_AS_TIMESTAMP_T_DATES);
  dates.setTs(calNow);
  dates.setD(calNow);
  dates.setT(calNow);
  dates.setId(1);
  assertEquals(1,dates.store());
  dates=create().newRecord(DATE_AS_TIMESTAMP_T_DATES);
  dates.setId(1);
  dates.refresh();
  assertEqualCalendar(calNow,dates.getTs(),Calendar.YEAR,Calendar.MONTH,Calendar.DAY_OF_MONTH,Calendar.HOUR,Calendar.MINUTE,Calendar.SECOND,Calendar.MILLISECOND);
  assertEqualCalendar(calNow,dates.getD(),Calendar.YEAR,Calendar.MONTH,Calendar.DAY_OF_MONTH);
  assertEqualCalendar(calNow,dates.getT(),Calendar.HOUR,Calendar.MINUTE,Calendar.SECOND,Calendar.MILLISECOND);
}
