{
  super(new BorderLayout());
  setOpaque(false);
  JPanel loggerHeaderPanel=new JPanel(new BorderLayout());
  loggerHeaderPanel.setOpaque(false);
  JPanel loggerHeaderWestPanel=new JPanel(new FlowLayout(FlowLayout.LEFT,5,5));
  loggerHeaderWestPanel.setOpaque(false);
  loggerLogCheckBox=new JCheckBox("Log");
  loggerLogCheckBox.setOpaque(false);
  loggerLogCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      setLogging(e.getStateChange() == ItemEvent.SELECTED);
    }
  }
);
  loggerHeaderWestPanel.add(loggerLogCheckBox);
  JButton loggerClearButton=new JButton("Clear");
  loggerClearButton.setOpaque(false);
  loggerClearButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      queryDebuggingInfoList.clear();
      textArea.setText("");
      int originalRowCount=displayedQueryDebuggingInfoList.size();
      displayedQueryDebuggingInfoList.clear();
      queriesToCountMap.clear();
      if (originalRowCount > 0) {
        ((AbstractTableModel)table.getModel()).fireTableRowsDeleted(0,originalRowCount - 1);
      }
      updateStatusLabel();
    }
  }
);
  loggerHeaderWestPanel.add(loggerClearButton);
  JCheckBox loggerThreadCheckBox=new JCheckBox("Threads",true);
  loggerThreadCheckBox.setOpaque(false);
  loggerThreadCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isThreadDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_THREAD),isThreadDisplayed);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderWestPanel.add(loggerThreadCheckBox);
  JCheckBox loggerTimestampCheckBox=new JCheckBox("Timestamps",true);
  loggerTimestampCheckBox.setOpaque(false);
  loggerTimestampCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isTimestampDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_TIMESTAMP),isTimestampDisplayed);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderWestPanel.add(loggerTimestampCheckBox);
  JCheckBox loggerDurationCheckBox=new JCheckBox("Exec Time",true);
  loggerDurationCheckBox.setOpaque(false);
  loggerDurationCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isDurationDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_EXEC_TIME),isDurationDisplayed);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderWestPanel.add(loggerDurationCheckBox);
  JCheckBox preparedStatementDataCheckBox=new JCheckBox("PS Data",true);
  preparedStatementDataCheckBox.setOpaque(false);
  preparedStatementDataCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isPreparedStatementDataShown=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_PS_PREPARATION_DURATION),isPreparedStatementDataShown);
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_PS_BINDING_DURATION),isPreparedStatementDataShown);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderWestPanel.add(preparedStatementDataCheckBox);
  JCheckBox resultSetDataCheckBox=new JCheckBox("RS Data",true);
  resultSetDataCheckBox.setOpaque(false);
  resultSetDataCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isResultSetDataShown=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_RS_LIFETIME),isResultSetDataShown);
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_RS_READ),isResultSetDataShown);
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_RS_READ_ROWS),isResultSetDataShown);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderWestPanel.add(resultSetDataCheckBox);
  JCheckBox duplicationCountCheckBox=new JCheckBox("Duplication",true);
  duplicationCountCheckBox.setOpaque(false);
  duplicationCountCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isDuplicationCountShown=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_DUPLICATION_COUNT),isDuplicationCountShown);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderWestPanel.add(duplicationCountCheckBox);
  JCheckBox loggerReadQueryTypeCheckBox=new JCheckBox("Read",isReadQueryTypeDisplayed);
  loggerReadQueryTypeCheckBox.setOpaque(false);
  loggerReadQueryTypeCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      isReadQueryTypeDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      refreshRows();
    }
  }
);
  loggerHeaderWestPanel.add(loggerReadQueryTypeCheckBox);
  JCheckBox loggerWriteQueryTypeCheckBox=new JCheckBox("Write",isWriteQueryTypeDisplayed);
  loggerWriteQueryTypeCheckBox.setOpaque(false);
  loggerWriteQueryTypeCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      isWriteQueryTypeDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      refreshRows();
    }
  }
);
  loggerHeaderWestPanel.add(loggerWriteQueryTypeCheckBox);
  JCheckBox loggerOtherQueryTypeCheckBox=new JCheckBox("Other",isOtherQueryTypeDisplayed);
  loggerOtherQueryTypeCheckBox.setOpaque(false);
  loggerOtherQueryTypeCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      isOtherQueryTypeDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      refreshRows();
    }
  }
);
  loggerHeaderWestPanel.add(loggerOtherQueryTypeCheckBox);
  loggerHeaderPanel.add(loggerHeaderWestPanel,BorderLayout.WEST);
  JToggleButton scrollLockButton=new JToggleButton(new ImageIcon(getClass().getResource("resources/LockScroll16.png")));
  scrollLockButton.setMargin(new Insets(2,2,2,2));
  scrollLockButton.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      isScrollLocked=e.getStateChange() == ItemEvent.SELECTED;
    }
  }
);
  JPanel loggerHeaderEastPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT,5,5));
  loggerHeaderEastPanel.setOpaque(false);
  loggerHeaderEastPanel.add(scrollLockButton);
  loggerHeaderPanel.add(loggerHeaderEastPanel,BorderLayout.EAST);
  add(loggerHeaderPanel,BorderLayout.NORTH);
  table=new JTableX(new AbstractTableModel(){
    @Override public Object getValueAt(    int rowIndex,    int columnIndex){
      QueryDebuggingInfo queryDebuggingInfo=displayedQueryDebuggingInfoList.get(rowIndex);
switch (columnIndex) {
case COLUMN_LINE:
{
          return rowIndex + 1;
        }
case COLUMN_THREAD:
{
        return queryDebuggingInfo.getThreadName() + " [" + queryDebuggingInfo.getThreadId()+ "]";
      }
case COLUMN_TIMESTAMP:
{
      return TIMESTAMP_FORMAT.format(new Date(queryDebuggingInfo.getTimestamp()));
    }
case COLUMN_EXEC_TIME:
{
    long duration=queryDebuggingInfo.getExecutionDuration();
    return duration < 0 ? null : duration;
  }
case COLUMN_PS_PREPARATION_DURATION:
{
  Long duration=queryDebuggingInfo.getPrepardeStatementPreparationDuration();
  return duration == null ? null : duration;
}
case COLUMN_PS_BINDING_DURATION:
{
Long duration=queryDebuggingInfo.getPrepardeStatementBindingDuration();
return duration == null ? null : duration;
}
case COLUMN_RS_LIFETIME:
{
SqlQueryDebuggerResultSetData rsData=queryDebuggingInfo.getSqlQueryDebuggerResultSetData();
return rsData == null ? null : rsData.getLifeTime();
}
case COLUMN_RS_READ:
{
SqlQueryDebuggerResultSetData rsData=queryDebuggingInfo.getSqlQueryDebuggerResultSetData();
return rsData == null ? null : rsData.getReadCount();
}
case COLUMN_RS_READ_ROWS:
{
SqlQueryDebuggerResultSetData rsData=queryDebuggingInfo.getSqlQueryDebuggerResultSetData();
return rsData == null ? null : rsData.getReadRows();
}
case COLUMN_DUPLICATION_COUNT:
{
return queryDebuggingInfo.getDuplicationCount();
}
case COLUMN_QUERY:
{
StringBuilder querySB=new StringBuilder();
String[] queries=queryDebuggingInfo.getQueries();
for (int i=0; i < queries.length; i++) {
if (i > 0) {
querySB.append(LS);
}
String s=queries[i];
querySB.append(s.trim());
}
return querySB.toString();
}
}
return null;
}
@Override public int getRowCount(){
return displayedQueryDebuggingInfoList.size();
}
@Override public int getColumnCount(){
return COLUMN_COUNT;
}
@Override public String getColumnName(int column){
switch (column) {
case COLUMN_LINE:
return "Line";
case COLUMN_THREAD:
return "Thread";
case COLUMN_TIMESTAMP:
return "Timestamp";
case COLUMN_EXEC_TIME:
return "Exec time (ms)";
case COLUMN_PS_PREPARATION_DURATION:
return "PS preparation (ms)";
case COLUMN_PS_BINDING_DURATION:
return "PS binding (ms)";
case COLUMN_RS_LIFETIME:
return "RS lifetime (ms)";
case COLUMN_RS_READ:
return "RS read";
case COLUMN_RS_READ_ROWS:
return "RS rows";
case COLUMN_DUPLICATION_COUNT:
return "Duplic.";
case COLUMN_QUERY:
return "Query";
}
return null;
}
@Override public Class<?> getColumnClass(int columnIndex){
switch (columnIndex) {
case COLUMN_LINE:
return Integer.class;
case COLUMN_EXEC_TIME:
return Long.class;
case COLUMN_PS_PREPARATION_DURATION:
return Long.class;
case COLUMN_PS_BINDING_DURATION:
return Long.class;
case COLUMN_RS_LIFETIME:
return Long.class;
case COLUMN_RS_READ:
return Integer.class;
case COLUMN_RS_READ_ROWS:
return Integer.class;
case COLUMN_DUPLICATION_COUNT:
return Integer.class;
}
return super.getColumnClass(columnIndex);
}
}
);
registerTooltip();
table.setAutoCreateRowSorter(true);
table.getRowSorter().setSortKeys(Arrays.asList(new RowSorter.SortKey(COLUMN_LINE,SortOrder.ASCENDING)));
XTableColumnModel columnModel=new XTableColumnModel();
table.setColumnModel(columnModel);
table.createDefaultColumnsFromModel();
table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
columnModel.getColumnByModelIndex(COLUMN_LINE).setPreferredWidth(30);
columnModel.getColumnByModelIndex(COLUMN_TIMESTAMP).setPreferredWidth(80);
columnModel.getColumnByModelIndex(COLUMN_THREAD).setPreferredWidth(200);
columnModel.getColumnByModelIndex(COLUMN_DUPLICATION_COUNT).setPreferredWidth(40);
table.setColumnSelectionAllowed(true);
table.setFillsViewportHeight(true);
table.addMouseListener(new MouseAdapter(){
@Override public void mousePressed(MouseEvent e){
maybeShowPopup(e);
}
@Override public void mouseReleased(MouseEvent e){
maybeShowPopup(e);
}
private void maybeShowPopup(MouseEvent e){
if (e.isPopupTrigger()) {
Point location=e.getPoint();
int row=table.rowAtPoint(location);
if (row < 0) {
return;
}
int column=table.columnAtPoint(location);
if (column < 0) {
return;
}
if (!table.isCellSelected(row,column)) {
ListSelectionModel selectionModel=table.getSelectionModel();
selectionModel.clearSelection();
selectionModel.addSelectionInterval(row,row);
}
JPopupMenu popupMenu=new JPopupMenu();
int[] selectedRows=table.getSelectedRows();
final QueryDebuggingInfo[] selectedQueryDebuggingInfos=new QueryDebuggingInfo[selectedRows.length];
for (int i=0; i < selectedRows.length; i++) {
selectedQueryDebuggingInfos[i]=displayedQueryDebuggingInfoList.get(table.convertRowIndexToModel(selectedRows[i]));
}
if (selectedQueryDebuggingInfos.length > 0) {
JMenuItem copyToClipboardMenuItem=new JMenuItem("Copy " + (selectedQueryDebuggingInfos.length > 1 ? selectedQueryDebuggingInfos.length + " " : "") + "Statement"+ (selectedQueryDebuggingInfos.length == 1 ? "" : "s")+ " to Clipboard");
copyToClipboardMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
copyToClipboard(selectedQueryDebuggingInfos);
}
}
);
popupMenu.add(copyToClipboardMenuItem);
}
if (displayedQueryDebuggingInfoList.size() > 0) {
JMenuItem copyAllToClipboardMenuItem=new JMenuItem("Copy All Statements (" + displayedQueryDebuggingInfoList.size() + ") to Clipboard");
copyAllToClipboardMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
copyToClipboard(displayedQueryDebuggingInfoList.toArray(new QueryDebuggingInfo[0]));
}
}
);
popupMenu.add(copyAllToClipboardMenuItem);
}
if (selectedQueryDebuggingInfos.length == 1) {
JMenuItem dumpStackMenuItem=new JMenuItem("Dump Statement Call Stack");
dumpStackMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
selectedQueryDebuggingInfos[0].getThrowable().printStackTrace();
}
}
);
popupMenu.add(dumpStackMenuItem);
JMenuItem copyStackToClipboardMenuItem=new JMenuItem("Copy Statement Call Stack to Clipboard");
copyStackToClipboardMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
StringWriter sw=new StringWriter();
selectedQueryDebuggingInfos[0].getThrowable().printStackTrace(new PrintWriter(sw));
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
clipboard.setContents(new StringSelection(sw.toString()),null);
}
}
);
popupMenu.add(copyStackToClipboardMenuItem);
}
if (popupMenu.getComponentCount() > 0) {
popupMenu.show(table,e.getX(),e.getY());
}
}
}
}
);
table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
@Override public void valueChanged(ListSelectionEvent e){
if (e.getValueIsAdjusting()) {
return;
}
int[] selectedRows=table.getSelectedRows();
String text;
if (selectedRows.length > 30) {
text="(Too many selected rows)";
}
 else {
StringBuilder sb=new StringBuilder();
for (int row : selectedRows) {
row=table.convertRowIndexToModel(row);
QueryDebuggingInfo queryDebuggingInfo=displayedQueryDebuggingInfoList.get(row);
for (String query : queryDebuggingInfo.getQueries()) {
sb.append(query.trim()).append(LS);
}
}
text=sb.toString();
}
if (!text.equals(textArea.getText())) {
textArea.setText(text);
textArea.setCaretPosition(0);
}
updateStatusLabel();
}
}
);
textArea=new SqlTextArea();
final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,new JScrollPane(table),new JScrollPane(textArea));
splitPane.setResizeWeight(1);
SwingUtilities.invokeLater(new Runnable(){
@Override public void run(){
splitPane.setDividerLocation(splitPane.getHeight() - 100);
}
}
);
add(splitPane,BorderLayout.CENTER);
loggerStatusLabel=new JLabel();
updateStatusLabel();
add(loggerStatusLabel,BorderLayout.SOUTH);
preparedStatementDataCheckBox.setSelected(false);
resultSetDataCheckBox.setSelected(false);
duplicationCountCheckBox.setSelected(false);
loggerTimestampCheckBox.setSelected(false);
loggerDurationCheckBox.setSelected(false);
loggerThreadCheckBox.setSelected(false);
}
