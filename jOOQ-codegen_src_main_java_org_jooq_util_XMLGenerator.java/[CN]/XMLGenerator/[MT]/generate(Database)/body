{
  StopWatch watch=new StopWatch();
  log.info("Database parameters");
  log.info("----------------------------------------------------------");
  log.info("  dialect",database.getDialect());
  log.info("  target dir",getTargetDirectory());
  log.info("----------------------------------------------------------");
  log.info("");
  log.info("XMLGenerator parameters");
  log.info("----------------------------------------------------------");
  log.info("  N/A");
  log.info("----------------------------------------------------------");
  InformationSchemaType is=new InformationSchemaType();
  for (  SchemaDefinition schema : database.getSchemata()) {
    SchemataRecordType record=new SchemataRecordType();
    record.setSCHEMANAME(schema.getOutputName());
    is.getSCHEMATA().add(record);
  }
  for (  TableDefinition table : database.getTables(null)) {
    TablesRecordType rec=new TablesRecordType();
    SchemaDefinition schema=table.getSchema();
    if (schema != null) {
      rec.setTABLESCHEMA(schema.getOutputName());
    }
    rec.setTABLENAME(table.getOutputName());
    is.getTABLES().add(rec);
    for (    ColumnDefinition column : table.getColumns()) {
      ColumnsRecordType record=new ColumnsRecordType();
      if (schema != null) {
        record.setTABLESCHEMA(schema.getOutputName());
      }
      record.setTABLENAME(table.getOutputName());
      record.setCOLUMNNAME(column.getOutputName());
      record.setORDINALPOSITION(column.getPosition());
      record.setISIDENTITY(yn(column.isIdentity()));
      record.setISNULLABLE(yn(column.isNullable()));
      is.getCOLUMNS().add(record);
    }
    for (    UniqueKeyDefinition uniqueKey : table.getUniqueKeys()) {
      TableConstraintsRecordType record=new TableConstraintsRecordType();
      if (schema != null) {
        record.setCONSTRAINTSCHEMA(schema.getOutputName());
        record.setTABLESCHEMA(schema.getOutputName());
      }
      record.setCONSTRAINTNAME(uniqueKey.getName());
      record.setCONSTRAINTTYPE(uniqueKey.isPrimaryKey() ? ConstraintType.PRIMARY_KEY : ConstraintType.UNIQUE);
      record.setTABLENAME(table.getOutputName());
      is.getTABLECONSTRAINTS().add(record);
    }
    for (    ForeignKeyDefinition foreignKey : table.getForeignKeys()) {
      TableConstraintsRecordType record=new TableConstraintsRecordType();
      if (schema != null) {
        record.setCONSTRAINTSCHEMA(schema.getOutputName());
        record.setTABLESCHEMA(schema.getOutputName());
      }
      record.setCONSTRAINTNAME(foreignKey.getName());
      record.setCONSTRAINTTYPE(ConstraintType.FOREIGN_KEY);
      record.setTABLENAME(table.getOutputName());
      is.getTABLECONSTRAINTS().add(record);
    }
    for (    UniqueKeyDefinition uniqueKey : table.getUniqueKeys()) {
      for (      ColumnDefinition column : uniqueKey.getKeyColumns()) {
        KeyColumnUsageRecordType record=new KeyColumnUsageRecordType();
        if (schema != null) {
          record.setCONSTRAINTSCHEMA(schema.getOutputName());
          record.setTABLESCHEMA(schema.getOutputName());
        }
        record.setTABLENAME(table.getOutputName());
        record.setCOLUMNNAME(column.getName());
        record.setCONSTRAINTNAME(uniqueKey.getName());
        record.setORDINALPOSITION(column.getPosition());
        is.getKEYCOLUMNUSAGE().add(record);
      }
    }
    for (    ForeignKeyDefinition foreignKey : table.getForeignKeys()) {
      for (      ColumnDefinition column : foreignKey.getKeyColumns()) {
        KeyColumnUsageRecordType record=new KeyColumnUsageRecordType();
        if (schema != null) {
          record.setCONSTRAINTSCHEMA(schema.getOutputName());
          record.setTABLESCHEMA(schema.getOutputName());
        }
        record.setTABLENAME(table.getOutputName());
        record.setCOLUMNNAME(column.getName());
        record.setCONSTRAINTNAME(foreignKey.getName());
        is.getKEYCOLUMNUSAGE().add(record);
      }
    }
    for (    ForeignKeyDefinition foreignKey : table.getForeignKeys()) {
      UniqueKeyDefinition uniqueKey=foreignKey.getReferencedKey();
      ReferentialConstraintsRecordType record=new ReferentialConstraintsRecordType();
      if (schema != null) {
        record.setCONSTRAINTSCHEMA(schema.getOutputName());
        record.setUNIQUECONSTRAINTSCHEMA(uniqueKey.getSchema().getOutputName());
      }
      record.setCONSTRAINTNAME(foreignKey.getName());
      record.setUNIQUECONSTRAINTNAME(uniqueKey.getName());
      is.getREFERENTIALCONSTRAINTS().add(record);
    }
  }
  for (  SequenceDefinition sequence : database.getSequences(null)) {
    SequencesRecordType record=new SequencesRecordType();
    SchemaDefinition schema=sequence.getSchema();
    if (schema != null) {
      record.setSEQUENCESCHEMA(schema.getOutputName());
    }
    record.setSEQUENCENAME(sequence.getOutputName());
    is.getSEQUENCES().add(record);
  }
  List<RoutineDefinition> routines=new ArrayList<RoutineDefinition>();
  routines.addAll(database.getRoutines(null));
  for (  PackageDefinition pkg : database.getPackages(null)) {
    routines.addAll(pkg.getRoutines());
  }
  for (  RoutineDefinition routine : routines) {
    RoutinesRecordType rec=new RoutinesRecordType();
    SchemaDefinition schema=routine.getSchema();
    if (schema != null) {
      rec.setROUTINESCHEMA(schema.getOutputName());
      rec.setSPECIFICSCHEMA(schema.getOutputName());
    }
    if (routine.getPackage() != null) {
      if (schema != null) {
        rec.setMODULESCHEMA(schema.getOutputName());
      }
      rec.setMODULENAME(routine.getPackage().getOutputName());
      rec.setSCHEMALEVELROUTINE(YesOrNoType.NO);
    }
 else {
      rec.setSCHEMALEVELROUTINE(YesOrNoType.YES);
    }
    rec.setROUTINENAME(routine.getOutputName());
    rec.setSPECIFICNAME(routine.getOutputName());
    int position=1;
    for (    ParameterDefinition parameter : routine.getAllParameters()) {
      ParametersRecordType record=new ParametersRecordType();
      if (schema != null) {
        record.setSPECIFICSCHEMA(schema.getOutputName());
      }
      record.setSPECIFICNAME(routine.getName());
      record.setPARAMETERNAME(parameter.getName());
      record.setORDINALPOSITION(position++);
      if (routine.getInParameters().contains(parameter)) {
        if (routine.getOutParameters().contains(parameter)) {
          record.setPARAMETERMODE(ParameterModeType.INOUT);
        }
 else {
          record.setPARAMETERMODE(ParameterModeType.IN);
        }
      }
 else {
        record.setPARAMETERMODE(ParameterModeType.OUT);
      }
      is.getPARAMETERS().add(record);
    }
    is.getROUTINES().add(rec);
  }
  store(is);
  watch.splitInfo("GENERATION FINISHED!");
}
