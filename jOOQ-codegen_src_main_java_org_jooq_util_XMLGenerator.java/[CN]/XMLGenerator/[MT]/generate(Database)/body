{
  logDatabaseParameters(db);
  log.info("");
  logGenerationRemarks(db);
  log.info("");
  log.info("----------------------------------------------------------");
  TextWriter out=new TextWriter(getStrategy().getFile("information_schema.xml"),targetEncoding);
  log.info("");
  log.info("Generating XML",out.file().getName());
  log.info("==========================================================");
  InformationSchema is=new InformationSchema();
  for (  CatalogDefinition c : db.getCatalogs()) {
    String catalogName=c.getOutputName();
    for (    SchemaDefinition s : c.getSchemata()) {
      String schemaName=s.getOutputName();
      Schema schema=new Schema();
      schema.setCatalogName(catalogName);
      schema.setSchemaName(schemaName);
      is.getSchemata().add(schema);
      for (      TableDefinition t : s.getTables()) {
        String tableName=t.getOutputName();
        Table table=new Table();
        table.setTableCatalog(catalogName);
        table.setTableSchema(schemaName);
        table.setTableName(tableName);
        is.getTables().add(table);
        for (        ColumnDefinition co : t.getColumns()) {
          String columnName=co.getOutputName();
          DataTypeDefinition type=co.getType();
          Column column=new Column();
          column.setTableCatalog(catalogName);
          column.setTableSchema(schemaName);
          column.setTableName(tableName);
          column.setColumnName(columnName);
          column.setCharacterMaximumLength(type.getLength());
          column.setColumnDefault(type.getDefaultValue());
          column.setDataType(type.getType());
          column.setIsNullable(column.isIsNullable());
          column.setNumericPrecision(type.getPrecision());
          column.setNumericScale(type.getScale());
          column.setOrdinalPosition(co.getPosition());
          is.getColumns().add(column);
        }
      }
      for (      UniqueKeyDefinition u : db.getUniqueKeys(s)) {
        String constraintName=u.getOutputName();
        TableDefinition table=u.getTable();
        List<ColumnDefinition> columns=u.getKeyColumns();
        TableConstraint constraint=new TableConstraint();
        constraint.setConstraintCatalog(catalogName);
        constraint.setConstraintSchema(schemaName);
        constraint.setConstraintName(constraintName);
        constraint.setConstraintType(u.isPrimaryKey() ? PRIMARY_KEY : UNIQUE);
        constraint.setTableCatalog(table.getCatalog().getOutputName());
        constraint.setTableSchema(table.getSchema().getOutputName());
        constraint.setTableName(table.getOutputName());
        is.getTableConstraints().add(constraint);
        for (int i=0; i < columns.size(); i++) {
          ColumnDefinition column=columns.get(i);
          KeyColumnUsage kc=new KeyColumnUsage();
          kc.setConstraintCatalog(catalogName);
          kc.setConstraintSchema(schemaName);
          kc.setConstraintName(constraintName);
          kc.setColumnName(column.getOutputName());
          kc.setOrdinalPosition(i);
          kc.setTableCatalog(table.getCatalog().getOutputName());
          kc.setTableSchema(table.getSchema().getOutputName());
          kc.setTableName(table.getOutputName());
          is.getKeyColumnUsages().add(kc);
        }
      }
      for (      ForeignKeyDefinition f : db.getForeignKeys(s)) {
        String constraintName=f.getOutputName();
        UniqueKeyDefinition referenced=f.getReferencedKey();
        TableDefinition table=f.getKeyTable();
        List<ColumnDefinition> columns=f.getKeyColumns();
        TableConstraint tc=new TableConstraint();
        tc.setConstraintCatalog(catalogName);
        tc.setConstraintSchema(schemaName);
        tc.setConstraintName(constraintName);
        tc.setConstraintType(FOREIGN_KEY);
        tc.setTableCatalog(table.getCatalog().getOutputName());
        tc.setTableSchema(table.getSchema().getOutputName());
        tc.setTableName(table.getOutputName());
        ReferentialConstraint rc=new ReferentialConstraint();
        rc.setConstraintCatalog(catalogName);
        rc.setConstraintSchema(schemaName);
        rc.setConstraintName(constraintName);
        rc.setUniqueConstraintCatalog(referenced.getOutputName());
        rc.setUniqueConstraintSchema(referenced.getSchema().getOutputName());
        rc.setUniqueConstraintName(referenced.getOutputName());
        is.getTableConstraints().add(tc);
        is.getReferentialConstraints().add(rc);
        for (int i=0; i < columns.size(); i++) {
          ColumnDefinition column=columns.get(i);
          KeyColumnUsage kc=new KeyColumnUsage();
          kc.setConstraintCatalog(catalogName);
          kc.setConstraintSchema(schemaName);
          kc.setConstraintName(constraintName);
          kc.setColumnName(column.getOutputName());
          kc.setOrdinalPosition(i);
          kc.setTableCatalog(table.getCatalog().getOutputName());
          kc.setTableSchema(table.getSchema().getOutputName());
          kc.setTableName(table.getOutputName());
          is.getKeyColumnUsages().add(kc);
        }
      }
      for (      CheckConstraintDefinition ch : db.getCheckConstraints(s)) {
        String constraintName=ch.getOutputName();
        TableDefinition table=ch.getTable();
        TableConstraint constraint=new TableConstraint();
        constraint.setConstraintCatalog(catalogName);
        constraint.setConstraintSchema(schemaName);
        constraint.setConstraintName(constraintName);
        constraint.setConstraintType(CHECK);
        constraint.setTableCatalog(table.getCatalog().getOutputName());
        constraint.setTableSchema(table.getSchema().getOutputName());
        constraint.setTableName(table.getOutputName());
        is.getTableConstraints().add(constraint);
      }
      for (      SequenceDefinition se : db.getSequences(s)) {
        String sequenceName=se.getOutputName();
        DataTypeDefinition type=se.getType();
        Sequence sequence=new Sequence();
        sequence.setSequenceCatalog(catalogName);
        sequence.setSequenceSchema(schemaName);
        sequence.setSequenceName(sequenceName);
        sequence.setCharacterMaximumLength(type.getLength());
        sequence.setDataType(type.getType());
        sequence.setNumericPrecision(type.getPrecision());
        sequence.setNumericScale(type.getScale());
        is.getSequences().add(sequence);
      }
    }
  }
  StringWriter writer=new StringWriter();
  JAXB.marshal(is,writer);
  out.print(writer.toString());
  out.close();
}
