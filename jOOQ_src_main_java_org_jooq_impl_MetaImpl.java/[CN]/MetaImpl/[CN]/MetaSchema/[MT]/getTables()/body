{
  Result<Record> tables=meta(new MetaFunction(){
    @Override public Result<Record> run(    DatabaseMetaData meta) throws SQLException {
      String[] types=null;
switch (configuration.family()) {
case POSTGRES:
        types=new String[]{"TABLE","VIEW","SYSTEM_TABLE","SYSTEM_VIEW","MATERIALIZED VIEW"};
      break;
case SQLITE:
    types=new String[]{"TABLE","VIEW"};
  break;
}
ResultSet rs;
if (!inverseSchemaCatalog) {
rs=meta.getTables(null,getName(),"%",types);
}
 else {
rs=meta.getTables(getName(),null,"%",types);
}
return create.fetch(rs,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR,SQLDataType.VARCHAR);
}
}
);
List<Table<?>> result=new ArrayList<Table<?>>();
for (Record table : tables) {
String catalog=table.get(0,String.class);
String schema=table.get(1,String.class);
String name=table.get(2,String.class);
result.add(new MetaTable(name,this,getColumns(inverseSchemaCatalog ? catalog : schema,name)));
}
return result;
}
