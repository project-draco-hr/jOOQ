{
  List<ForeignKey<?,Record>> references=new ArrayList<ForeignKey<?,Record>>();
  Result<Record> result=meta(new MetaFunction(){
    @Override public Result<Record> run(    DatabaseMetaData meta) throws SQLException {
      ResultSet rs=meta.getExportedKeys(null,pkTable.getSchema().getName(),pkTable.getName());
      return create.fetch(rs,String.class,String.class,String.class,String.class,String.class,String.class,String.class,String.class,Short.class,Short.class,Short.class,String.class,String.class);
    }
  }
);
  Map<Record,Result<Record>> groups=result.intoGroups(new Field[]{result.field(inverseSchemaCatalog ? 5 : 4),result.field(inverseSchemaCatalog ? 4 : 5),result.field(6),result.field(11),result.field(12)});
  Map<String,Schema> schemas=new HashMap<String,Schema>();
  for (  Schema schema : getSchemas()) {
    schemas.put(schema.getName(),schema);
  }
  for (  Entry<Record,Result<Record>> entry : groups.entrySet()) {
    Schema schema=schemas.get(entry.getKey().get(1));
    Table<Record> fkTable=(Table<Record>)schema.getTable(entry.getKey().get(2,String.class));
    TableField<Record,?>[] fkFields=new TableField[entry.getValue().size()];
    for (int i=0; i < entry.getValue().size(); i++) {
      Record record=entry.getValue().get(i);
      fkFields[i]=(TableField<Record,?>)fkTable.field(record.get(7,String.class));
    }
    references.add(new ReferenceImpl<Record,Record>(this,fkTable,fkFields));
  }
  return references;
}
