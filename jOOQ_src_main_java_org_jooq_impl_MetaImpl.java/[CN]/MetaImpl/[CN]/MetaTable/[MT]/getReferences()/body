{
  List<ForeignKey<Record,?>> references=new ArrayList<ForeignKey<Record,?>>();
  Result<Record> result=meta(new MetaFunction(){
    @Override public Result<Record> run(    DatabaseMetaData meta) throws SQLException {
      ResultSet rs=meta.getImportedKeys(null,getSchema().getName(),getName());
      return create.fetch(rs,String.class,String.class,String.class,String.class,String.class,String.class,String.class,String.class,Short.class,Short.class,Short.class,String.class,String.class);
    }
  }
);
  Map<Record,Result<Record>> groups=result.intoGroups(new Field[]{result.field(inverseSchemaCatalog ? 1 : 0),result.field(inverseSchemaCatalog ? 0 : 1),result.field(2),result.field(11),result.field(12)});
  Map<String,Schema> schemas=new HashMap<String,Schema>();
  for (  Schema schema : getSchemas()) {
    schemas.put(schema.getName(),schema);
  }
  for (  Entry<Record,Result<Record>> entry : groups.entrySet()) {
    Schema schema=schemas.get(entry.getKey().get(1));
    String pkName=entry.getKey().get(4,String.class);
    Table<Record> pkTable=(Table<Record>)schema.getTable(entry.getKey().get(2,String.class));
    TableField<Record,?>[] pkFields=new TableField[entry.getValue().size()];
    TableField<Record,?>[] fkFields=new TableField[entry.getValue().size()];
    for (int i=0; i < entry.getValue().size(); i++) {
      Record record=entry.getValue().get(i);
      pkFields[i]=(TableField<Record,?>)pkTable.field(record.get(3,String.class));
      fkFields[i]=(TableField<Record,?>)field(record.get(7,String.class));
    }
    references.add(new ReferenceImpl<Record,Record>(new MetaPrimaryKey(pkTable,pkName,pkFields),this,fkFields));
  }
  return references;
}
