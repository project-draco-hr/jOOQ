{
switch (dialect().family()) {
case DERBY:
case FIREBIRD:
case H2:
case HSQLDB:
case MARIADB:
case MYSQL:
case POSTGRES:
case SQLITE:
    log.info("SKIPPING","Connect by tests");
  return;
}
assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9),create().select(level()).connectBy(level().lessThan(10)).fetch(level()));
assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9),create().select(level()).connectByNoCycle(level().lessThan(10)).fetch(level()));
assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9),create().select(level()).connectBy(level().lessThan(10)).and("1 = ?",1).startWith("? = ?",1,1).fetch(level()));
assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9),create().select(level()).connectByNoCycle(level().lessThan(10)).and("1 = ?",1).startWith("? = ?",1,1).fetch(level()));
Result<Record3<Integer,Boolean,Boolean>> result=create().select(level(),connectByIsCycle(),connectByIsLeaf()).connectByNoCycle(level().lessThan(4)).fetch();
assertEquals(Integer.valueOf(1),result.getValue(0,level()));
assertEquals(Integer.valueOf(2),result.getValue(1,level()));
assertEquals(Integer.valueOf(3),result.getValue(2,level()));
assertEquals(Boolean.FALSE,result.getValue(0,connectByIsLeaf()));
assertEquals(Boolean.FALSE,result.getValue(1,connectByIsLeaf()));
assertEquals(Boolean.TRUE,result.getValue(2,connectByIsLeaf()));
assertEquals(Boolean.FALSE,result.getValue(0,connectByIsCycle()));
assertEquals(Boolean.FALSE,result.getValue(1,connectByIsCycle()));
assertEquals(Boolean.FALSE,result.getValue(2,connectByIsCycle()));
}
