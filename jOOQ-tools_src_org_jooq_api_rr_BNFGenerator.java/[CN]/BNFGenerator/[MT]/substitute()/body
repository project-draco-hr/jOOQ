{
  pruneLoop:   while (true) {
    String check="WindowPartitionByStep";
    Set<Edge> e=edgesTo.get(check);
    if (e != null) {
      System.err.println();
      System.err.println();
      System.err.println();
      System.err.println(string(e,false));
      System.err.println(string(edgesFrom.get(check),false));
      System.err.println();
      System.err.println();
      System.err.println();
    }
    for (    Path path : new ArrayList<Path>(edges.keySet())) {
      Set<Edge> set=edges.get(path);
      if (set.size() > 1) {
        List<Edge> list=new ArrayList<Edge>(set);
        List<Expr> expr=new ArrayList<Expr>();
        for (        Edge edge : list) {
          expr.add(edge.expr);
        }
        Edge substitute=new Edge(list.get(0).path,new Choice(expr.toArray(new Expr[0])));
        for (        Edge edge : list) {
          remove(edge);
        }
        edge(substitute);
        System.out.println();
        System.out.println("Substituted Choice: ( A ::= B x | B y; => A ::= B ( x | y ); )");
        System.out.println("--------------------------------------------------------------");
        System.out.println(string(list,false));
        System.out.println(" -> ");
        System.out.println(string(substitute));
        continue pruneLoop;
      }
    }
    factoringLoop:     for (    String name : new ArrayList<String>(edgesTo.keySet())) {
      if (terminals.contains(name)) {
        continue factoringLoop;
      }
      Set<Edge> set=edgesTo.get(name);
      Set<Expr> expressions=new HashSet<Expr>();
      if (set.size() > 1) {
        for (        Edge edge : set) {
          expressions.add(edge.expr);
        }
        if (expressions.size() == 1) {
          Expr expr=expressions.iterator().next();
          if (expr.toString().length() > 0) {
            List<Edge> list=new ArrayList<Edge>(set);
            List<Edge> before=new ArrayList<Edge>(edgesFrom.get(name));
            for (            Edge edge : list) {
              remove(edge);
              edge(new Edge(edge.path));
            }
            for (            Edge edge : before) {
              remove(edge);
              edge(new Edge(edge.path,new Sequence(expr,edge.expr)));
            }
            System.out.println();
            System.out.println("Factored out Expression: ( A ::= X a | Y a; B ::= A b; => A ::= X | Y; B ::= A a b; )");
            System.out.println("-------------------------------------------------------------------------------------");
            System.out.println(string(list,false));
            System.out.println(string(before,false));
            System.out.println(" -> ");
            System.out.println(string(edgesTo.get(name),false));
            System.out.println(string(edgesFrom.get(name),false));
          }
        }
      }
    }
    for (    int maxSize : new int[]{1,Integer.MAX_VALUE})     substitutionLoop:     for (    String name : new ArrayList<String>(edgesFrom.keySet())) {
      if (terminals.contains(name)) {
        continue substitutionLoop;
      }
      if (edgesFrom.get(name).size() == 1) {
        Edge from=edgesFrom.get(name).iterator().next();
        Set<Edge> set=edgesTo.get(name);
        if (set != null) {
          if (set.size() > maxSize) {
            continue substitutionLoop;
          }
          if (set.size() > 1) {
            if (!"".equals(from.expr.toString())) {
              continue substitutionLoop;
            }
 else {
              System.out.println();
              System.out.println();
              System.out.println("Substituting multi-sequence");
              System.out.println(string(from));
              System.out.println("...");
              System.out.println(string(set));
            }
          }
          List<Edge> list=new ArrayList<Edge>(set);
          List<Edge> substitutes=new ArrayList<Edge>();
          remove(from);
          for (          Edge to : list) {
            remove(to);
            Edge substitute=new Edge(new Path(to.path.from,from.path.to),new Sequence(to.expr,from.expr));
            edge(substitute);
            substitutes.add(substitute);
          }
          System.out.println();
          System.out.println("Substituted Sequence: ( A ::= B x; B ::= C y; => A ::= C y x; )");
          System.out.println("---------------------------------------------------------------");
          System.out.println(string(list,false));
          System.out.println(string(from));
          System.out.println(" -> ");
          System.out.println(string(substitutes,false));
          continue pruneLoop;
        }
      }
    }
    break pruneLoop;
  }
}
