{
switch (dialect().family()) {
case DERBY:
case FIREBIRD:
case H2:
case HSQLDB:
case POSTGRES:
case SQLITE:
    log.info("SKIPPING","UPDATE T1 JOIN T2 .. integration test. This syntax is not supported by " + dialect());
  return;
}
jOOQAbstractTest.reset=false;
create().update(TBook().join(TAuthor()).on(TBook_AUTHOR_ID().eq(TAuthor_ID()))).set(TAuthor_LAST_NAME(),"XX").set(TBook_TITLE(),"YY").where(TBook_ID().eq(1)).execute();
A a1=getAuthor(1);
B b1=getBook(1);
assertEquals("XX",a1.getValue(TAuthor_LAST_NAME()));
assertEquals("YY",b1.getValue(TBook_TITLE()));
Select<?> subquery=select(TAuthor_ID()).from(TAuthor()).where(TAuthor_ID().eq(1));
assertEquals(2,create().update(TBook().join(subquery).on(TBook_AUTHOR_ID().eq(subquery.field(TAuthor_ID())))).set(TBook_TITLE(),"ABC").execute());
A a2=getAuthor(1);
B b21=getBook(1);
B b22=getBook(2);
assertEquals(a1,a2);
assertEquals("ABC",b21.getValue(TBook_TITLE()));
assertEquals("ABC",b22.getValue(TBook_TITLE()));
}
