{
  CSVReader reader=new CSVReader(data,separator,quote,ignoreRows);
  try {
    String[] row=null;
    rowloop:     while ((row=reader.readNext()) != null) {
      processed++;
      InsertQuery<R> insert=create.insertQuery(table);
      for (int i=0; i < row.length; i++) {
        if (i < fields.length && fields[i] != null) {
          addValue0(insert,fields[i],row[i]);
        }
      }
      if (onDuplicate == ON_DUPLICATE_KEY_UPDATE) {
        insert.onDuplicateKeyUpdate(true);
        for (int i=0; i < row.length; i++) {
          if (i < fields.length && fields[i] != null && !mainKey[i]) {
            addValueForUpdate0(insert,fields[i],row[i]);
          }
        }
      }
 else       if (onDuplicate == ON_DUPLICATE_KEY_IGNORE) {
        SimpleSelectQuery<R> select=create.selectQuery(table);
        for (int i=0; i < row.length; i++) {
          if (i < fields.length && mainKey[i]) {
            select.addConditions(getCondition(fields[i],row[i]));
          }
        }
        try {
          if (select.execute() > 0) {
            ignored++;
            continue rowloop;
          }
        }
 catch (        DataAccessException e) {
          errors.add(new LoaderErrorImpl(e,row,processed - 1,select));
        }
      }
 else       if (onDuplicate == ON_DUPLICATE_KEY_ERROR) {
      }
      try {
        insert.execute();
        stored++;
        if (commit == COMMIT_AFTER) {
          if (processed % commitAfter == 0) {
            create.getConnection().commit();
          }
        }
      }
 catch (      DataAccessException e) {
        errors.add(new LoaderErrorImpl(e,row,processed - 1,insert));
        ignored++;
        if (onError == ON_ERROR_ABORT) {
          break rowloop;
        }
      }
    }
    try {
      if (commit == COMMIT_ALL) {
        if (!errors.isEmpty()) {
          stored=0;
          create.getConnection().rollback();
        }
 else {
          create.getConnection().commit();
        }
      }
 else       if (commit == COMMIT_AFTER) {
        if (processed % commitAfter != 0) {
          create.getConnection().commit();
        }
      }
    }
 catch (    DataAccessException e) {
      errors.add(new LoaderErrorImpl(e,null,processed - 1,null));
    }
  }
 catch (  SQLException e) {
    throw Util.translate(null,e);
  }
 finally {
    reader.close();
  }
}
