{
  if (!isLogging) {
    return;
  }
  endExecutionTime=System.currentTimeMillis();
  List<Debugger> sqlQueryDebuggerList=DebuggerRegistry.getDebuggerList();
  if (sqlQueryDebuggerList.isEmpty()) {
    return;
  }
  ResultSet resultSet=ctx.resultSet();
  String[] sql=ctx.batchSQL();
  SqlQueryType sqlQueryType=SqlQueryType.detectType(sql[0]);
  String parameterDescription=null;
  if (sql.length == 1) {
    PreparedStatement statement=ctx.statement();
    if (statement instanceof UsageTrackingPreparedStatement) {
      parameterDescription=((UsageTrackingPreparedStatement)statement).getParameterDescription();
    }
  }
  DebuggerData sqlQueryDebuggerData=new DebuggerData(sqlQueryType,sql,parameterDescription,startPreparationTime == 0 ? null : aggregatedPreparationDuration,startBindTime == 0 ? null : endBindTime - startBindTime,endExecutionTime - startExecutionTime);
  for (  Debugger listener : sqlQueryDebuggerList) {
    listener.debugQueries(sqlQueryDebuggerData);
  }
  if (resultSet != null) {
    final int sqlQueryDebuggerDataID=sqlQueryDebuggerData.getID();
    ResultSet newResultSet=new UsageTrackingResultSet(resultSet){
      @Override protected void notifyData(      long lifeTime,      int readRows,      int readCount,      int writeCount){
        List<Debugger> sqlQueryDebuggerList=DebuggerRegistry.getDebuggerList();
        if (sqlQueryDebuggerList.isEmpty()) {
          return;
        }
        DebuggerResultSetData sqlQueryDebuggerResultSetData=new DebuggerResultSetData(lifeTime,readRows,readCount,writeCount);
        for (        Debugger listener : sqlQueryDebuggerList) {
          listener.debugResultSet(sqlQueryDebuggerDataID,sqlQueryDebuggerResultSetData);
        }
      }
    }
;
    ctx.resultSet(newResultSet);
  }
}
