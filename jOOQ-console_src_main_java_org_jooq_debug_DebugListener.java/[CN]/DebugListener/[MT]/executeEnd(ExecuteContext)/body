{
  if (!isLogging) {
    return;
  }
  endExecutionTime=System.currentTimeMillis();
  List<Debugger> debuggerList=DebuggerRegistry.getDebuggerList();
  if (debuggerList.isEmpty()) {
    return;
  }
  boolean hasListener=false;
  for (  Debugger listener : debuggerList) {
    LoggingListener loggingListener=listener.getLoggingListener();
    if (loggingListener != null) {
      hasListener=true;
      break;
    }
  }
  if (!hasListener) {
    return;
  }
  ResultSet resultSet=ctx.resultSet();
  String[] sql=ctx.batchSQL();
  SqlQueryType sqlQueryType=SqlQueryType.detectType(sql[0]);
  String parameterDescription=null;
  if (sql.length == 1) {
    PreparedStatement statement=ctx.statement();
    if (statement instanceof UsageTrackingPreparedStatement) {
      parameterDescription=((UsageTrackingPreparedStatement)statement).getParameterDescription();
    }
  }
  QueryLoggingData queryLoggingData=new QueryLoggingData(sqlQueryType,sql,parameterDescription,startPreparationTime == 0 ? null : aggregatedPreparationDuration,startBindTime == 0 ? null : endBindTime - startBindTime,endExecutionTime - startExecutionTime);
  for (  Debugger listener : debuggerList) {
    LoggingListener loggingListener=listener.getLoggingListener();
    if (loggingListener != null) {
      loggingListener.logQueries(queryLoggingData);
    }
  }
  if (resultSet != null) {
    final int queryLoggingDataID=queryLoggingData.getID();
    ResultSet newResultSet=new UsageTrackingResultSet(resultSet){
      @Override protected void notifyData(      long lifeTime,      int readRows,      int readCount,      int writeCount){
        List<Debugger> debuggerList=DebuggerRegistry.getDebuggerList();
        if (debuggerList.isEmpty()) {
          return;
        }
        ResultSetLoggingData resultSetLoggingData=null;
        for (        Debugger debugger : debuggerList) {
          LoggingListener loggingListener=debugger.getLoggingListener();
          if (loggingListener != null) {
            if (resultSetLoggingData == null) {
              resultSetLoggingData=new ResultSetLoggingData(lifeTime,readRows,readCount,writeCount);
            }
            loggingListener.logResultSet(queryLoggingDataID,resultSetLoggingData);
          }
        }
      }
    }
;
    ctx.resultSet(newResultSet);
  }
}
