{
  Rdb$procedureParameters p=RDB$PROCEDURE_PARAMETERS.as("p");
  Rdb$fields f=RDB$FIELDS.as("f");
  int i=0;
  for (  Record record : create().select(p.RDB$PARAMETER_NUMBER,p.RDB$PARAMETER_TYPE,p.RDB$PARAMETER_NAME.trim().as(p.RDB$PARAMETER_NAME),FIELD_TYPE(f).as("FIELD_TYPE"),CHARACTER_LENGTH(f).as("CHARACTER_LENGTH"),f.RDB$FIELD_PRECISION,FIELD_SCALE(f).as("FIELD_SCALE"),DSL.bitOr(p.RDB$NULL_FLAG.nvl((short)0),f.RDB$NULL_FLAG.nvl((short)0)).as(p.RDB$NULL_FLAG),p.RDB$DEFAULT_SOURCE).from(p).leftOuterJoin(f).on(p.RDB$FIELD_SOURCE.eq(f.RDB$FIELD_NAME)).where(p.RDB$PROCEDURE_NAME.eq(getName())).orderBy(p.RDB$PARAMETER_TYPE.desc(),p.RDB$PARAMETER_NUMBER.asc())) {
    DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),getSchema(),record.get("FIELD_TYPE",String.class),record.get("CHARACTER_LENGTH",short.class),record.get(f.RDB$FIELD_PRECISION),record.get("FIELD_SCALE",Integer.class),record.get(p.RDB$NULL_FLAG) == 0,record.get(p.RDB$DEFAULT_SOURCE));
    ParameterDefinition parameter=new DefaultParameterDefinition(this,record.get(p.RDB$PARAMETER_NAME),i++,type);
    addParameter(record.get(p.RDB$PARAMETER_TYPE,int.class).equals(0) ? InOutDefinition.IN : InOutDefinition.OUT,parameter);
  }
}
