{
  List<RoutineDefinition> result=new ArrayList<RoutineDefinition>();
  for (  Record record : create().select(ROUTINES.ROUTINE_SCHEMA,ROUTINES.ROUTINE_NAME,ROUTINES.SPECIFIC_NAME,nvl(ELEMENT_TYPES.COLLECTION_TYPE_IDENTIFIER,ROUTINES.DATA_TYPE).as("datatype"),ROUTINES.NUMERIC_PRECISION,ROUTINES.NUMERIC_SCALE,field(ROUTINES.ROUTINE_DEFINITION.likeRegex(".*(?i:(\\w+\\s+)+aggregate\\s+function).*")).as("aggregate")).from(ROUTINES).leftOuterJoin(ELEMENT_TYPES).on(ROUTINES.ROUTINE_SCHEMA.equal(ELEMENT_TYPES.OBJECT_SCHEMA)).and(ROUTINES.ROUTINE_NAME.equal(ELEMENT_TYPES.OBJECT_NAME)).and(ROUTINES.DTD_IDENTIFIER.equal(ELEMENT_TYPES.COLLECTION_TYPE_IDENTIFIER)).where(ROUTINES.ROUTINE_SCHEMA.in(getInputSchemata())).orderBy(ROUTINES.ROUTINE_SCHEMA,ROUTINES.ROUTINE_NAME).fetch()) {
    String datatype=record.getValue("datatype",String.class);
    if (datatype != null && datatype.toUpperCase().startsWith("ROW")) {
      JooqLogger.getLogger(getClass()).info("A row : " + datatype);
      datatype="ROW";
    }
    result.add(new HSQLDBRoutineDefinition(getSchema(record.getValue(ROUTINES.ROUTINE_SCHEMA)),record.getValue(ROUTINES.ROUTINE_NAME),record.getValue(ROUTINES.SPECIFIC_NAME),datatype,record.getValue(ROUTINES.NUMERIC_PRECISION),record.getValue(ROUTINES.NUMERIC_SCALE),record.getValue("aggregate",boolean.class)));
  }
  return result;
}
