{
  if (onDuplicateKeyUpdate) {
switch (context.configuration().dialect().family()) {
case CUBRID:
case MARIADB:
case MYSQL:
{
        toSQLInsert(context);
        context.formatSeparator().start(INSERT_ON_DUPLICATE_KEY_UPDATE).keyword("on duplicate key update").sql(" ").visit(updateMap).end(INSERT_ON_DUPLICATE_KEY_UPDATE);
        break;
      }
case H2:
{
      throw new SQLDialectNotSupportedException("The ON DUPLICATE KEY UPDATE clause cannot be simulated for " + context.configuration().dialect());
    }
case HSQLDB:
{
    context.visit(toMerge(context.configuration()));
    break;
  }
default :
throw new SQLDialectNotSupportedException("The ON DUPLICATE KEY UPDATE clause cannot be simulated for " + context.configuration().dialect());
}
}
 else if (onDuplicateKeyIgnore) {
switch (context.configuration().dialect().family()) {
case MARIADB:
case MYSQL:
{
toSQLInsert(context);
context.start(INSERT_ON_DUPLICATE_KEY_UPDATE).end(INSERT_ON_DUPLICATE_KEY_UPDATE);
break;
}
case CUBRID:
{
FieldMapForUpdate update=new FieldMapForUpdate(INSERT_ON_DUPLICATE_KEY_UPDATE_ASSIGNMENT);
Field<?> field=getInto().field(0);
update.put(field,field);
toSQLInsert(context);
context.formatSeparator().start(INSERT_ON_DUPLICATE_KEY_UPDATE).keyword("on duplicate key update").sql(" ").visit(update).end(INSERT_ON_DUPLICATE_KEY_UPDATE);
break;
}
case H2:
{
throw new SQLDialectNotSupportedException("The ON DUPLICATE KEY IGNORE clause cannot be simulated for " + context.configuration().dialect());
}
case HSQLDB:
{
context.visit(toMerge(context.configuration()));
break;
}
default :
throw new SQLDialectNotSupportedException("The ON DUPLICATE KEY IGNORE clause cannot be simulated for " + context.configuration().dialect());
}
}
 else {
toSQLInsert(context);
context.start(INSERT_ON_DUPLICATE_KEY_UPDATE).end(INSERT_ON_DUPLICATE_KEY_UPDATE);
}
context.start(INSERT_RETURNING);
toSQLReturning(context);
context.end(INSERT_RETURNING);
}
