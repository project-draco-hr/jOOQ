{
  if (onDuplicateKeyUpdate) {
switch (ctx.family()) {
case CUBRID:
case MARIADB:
case MYSQL:
{
        toSQLInsert(ctx);
        ctx.formatSeparator().start(INSERT_ON_DUPLICATE_KEY_UPDATE).keyword("on duplicate key update").formatIndentStart().formatSeparator().visit(updateMap).formatIndentEnd().end(INSERT_ON_DUPLICATE_KEY_UPDATE);
        break;
      }
case POSTGRES:
{
      toSQLInsert(ctx);
      ctx.formatSeparator().start(INSERT_ON_DUPLICATE_KEY_UPDATE).keyword("on conflict").sql(" (");
      if (onConflict != null && onConflict.size() > 0) {
        boolean qualify=ctx.qualify();
        ctx.qualify(false).visit(onConflict).qualify(qualify);
      }
 else       if (table.getPrimaryKey() == null) {
        ctx.sql("[unknown primary key]");
      }
 else {
        boolean qualify=ctx.qualify();
        ctx.qualify(false).visit(new Fields<Record>(table.getPrimaryKey().getFields())).qualify(qualify);
      }
      ctx.sql(") ").keyword("do update").formatSeparator().keyword("set").sql(' ').formatIndentLockStart().visit(updateMap).formatIndentLockEnd().end(INSERT_ON_DUPLICATE_KEY_UPDATE);
      break;
    }
case H2:
{
    throw new SQLDialectNotSupportedException("The ON DUPLICATE KEY UPDATE clause cannot be emulated for " + ctx.dialect());
  }
case HSQLDB:
{
  ctx.visit(toMerge(ctx.configuration()));
  break;
}
default :
throw new SQLDialectNotSupportedException("The ON DUPLICATE KEY UPDATE clause cannot be emulated for " + ctx.dialect());
}
}
 else if (onDuplicateKeyIgnore) {
switch (ctx.dialect()) {
case MARIADB:
case MYSQL:
case SQLITE:
{
toSQLInsert(ctx);
ctx.start(INSERT_ON_DUPLICATE_KEY_UPDATE).end(INSERT_ON_DUPLICATE_KEY_UPDATE);
break;
}
case POSTGRES_9_5:
case POSTGRES:
{
toSQLInsert(ctx);
ctx.formatSeparator().start(INSERT_ON_DUPLICATE_KEY_UPDATE).keyword("on conflict do nothing").end(INSERT_ON_DUPLICATE_KEY_UPDATE);
break;
}
case CUBRID:
{
FieldMapForUpdate update=new FieldMapForUpdate(INSERT_ON_DUPLICATE_KEY_UPDATE_ASSIGNMENT);
Field<?> field=table.field(0);
update.put(field,field);
toSQLInsert(ctx);
ctx.formatSeparator().start(INSERT_ON_DUPLICATE_KEY_UPDATE).keyword("on duplicate key update").sql(' ').visit(update).end(INSERT_ON_DUPLICATE_KEY_UPDATE);
break;
}
case HSQLDB:
{
ctx.visit(toMerge(ctx.configuration()));
break;
}
default :
{
ctx.visit(toInsertSelect(ctx.configuration()));
break;
}
}
}
 else {
toSQLInsert(ctx);
ctx.start(INSERT_ON_DUPLICATE_KEY_UPDATE).end(INSERT_ON_DUPLICATE_KEY_UPDATE);
}
ctx.start(INSERT_RETURNING);
toSQLReturning(ctx);
ctx.end(INSERT_RETURNING);
}
