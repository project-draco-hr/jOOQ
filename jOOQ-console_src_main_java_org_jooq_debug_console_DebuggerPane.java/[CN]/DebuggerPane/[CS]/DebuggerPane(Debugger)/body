{
  super(new BorderLayout());
  setBorder(BorderFactory.createEmptyBorder(2,5,5,5));
  setOpaque(false);
  this.debugger=debugger;
  JPanel westPane=new JPanel(new BorderLayout());
  westPane.setOpaque(false);
  JPanel breakpointAddPane=new JPanel(new GridBagLayout());
  breakpointAddPane.setOpaque(false);
  breakpointAddPane.setBorder(BorderFactory.createEmptyBorder(0,0,2,0));
  final JTextField addBreakpointTextField=new JTextField(7);
  breakpointAddPane.add(addBreakpointTextField,new GridBagConstraints(0,0,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  final JButton addBreakpointButton=new JButton("Add");
  addBreakpointButton.setOpaque(false);
  addBreakpointButton.setEnabled(false);
  breakpointAddPane.add(addBreakpointButton,new GridBagConstraints(1,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,2,0,0),0,0));
  addBreakpointTextField.getDocument().addDocumentListener(new DocumentListener(){
    @Override public void removeUpdate(    DocumentEvent e){
      adjustStates();
    }
    @Override public void insertUpdate(    DocumentEvent e){
      adjustStates();
    }
    @Override public void changedUpdate(    DocumentEvent e){
      adjustStates();
    }
    private void adjustStates(){
      boolean isEnabled=addBreakpointTextField.getText().length() > 0;
      addBreakpointButton.setEnabled(isEnabled);
    }
  }
);
  ActionListener addBreakpointActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String name=addBreakpointTextField.getText();
      if (name.length() == 0) {
        return;
      }
      addBreakpointTextField.setText("");
      addBreakpoint(name);
    }
  }
;
  addBreakpointTextField.addActionListener(addBreakpointActionListener);
  addBreakpointButton.addActionListener(addBreakpointActionListener);
  westPane.add(breakpointAddPane,BorderLayout.NORTH);
  rootNode=new DefaultMutableTreeNode();
  breakpointTreeModel=new DefaultTreeModel(rootNode){
    @Override public void valueForPathChanged(    TreePath path,    Object newValue){
      if (newValue instanceof CheckBoxNode) {
        CheckBoxNode node=(CheckBoxNode)path.getLastPathComponent();
        node.setSelected(((CheckBoxNode)newValue).isSelected());
        super.valueForPathChanged(path,node.getUserObject());
        commitBreakpoints();
      }
    }
  }
;
  breakpointTree=new JTree(breakpointTreeModel);
  breakpointTree.setRootVisible(false);
  breakpointTree.setShowsRootHandles(true);
  breakpointTree.setCellRenderer(new DefaultTreeCellRenderer(){
    @Override public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      Component c=super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      if (c instanceof JLabel) {
        Icon icon=null;
        if (value instanceof CheckBoxNode) {
          icon=((CheckBoxNode)value).isSelected() ? BREAKPOINT_ON_ICON : BREAKPOINT_OFF_ICON;
        }
 else         if (value instanceof BreakpointHitNode) {
          if (((BreakpointHitNode)value).getUserObject().isBeforeExecution()) {
            icon=BREAKPOINT_HIT_BEFORE_ICON;
          }
 else {
            icon=BREAKPOINT_HIT_AFTER_ICON;
          }
        }
 else         if (value instanceof StackTraceElementNode) {
          icon=STACK_TRACE_ELEMENT_ICON;
        }
        ((JLabel)c).setIcon(icon);
      }
      return c;
    }
  }
);
  breakpointTree.setCellEditor(new CheckBoxNodeEditor(breakpointTree));
  breakpointTree.setCellRenderer(new CheckBoxNodeRenderer(breakpointTree));
  breakpointTree.setEditable(true);
  JScrollPane breakpointTreeScrollPane=new JScrollPane(breakpointTree);
  breakpointTreeScrollPane.setPreferredSize(new Dimension(200,200));
  westPane.add(breakpointTreeScrollPane,BorderLayout.CENTER);
  JPanel breakpointRemovePane=new JPanel(new FlowLayout(FlowLayout.CENTER,0,0));
  breakpointRemovePane.setOpaque(false);
  breakpointRemovePane.setBorder(BorderFactory.createEmptyBorder(2,0,0,0));
  final JButton removeBreakpointButton=new JButton("Remove");
  removeBreakpointButton.setOpaque(false);
  removeBreakpointButton.setEnabled(false);
  removeBreakpointButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      TreePath[] paths=breakpointTree.getSelectionPaths();
      boolean isValid=paths != null && paths.length > 0;
      if (isValid) {
        for (int i=0; i < paths.length; i++) {
          if (!(paths[i].getLastPathComponent() instanceof CheckBoxNode)) {
            isValid=false;
            break;
          }
        }
      }
      if (isValid) {
        List<BreakpointHitNode> breakpointHitNodeList=new ArrayList<DebuggerPane.BreakpointHitNode>();
        breakpointTree.cancelEditing();
        for (int i=0; i < paths.length; i++) {
          CheckBoxNode childNode=(CheckBoxNode)paths[i].getLastPathComponent();
          int childCount=childNode.getChildCount();
          for (int j=0; j < childCount; j++) {
            TreeNode node=childNode.getChildAt(j);
            if (node instanceof BreakpointHitNode) {
              breakpointHitNodeList.add((BreakpointHitNode)node);
            }
          }
          int index=rootNode.getIndex(childNode);
          rootNode.remove(index);
          breakpointTreeModel.nodesWereRemoved(rootNode,new int[]{index},new Object[]{childNode});
        }
        commitBreakpoints();
        for (        BreakpointHitNode node : breakpointHitNodeList) {
synchronized (node) {
            node.proceed();
          }
        }
      }
    }
  }
);
  breakpointTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      TreePath[] paths=breakpointTree.getSelectionPaths();
      boolean isValid=paths != null && paths.length > 0;
      if (isValid) {
        for (int i=0; i < paths.length; i++) {
          if (!(paths[i].getLastPathComponent() instanceof CheckBoxNode)) {
            isValid=false;
            break;
          }
        }
      }
      removeBreakpointButton.setEnabled(isValid);
      processTreeSelection();
    }
  }
);
  breakpointTree.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      maybeShowPopup(e);
    }
    @Override public void mouseReleased(    MouseEvent e){
      maybeShowPopup(e);
    }
    private void maybeShowPopup(    MouseEvent e){
      if (e.isPopupTrigger()) {
        TreePath[] selectionPaths=breakpointTree.getSelectionPaths();
        if (selectionPaths != null && selectionPaths.length == 1) {
          Object o=selectionPaths[0].getLastPathComponent();
          if (o instanceof BreakpointHitNode) {
            final BreakpointHit breakpointHit=((BreakpointHitNode)o).getUserObject();
            JPopupMenu popupMenu=new JPopupMenu();
            JMenuItem copyStackToClipboardMenuItem=new JMenuItem("Copy Call Stack to Clipboard");
            copyStackToClipboardMenuItem.addActionListener(new ActionListener(){
              @Override public void actionPerformed(              ActionEvent e){
                StringWriter sw=new StringWriter();
                Throwable throwable=new Exception("Statement Stack trace");
                throwable.setStackTrace(breakpointHit.getCallerStackTraceElements());
                throwable.printStackTrace(new PrintWriter(sw));
                Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(new StringSelection(sw.toString()),null);
              }
            }
);
            popupMenu.add(copyStackToClipboardMenuItem);
            JMenuItem dumpStackToConsoleMenuItem=new JMenuItem("Dump Call Stack");
            dumpStackToConsoleMenuItem.addActionListener(new ActionListener(){
              @Override public void actionPerformed(              ActionEvent e){
                Throwable throwable=new Exception("Statement Stack trace");
                throwable.setStackTrace(breakpointHit.getCallerStackTraceElements());
                throwable.printStackTrace();
              }
            }
);
            popupMenu.add(dumpStackToConsoleMenuItem);
            popupMenu.show(e.getComponent(),e.getX(),e.getY());
          }
        }
      }
    }
  }
);
  breakpointRemovePane.add(removeBreakpointButton);
  westPane.add(breakpointRemovePane,BorderLayout.SOUTH);
  eastPane=new JPanel(new BorderLayout());
  eastPane.setOpaque(false);
  add(new InvisibleSplitPane(JSplitPane.HORIZONTAL_SPLIT,true,westPane,eastPane),BorderLayout.CENTER);
}
