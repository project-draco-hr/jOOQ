{
  if (skip) {
    getLog().info("Skipping jOOQ code generation");
    return;
  }
  if (configurationFile != null) {
    getLog().info("Reading external configuration");
    File file=new File(configurationFile);
    if (!file.isAbsolute())     file=new File(project.getBasedir(),configurationFile);
    FileInputStream in=null;
    try {
      in=new FileInputStream(file);
      Configuration configuration=GenerationTool.load(in);
      generator=configuration.getGenerator();
      jdbc=configuration.getJdbc();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException ignore) {
        }
      }
    }
  }
  if (generator == null) {
    getLog().error("Incorrect configuration of jOOQ code generation tool");
    getLog().error("\n" + "The jOOQ-codegen-maven module's generator configuration is not set up correctly.\n" + "This can have a variety of reasons, among which:\n"+ "- Your pom.xml's <configuration> contains invalid XML according to " + XSD_CODEGEN + "\n"+ "- There is a version or artifact mismatch between your pom.xml and your commandline");
    throw new MojoExecutionException("Incorrect configuration of jOOQ code generation tool. See error above for details.");
  }
  ClassLoader oldCL=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(getClassLoader());
    String dir=generator.getTarget().getDirectory();
    if (!new File(dir).isAbsolute()) {
      generator.getTarget().setDirectory(project.getBasedir() + File.separator + dir);
    }
    Configuration configuration=new Configuration();
    configuration.setLogging(logging);
    configuration.setJdbc(jdbc);
    configuration.setGenerator(generator);
    StringWriter writer=new StringWriter();
    JAXB.marshal(configuration,writer);
    getLog().debug("Using this configuration:\n" + writer.toString());
    GenerationTool.generate(configuration);
  }
 catch (  Exception ex) {
    throw new MojoExecutionException("Error running jOOQ code generation tool",ex);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldCL);
  }
  project.addCompileSourceRoot(generator.getTarget().getDirectory());
}
