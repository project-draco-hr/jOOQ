{
  super(new BorderLayout());
  setOpaque(false);
  JPanel loggerHeaderPanel=new JPanel(new BorderLayout());
  loggerHeaderPanel.setOpaque(false);
  JToolBar loggerHeaderWestPanel=new JToolBar();
  loggerHeaderWestPanel.setFloatable(false);
  loggerHeaderWestPanel.setOpaque(false);
  loggerOnButton=new JButton(new ImageIcon(getClass().getResource("/org/jooq/debug/console/resources/Paused16.png")));
  loggerOnButton.setOpaque(false);
  loggerOnButton.setFocusable(false);
  loggerOnButton.setToolTipText("Activate logging");
  loggerOnButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setLogging(true);
    }
  }
);
  loggerHeaderWestPanel.add(loggerOnButton);
  loggerOffButton=new JButton(new ImageIcon(getClass().getResource("/org/jooq/debug/console/resources/Running16.png")));
  loggerOffButton.setOpaque(false);
  loggerOffButton.setFocusable(false);
  loggerOffButton.setToolTipText("Deactivate logging");
  loggerOffButton.setVisible(false);
  loggerOffButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      setLogging(false);
      loggerOnButton.requestFocus();
    }
  }
);
  loggerHeaderWestPanel.add(loggerOffButton);
  loggerHeaderPanel.add(loggerHeaderWestPanel,BorderLayout.WEST);
  JPanel loggerHeaderCenterPanel=new JPanel(new FlowLayout(FlowLayout.CENTER,2,2));
  loggerHeaderCenterPanel.setOpaque(false);
  JCheckBox loggerThreadCheckBox=new JCheckBox("Threads",true);
  loggerThreadCheckBox.setOpaque(false);
  loggerThreadCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isThreadDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_THREAD),isThreadDisplayed);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderCenterPanel.add(loggerThreadCheckBox);
  JCheckBox loggerTimestampCheckBox=new JCheckBox("Timestamps",true);
  loggerTimestampCheckBox.setOpaque(false);
  loggerTimestampCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isTimestampDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_TIMESTAMP),isTimestampDisplayed);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderCenterPanel.add(loggerTimestampCheckBox);
  JCheckBox preparedStatementDataCheckBox=new JCheckBox("PS Data",true);
  preparedStatementDataCheckBox.setOpaque(false);
  preparedStatementDataCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isPreparedStatementDataShown=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_PS_PREPARATION_DURATION),isPreparedStatementDataShown);
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_PS_BINDING_DURATION),isPreparedStatementDataShown);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderCenterPanel.add(preparedStatementDataCheckBox);
  JCheckBox loggerDurationCheckBox=new JCheckBox("Exec Time",true);
  loggerDurationCheckBox.setOpaque(false);
  loggerDurationCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isDurationDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_EXEC_TIME),isDurationDisplayed);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderCenterPanel.add(loggerDurationCheckBox);
  JCheckBox resultSetDataCheckBox=new JCheckBox("RS Data",true);
  resultSetDataCheckBox.setOpaque(false);
  resultSetDataCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isResultSetDataShown=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_RS_LIFETIME),isResultSetDataShown);
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_RS_READ),isResultSetDataShown);
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_RS_READ_ROWS),isResultSetDataShown);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderCenterPanel.add(resultSetDataCheckBox);
  JCheckBox duplicationCountCheckBox=new JCheckBox("Duplication",true);
  duplicationCountCheckBox.setOpaque(false);
  duplicationCountCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      boolean isDuplicationCountShown=e.getStateChange() == ItemEvent.SELECTED;
      XTableColumnModel columnModel=(XTableColumnModel)table.getColumnModel();
      columnModel.setColumnVisible(columnModel.getColumnByModelIndex(COLUMN_DUPLICATION_COUNT),isDuplicationCountShown);
      table.adjustLastColumn();
    }
  }
);
  loggerHeaderCenterPanel.add(duplicationCountCheckBox);
  loggerHeaderPanel.add(loggerHeaderCenterPanel,BorderLayout.CENTER);
  JToolBar loggerHeaderEastPanel=new JToolBar();
  loggerHeaderEastPanel.setFloatable(false);
  loggerHeaderEastPanel.setOpaque(false);
  JToggleButton loggerReadQueryTypeToggleButton=new JToggleButton(SELECT_ICON,isReadQueryTypeDisplayed);
  loggerReadQueryTypeToggleButton.setOpaque(false);
  loggerReadQueryTypeToggleButton.setFocusable(false);
  loggerReadQueryTypeToggleButton.setToolTipText("Show/hide read statements");
  loggerReadQueryTypeToggleButton.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      isReadQueryTypeDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      refreshRows();
    }
  }
);
  loggerHeaderEastPanel.add(loggerReadQueryTypeToggleButton);
  JToggleButton loggerWriteQueryTypeToggleButton=new JToggleButton(UPDATE_ICON,isWriteQueryTypeDisplayed);
  loggerWriteQueryTypeToggleButton.setOpaque(false);
  loggerWriteQueryTypeToggleButton.setFocusable(false);
  loggerWriteQueryTypeToggleButton.setToolTipText("Show/hide modification statements");
  loggerWriteQueryTypeToggleButton.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      isWriteQueryTypeDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      refreshRows();
    }
  }
);
  loggerHeaderEastPanel.add(loggerWriteQueryTypeToggleButton);
  JToggleButton loggerOtherQueryTypeToggleButton=new JToggleButton(OTHER_ICON,isOtherQueryTypeDisplayed);
  loggerOtherQueryTypeToggleButton.setOpaque(false);
  loggerOtherQueryTypeToggleButton.setFocusable(false);
  loggerOtherQueryTypeToggleButton.setToolTipText("Show/hide other types of statements");
  loggerOtherQueryTypeToggleButton.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      isOtherQueryTypeDisplayed=e.getStateChange() == ItemEvent.SELECTED;
      refreshRows();
    }
  }
);
  loggerHeaderEastPanel.add(loggerOtherQueryTypeToggleButton);
  JButton loggerClearButton=new JButton(new ImageIcon(getClass().getResource("/org/jooq/debug/console/resources/Clear16.png")));
  loggerClearButton.setOpaque(false);
  loggerClearButton.setFocusable(false);
  loggerClearButton.setToolTipText("Clear collected data");
  loggerClearButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      queryDebuggingInfoList.clear();
      textArea.setText("");
      int originalRowCount=displayedQueryDebuggingInfoList.size();
      displayedQueryDebuggingInfoList.clear();
      queriesToCountMap.clear();
      if (originalRowCount > 0) {
        ((AbstractTableModel)table.getModel()).fireTableRowsDeleted(0,originalRowCount - 1);
      }
      updateStatusLabel();
    }
  }
);
  loggerHeaderEastPanel.add(new JToolBar.Separator());
  loggerHeaderEastPanel.add(loggerClearButton);
  JToggleButton scrollLockToggleButton=new JToggleButton(new ImageIcon(getClass().getResource("/org/jooq/debug/console/resources/LockScroll16.png")));
  scrollLockToggleButton.setFocusable(false);
  scrollLockToggleButton.setToolTipText("Scroll Lock");
  scrollLockToggleButton.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      isScrollLocked=e.getStateChange() == ItemEvent.SELECTED;
    }
  }
);
  loggerHeaderEastPanel.add(scrollLockToggleButton);
  loggerHeaderPanel.add(loggerHeaderEastPanel,BorderLayout.EAST);
  add(loggerHeaderPanel,BorderLayout.NORTH);
  table=new JTableX(new AbstractTableModel(){
    @Override public Object getValueAt(    int rowIndex,    int columnIndex){
      QueryDebuggingInfo queryDebuggingInfo=displayedQueryDebuggingInfoList.get(rowIndex);
switch (columnIndex) {
case COLUMN_LINE:
{
          return rowIndex + 1;
        }
case COLUMN_TYPE:
{
        return queryDebuggingInfo.getQueryType();
      }
case COLUMN_THREAD:
{
      return queryDebuggingInfo.getThreadName() + " [" + queryDebuggingInfo.getThreadId()+ "]";
    }
case COLUMN_TIMESTAMP:
{
    return TIMESTAMP_FORMAT.format(new Date(queryDebuggingInfo.getTimestamp()));
  }
case COLUMN_PS_PREPARATION_DURATION:
{
  Long duration=queryDebuggingInfo.getPrepardeStatementPreparationDuration();
  return duration == null ? null : duration;
}
case COLUMN_PS_BINDING_DURATION:
{
Long duration=queryDebuggingInfo.getPrepardeStatementBindingDuration();
return duration == null ? null : duration;
}
case COLUMN_EXEC_TIME:
{
long duration=queryDebuggingInfo.getExecutionDuration();
return duration < 0 ? null : duration;
}
case COLUMN_RS_LIFETIME:
{
DebuggerResultSetData rsData=queryDebuggingInfo.getSqlQueryDebuggerResultSetData();
return rsData == null ? null : rsData.getLifeTime();
}
case COLUMN_RS_READ:
{
DebuggerResultSetData rsData=queryDebuggingInfo.getSqlQueryDebuggerResultSetData();
return rsData == null ? null : rsData.getReadCount();
}
case COLUMN_RS_READ_ROWS:
{
DebuggerResultSetData rsData=queryDebuggingInfo.getSqlQueryDebuggerResultSetData();
return rsData == null ? null : rsData.getReadRows();
}
case COLUMN_DUPLICATION_COUNT:
{
return queryDebuggingInfo.getDuplicationCount();
}
case COLUMN_QUERY:
{
StringBuilder querySB=new StringBuilder();
String[] queries=queryDebuggingInfo.getQueries();
for (int i=0; i < queries.length; i++) {
if (i > 0) {
querySB.append(LS);
}
String s=queries[i];
querySB.append(s.trim());
}
return querySB.toString();
}
}
return null;
}
@Override public int getRowCount(){
return displayedQueryDebuggingInfoList.size();
}
@Override public int getColumnCount(){
return COLUMN_COUNT;
}
@Override public String getColumnName(int column){
switch (column) {
case COLUMN_LINE:
return "Line";
case COLUMN_TYPE:
return "Type";
case COLUMN_THREAD:
return "Thread";
case COLUMN_TIMESTAMP:
return "Timestamp";
case COLUMN_PS_PREPARATION_DURATION:
return "PS preparation (ms)";
case COLUMN_PS_BINDING_DURATION:
return "PS binding (ms)";
case COLUMN_EXEC_TIME:
return "Exec time (ms)";
case COLUMN_RS_LIFETIME:
return "RS lifetime (ms)";
case COLUMN_RS_READ:
return "RS read";
case COLUMN_RS_READ_ROWS:
return "RS rows";
case COLUMN_DUPLICATION_COUNT:
return "Duplic.";
case COLUMN_QUERY:
return "Query";
}
return null;
}
@Override public Class<?> getColumnClass(int columnIndex){
switch (columnIndex) {
case COLUMN_LINE:
return Integer.class;
case COLUMN_TYPE:
return SqlQueryType.class;
case COLUMN_PS_PREPARATION_DURATION:
return Long.class;
case COLUMN_PS_BINDING_DURATION:
return Long.class;
case COLUMN_EXEC_TIME:
return Long.class;
case COLUMN_RS_LIFETIME:
return Long.class;
case COLUMN_RS_READ:
return Integer.class;
case COLUMN_RS_READ_ROWS:
return Integer.class;
case COLUMN_DUPLICATION_COUNT:
return Integer.class;
case COLUMN_QUERY:
return String.class;
}
return super.getColumnClass(columnIndex);
}
}
);
registerTooltip();
table.setAutoCreateRowSorter(true);
table.getRowSorter().setSortKeys(Arrays.asList(new RowSorter.SortKey(COLUMN_LINE,SortOrder.ASCENDING)));
XTableColumnModel columnModel=new XTableColumnModel();
table.setColumnModel(columnModel);
table.createDefaultColumnsFromModel();
table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
columnModel.getColumnByModelIndex(COLUMN_LINE).setPreferredWidth(30);
columnModel.getColumnByModelIndex(COLUMN_TYPE).setPreferredWidth(20);
columnModel.getColumnByModelIndex(COLUMN_TIMESTAMP).setPreferredWidth(80);
columnModel.getColumnByModelIndex(COLUMN_THREAD).setPreferredWidth(150);
columnModel.getColumnByModelIndex(COLUMN_DUPLICATION_COUNT).setPreferredWidth(40);
table.setColumnSelectionAllowed(true);
table.setFillsViewportHeight(true);
table.setDefaultRenderer(SqlQueryType.class,new DefaultTableCellRenderer(){
@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
Component c=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
if (c instanceof JLabel) {
Icon icon=null;
int modelRow=table.convertRowIndexToModel(row);
QueryDebuggingInfo queryDebuggingInfo=displayedQueryDebuggingInfoList.get(modelRow);
switch (queryDebuggingInfo.getQueryType()) {
case SELECT:
icon=SELECT_ICON;
break;
case INSERT:
icon=INSERT_ICON;
break;
case UPDATE:
icon=UPDATE_ICON;
break;
case DELETE:
icon=DELETE_ICON;
break;
case OTHER:
icon=OTHER_ICON;
break;
}
((JLabel)c).setText(null);
((JLabel)c).setIcon(icon);
}
return c;
}
}
);
table.setDefaultRenderer(String.class,new DefaultTableCellRenderer(){
private Pattern pattern=Pattern.compile("[\\t\\n\\x0B\\f\\r]+");
@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
if (value != null) {
value=pattern.matcher((String)value).replaceAll(" ");
}
return super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
}
}
);
table.addMouseListener(new MouseAdapter(){
@Override public void mousePressed(MouseEvent e){
maybeShowPopup(e);
}
@Override public void mouseReleased(MouseEvent e){
maybeShowPopup(e);
}
private void maybeShowPopup(MouseEvent e){
if (e.isPopupTrigger()) {
Point location=e.getPoint();
int row=table.rowAtPoint(location);
if (row < 0) {
return;
}
int column=table.columnAtPoint(location);
if (column < 0) {
return;
}
if (!table.isCellSelected(row,column)) {
ListSelectionModel selectionModel=table.getSelectionModel();
selectionModel.clearSelection();
selectionModel.addSelectionInterval(row,row);
}
JPopupMenu popupMenu=new JPopupMenu();
int[] selectedRows=table.getSelectedRows();
final QueryDebuggingInfo[] selectedQueryDebuggingInfos=new QueryDebuggingInfo[selectedRows.length];
for (int i=0; i < selectedRows.length; i++) {
selectedQueryDebuggingInfos[i]=displayedQueryDebuggingInfoList.get(table.convertRowIndexToModel(selectedRows[i]));
}
if (table.getSelectedRow() >= 0 && table.getSelectedColumn() >= 0) {
JMenuItem copyCellsToClipboardMenuItem=new JMenuItem("Copy Selected Cells to Clipboard");
copyCellsToClipboardMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
table.getTransferHandler().exportToClipboard(table,Toolkit.getDefaultToolkit().getSystemClipboard(),TransferHandler.COPY);
}
}
);
popupMenu.add(copyCellsToClipboardMenuItem);
}
if (selectedQueryDebuggingInfos.length > 0) {
JMenuItem copyToClipboardMenuItem=new JMenuItem("Copy " + (selectedQueryDebuggingInfos.length > 1 ? selectedQueryDebuggingInfos.length + " " : "") + "Statement Data to Clipboard");
copyToClipboardMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
copyToClipboard(selectedQueryDebuggingInfos);
}
}
);
popupMenu.add(copyToClipboardMenuItem);
}
if (displayedQueryDebuggingInfoList.size() > 0) {
JMenuItem copyAllToClipboardMenuItem=new JMenuItem("Copy All Statements Data (" + displayedQueryDebuggingInfoList.size() + ") to Clipboard");
copyAllToClipboardMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
copyToClipboard(displayedQueryDebuggingInfoList.toArray(new QueryDebuggingInfo[0]));
}
}
);
popupMenu.add(copyAllToClipboardMenuItem);
}
if (selectedQueryDebuggingInfos.length == 1) {
if (popupMenu.getComponentCount() > 0) {
popupMenu.addSeparator();
}
JMenuItem copyStackToClipboardMenuItem=new JMenuItem("Copy Call Stack to Clipboard");
copyStackToClipboardMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
StringWriter sw=new StringWriter();
selectedQueryDebuggingInfos[0].getThrowable().printStackTrace(new PrintWriter(sw));
Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
clipboard.setContents(new StringSelection(sw.toString()),null);
}
}
);
popupMenu.add(copyStackToClipboardMenuItem);
JMenuItem dumpStackMenuItem=new JMenuItem("Dump Call Stack");
dumpStackMenuItem.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
selectedQueryDebuggingInfos[0].getThrowable().printStackTrace();
}
}
);
popupMenu.add(dumpStackMenuItem);
}
if (popupMenu.getComponentCount() > 0) {
popupMenu.show(table,e.getX(),e.getY());
}
}
}
}
);
table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
@Override public void valueChanged(ListSelectionEvent e){
if (e.getValueIsAdjusting()) {
return;
}
int[] selectedRows=table.getSelectedRows();
String text;
if (selectedRows.length > 30) {
text="(Too many selected rows)";
}
 else {
StringBuilder sb=new StringBuilder();
for (int row : selectedRows) {
row=table.convertRowIndexToModel(row);
QueryDebuggingInfo queryDebuggingInfo=displayedQueryDebuggingInfoList.get(row);
for (String query : queryDebuggingInfo.getQueries()) {
sb.append(query.trim()).append(LS);
}
}
text=sb.toString();
}
if (!text.equals(textArea.getText())) {
textArea.setText(text);
textArea.setCaretPosition(0);
}
updateStatusLabel();
}
}
);
textArea=new SqlTextArea();
final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,new JScrollPane(table),new JScrollPane(textArea));
splitPane.setResizeWeight(1);
SwingUtilities.invokeLater(new Runnable(){
@Override public void run(){
splitPane.setDividerLocation(splitPane.getHeight() - 100);
}
}
);
add(splitPane,BorderLayout.CENTER);
loggerStatusLabel=new JLabel();
updateStatusLabel();
add(loggerStatusLabel,BorderLayout.SOUTH);
preparedStatementDataCheckBox.setSelected(false);
resultSetDataCheckBox.setSelected(false);
duplicationCountCheckBox.setSelected(false);
loggerTimestampCheckBox.setSelected(false);
loggerDurationCheckBox.setSelected(false);
loggerThreadCheckBox.setSelected(false);
}
