{
  DSLContext create=create(create().configuration().derive(new RecordMapperProvider(){
    @Override public <R extends Record,E>RecordMapper<R,E> provide(    RecordType<R> rowType,    Class<? extends E> type){
      if (type == Integer.class) {
        return new RecordMapper<R,E>(){
          @Override public E map(          R record){
            return (E)record.getValue(TBook_ID());
          }
        }
;
      }
      if (type == String.class && rowType.field(TBook_TITLE()) != null) {
        return new RecordMapper<R,E>(){
          @Override public E map(          R record){
            return (E)record.getValue(TBook_TITLE());
          }
        }
;
      }
      throw new NoRecordMapperAvailableException();
    }
  }
));
  assertEquals(BOOK_IDS,create.selectFrom(TBook()).orderBy(TBook_ID()).fetchInto(Integer.class));
  assertEquals(BOOK_TITLES,create.selectFrom(TBook()).orderBy(TBook_ID()).fetchInto(String.class));
  try {
    create.selectFrom(TBook()).fetchInto(Object.class);
    fail();
  }
 catch (  NoRecordMapperAvailableException expected) {
  }
  try {
    create.select(TBook_ID()).from(TBook()).fetchInto(String.class);
    fail();
  }
 catch (  NoRecordMapperAvailableException expected) {
  }
}
