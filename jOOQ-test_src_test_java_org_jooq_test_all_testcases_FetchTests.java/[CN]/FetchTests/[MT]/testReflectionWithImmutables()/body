{
  Record author1=create().select(TAuthor_ID(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),TAuthor_DATE_OF_BIRTH()).from(TAuthor()).where(TAuthor_ID().equal(1)).fetchOne();
  ImmutableAuthor immutable1=author1.into(ImmutableAuthor.class);
  assertEquals((int)author1.getValue(TAuthor_ID()),immutable1.ID);
  assertEquals(author1.getValue(TAuthor_FIRST_NAME()),immutable1.firstName);
  assertEquals(author1.getValue(TAuthor_LAST_NAME()),immutable1.lastName);
  assertEquals(author1.getValue(TAuthor_DATE_OF_BIRTH()),immutable1.dateOfBirth);
  Record author2=create().select(TAuthor_ID(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME()).from(TAuthor()).where(TAuthor_ID().equal(1)).fetchOne();
  ImmutableAuthor immutable2=author2.into(ImmutableAuthor.class);
  assertEquals((int)author2.getValue(TAuthor_ID()),immutable2.ID);
  assertEquals(author2.getValue(TAuthor_FIRST_NAME()),immutable2.firstName);
  assertEquals(author2.getValue(TAuthor_LAST_NAME()),immutable2.lastName);
  assertEquals(null,immutable2.dateOfBirth);
  try {
    create().select(TAuthor_ID(),TAuthor_FIRST_NAME()).from(TAuthor()).where(TAuthor_ID().equal(1)).fetchOne().into(ImmutableAuthor.class);
    fail();
  }
 catch (  MappingException expected) {
  }
  try {
    create().select(TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),TAuthor_ID()).from(TAuthor()).where(TAuthor_ID().equal(1)).fetchOne().into(ImmutableAuthor.class);
    fail();
  }
 catch (  MappingException expected) {
  }
}
