{
  Result<Record1<Integer>> result1=create().select(F_TABLES1.COLUMN_VALUE).from(F_TABLES1.call()).fetch();
  assertEquals(1,result1.size());
  assertEquals(1,result1.get(0).size());
  assertEquals(1,(int)result1.getValue(0,F_TABLES1.COLUMN_VALUE));
  FTables2Record result2=create().selectFrom(F_TABLES2.call()).fetchOne();
  assertEquals(1L,(long)result2.getColumnValue());
  FTables3Record result3=create().selectFrom(F_TABLES3.call()).fetchOne();
  assertEquals("1",result3.getColumnValue());
  Result<FTables4Record> result4a=create().selectFrom(F_TABLES4.call(val(null,Integer.class))).fetch();
  assertEquals(BOOK_IDS,result4a.getValues(F_TABLES4.ID));
  assertEquals(BOOK_TITLES,result4a.getValues(F_TABLES4.TITLE));
  Result<Record2<Integer,String>> result4b=create().select(F_TABLES4.ID,F_TABLES4.TITLE).from(T_BOOK,lateral(F_TABLES4.call(T_BOOK.ID))).where(F_TABLES4.TITLE.like("%a%")).orderBy(F_TABLES4.ID).fetch();
  assertEquals(BOOK_IDS.subList(1,4),result4b.getValues(F_TABLES4.ID));
  assertEquals(BOOK_TITLES.subList(1,4),result4b.getValues(F_TABLES4.TITLE));
}
