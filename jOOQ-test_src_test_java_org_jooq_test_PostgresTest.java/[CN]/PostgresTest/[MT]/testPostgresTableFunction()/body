{
  FTables1 t1=F_TABLES1.call().as("t1");
  FTables2 t2=F_TABLES2.call().as("t2");
  FTables3 t3=F_TABLES3.call().as("t3");
  FTables4 t4a=F_TABLES4.call(val(null,Integer.class)).as("t4");
  FTables4 t4b=F_TABLES4.call(T_BOOK.ID).as("t4");
  Result<Record1<Integer>> result1=create().select(t1.COLUMN_VALUE).from(t1).fetch();
  assertEquals(1,result1.size());
  assertEquals(1,result1.get(0).size());
  assertEquals(1,(int)result1.getValue(0,t1.COLUMN_VALUE));
  FTables2Record result2=create().selectFrom(t2).fetchOne();
  assertEquals(1L,(long)result2.getColumnValue());
  FTables3Record result3=create().selectFrom(t3).fetchOne();
  assertEquals("1",result3.getColumnValue());
  Result<FTables4Record> result4a=create().selectFrom(t4a).fetch();
  assertEquals(BOOK_IDS,result4a.getValues(t4a.ID));
  assertEquals(BOOK_TITLES,result4a.getValues(t4a.TITLE));
  Result<Record2<Integer,String>> result4b=create().select(t4b.ID,t4b.TITLE).from(T_BOOK,lateral(t4b)).where(t4b.TITLE.like("%a%")).orderBy(t4b.ID).fetch();
  assertEquals(BOOK_IDS.subList(1,4),result4b.getValues(t4b.ID));
  assertEquals(BOOK_TITLES.subList(1,4),result4b.getValues(t4b.TITLE));
}
