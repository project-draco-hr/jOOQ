{
  ExecuteContext ctx=new DefaultExecuteContext(configuration,new Query[]{query});
  ExecuteListener listener=new ExecuteListeners(ctx);
  Connection connection=ctx.connection();
  ParamCollector collector=new ParamCollector(configuration,false);
  collector.visit(query);
  List<Param<?>> params=new ArrayList<Param<?>>();
  for (  Entry<String,Param<?>> entry : collector.resultList)   params.add(entry.getValue());
  DataType<?>[] paramTypes=dataTypes(params.toArray(new Field[0]));
  try {
    listener.renderStart(ctx);
    ctx.sql(create.render(query));
    listener.renderEnd(ctx);
    listener.prepareStart(ctx);
    ctx.statement(connection.prepareStatement(ctx.sql()));
    listener.prepareEnd(ctx);
    for (    Object[] bindValues : allBindValues) {
      listener.bindStart(ctx);
      visitAll(new DefaultBindContext(configuration,ctx.statement()),(paramTypes.length > 0) ? fields(bindValues,paramTypes) : fields(bindValues));
      listener.bindEnd(ctx);
      ctx.statement().addBatch();
    }
    listener.executeStart(ctx);
    int[] result=ctx.statement().executeBatch();
    int[] batchRows=ctx.batchRows();
    for (int i=0; i < batchRows.length && i < result.length; i++)     batchRows[i]=result[i];
    listener.executeEnd(ctx);
    return result;
  }
 catch (  ControlFlowSignal e) {
    throw e;
  }
catch (  RuntimeException e) {
    ctx.exception(e);
    listener.exception(ctx);
    throw ctx.exception();
  }
catch (  SQLException e) {
    ctx.sqlException(e);
    listener.exception(ctx);
    throw ctx.exception();
  }
 finally {
    Utils.safeClose(listener,ctx);
  }
}
