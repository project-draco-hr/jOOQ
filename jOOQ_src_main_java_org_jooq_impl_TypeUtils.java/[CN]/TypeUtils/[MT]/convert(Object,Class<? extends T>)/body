{
  if (from == null) {
    return null;
  }
 else {
    final Class<?> fromClass=from.getClass();
    if (toClass == fromClass) {
      return (T)from;
    }
 else     if (fromClass == byte[].class) {
      return convert(new String((byte[])from),toClass);
    }
 else     if (fromClass.isArray()) {
      return (T)convertArray((Object[])from,toClass);
    }
 else     if (toClass == String.class) {
      return (T)from.toString();
    }
 else     if (toClass == Object.class) {
      return (T)from;
    }
 else     if (toClass == Byte.class) {
      return (T)Byte.valueOf(new BigDecimal(from.toString().trim()).byteValue());
    }
 else     if (toClass == Short.class) {
      return (T)Short.valueOf(new BigDecimal(from.toString().trim()).shortValue());
    }
 else     if (toClass == Integer.class) {
      return (T)Integer.valueOf(new BigDecimal(from.toString().trim()).intValue());
    }
 else     if (toClass == Long.class) {
      return (T)Long.valueOf(new BigDecimal(from.toString().trim()).longValue());
    }
 else     if (toClass == Float.class) {
      return (T)Float.valueOf(from.toString().trim());
    }
 else     if (toClass == Double.class) {
      return (T)Double.valueOf(from.toString().trim());
    }
 else     if (toClass == BigDecimal.class) {
      return (T)new BigDecimal(from.toString().trim());
    }
 else     if (toClass == BigInteger.class) {
      return (T)new BigDecimal(from.toString().trim()).toBigInteger();
    }
 else     if (toClass == Boolean.class) {
      String s=from.toString().toLowerCase().trim();
      if (TRUE_VALUES.contains(s)) {
        return (T)Boolean.TRUE;
      }
 else       if (FALSE_VALUES.contains(s)) {
        return (T)Boolean.FALSE;
      }
 else {
        return null;
      }
    }
 else     if (toClass == Date.class && java.util.Date.class.isAssignableFrom(fromClass)) {
      return (T)new Date(((java.util.Date)from).getTime());
    }
 else     if (toClass == Time.class && java.util.Date.class.isAssignableFrom(fromClass)) {
      return (T)new Time(((java.util.Date)from).getTime());
    }
 else     if (toClass == Timestamp.class && java.util.Date.class.isAssignableFrom(fromClass)) {
      return (T)new Timestamp(((java.util.Date)from).getTime());
    }
  }
  throw new SQLDialectNotSupportedException("Cannot convert from " + from + " to "+ toClass);
}
