{
  final Object[] result=new Object[1];
  final Map<String,Object> map=new HashMap<String,Object>();
  final InvocationHandler handler=new InvocationHandler(){
    @SuppressWarnings("null") @Override public Object invoke(    Object proxy,    Method method,    Object[] args){
      String name=method.getName();
      int length=(args == null ? 0 : args.length);
      if (length == 0 && name.startsWith("get"))       return map.get(name.substring(3));
 else       if (length == 0 && name.startsWith("is"))       return map.get(name.substring(2));
 else       if (length == 1 && name.startsWith("set"))       map.put(name.substring(3),args[0]);
 else       if (method.isDefault())       try {
        if (constructor == null)         constructor=accessible(Lookup.class.getDeclaredConstructor(Class.class,int.class));
        Class<?> declaringClass=method.getDeclaringClass();
        return constructor.newInstance(declaringClass,Lookup.PRIVATE).unreflectSpecial(method,declaringClass).bindTo(result[0]).invokeWithArguments(args);
      }
 catch (      Throwable e) {
        throw new MappingException("Cannot invoke default method",e);
      }
      return null;
    }
  }
;
  result[0]=Proxy.newProxyInstance(type.getClassLoader(),new Class[]{type},handler);
  return (E)result[0];
}
