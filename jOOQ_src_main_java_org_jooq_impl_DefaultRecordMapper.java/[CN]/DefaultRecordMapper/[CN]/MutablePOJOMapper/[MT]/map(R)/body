{
  try {
    E result=instance != null ? instance : constructor.newInstance();
    for (int i=0; i < fields.length; i++) {
      for (      java.lang.reflect.Field member : members[i]) {
        if ((member.getModifiers() & Modifier.FINAL) == 0) {
          map(record,result,member,i);
        }
      }
      for (      java.lang.reflect.Method method : methods[i]) {
        Class<?> mType=method.getParameterTypes()[0];
        Object value=record.get(i,mType);
        if (value instanceof Collection && List.class.isAssignableFrom(mType)) {
          Class componentType=(Class)((ParameterizedType)method.getGenericParameterTypes()[0]).getActualTypeArguments()[0];
          method.invoke(result,Convert.convert((Collection)value,componentType));
        }
 else {
          method.invoke(result,record.get(i,mType));
        }
      }
    }
    for (    Entry<String,List<RecordMapper<R,Object>>> entry : nested.entrySet()) {
      String prefix=entry.getKey();
      for (      RecordMapper<R,Object> mapper : entry.getValue()) {
        Object value=mapper.map(record);
        for (        java.lang.reflect.Field member : getMatchingMembers(configuration,type,prefix)) {
          if ((member.getModifiers() & Modifier.FINAL) == 0) {
            map(value,result,member);
          }
        }
        for (        Method method : getMatchingSetters(configuration,type,prefix)) {
          method.invoke(result,value);
        }
      }
    }
    return result;
  }
 catch (  Exception e) {
    throw new MappingException("An error ocurred when mapping record to " + type,e);
  }
}
