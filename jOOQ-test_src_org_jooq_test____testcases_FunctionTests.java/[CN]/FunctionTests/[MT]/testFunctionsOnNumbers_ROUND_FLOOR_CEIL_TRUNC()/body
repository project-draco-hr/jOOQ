{
  boolean sqlite=(dialect() == SQLITE);
  boolean ingres=false;
  Field<Float> f1a=round(1.111f);
  Field<Float> f2a=round(1.111f,2);
  Field<Float> f3a=floor(1.111f);
  Field<Float> f4a=ceil(1.111f);
  Field<Float> f5a=sqlite || ingres ? inline(1.0f) : trunc(1.111f);
  Field<Float> f6a=sqlite || ingres ? inline(1.11f) : trunc(1.111f,2);
  Field<Float> f7a=sqlite || ingres ? inline(10.0f) : trunc(11.111f,-1);
  Record r1=create().select(f1a).select(f2a,f3a).select(f4a).select(f5a,f6a,f7a).fetchOne();
  assertNotNull(r1);
  assertEquals("1.0",r1.getValue(f1a,String.class));
  assertEquals("1.11",r1.getValue(f2a,String.class));
  assertEquals("1.0",r1.getValue(f3a,String.class));
  assertEquals("2.0",r1.getValue(f4a,String.class));
  assertEquals("1.0",r1.getValue(f5a,String.class));
  assertEquals("1.11",r1.getValue(f6a,String.class));
  assertEquals("10.0",r1.getValue(f7a,String.class));
  Field<Double> f1b=round(-1.111);
  Field<Double> f2b=round(-1.111,2);
  Field<Double> f3b=floor(-1.111);
  Field<Double> f4b=ceil(-1.111);
  Field<Double> f5b=sqlite || ingres ? inline(1.0) : trunc(1.111);
  Field<Double> f6b=sqlite || ingres ? inline(1.11) : trunc(1.111,2);
  Field<Double> f7b=sqlite || ingres ? inline(10.0) : trunc(11.111,-1);
  Record r2=create().select(f1b,f2b,f3b,f4b,f6b,f6b,f7b).fetchOne();
  assertEquals("-1.0",r2.getValue(f1b,String.class));
  assertEquals("-1.11",r2.getValue(f2b,String.class));
  assertEquals("-2.0",r2.getValue(f3b,String.class));
  assertEquals("-1.0",r2.getValue(f4b,String.class));
  assertEquals("1.0",r2.getValue(f5b,String.class));
  assertEquals("1.11",r2.getValue(f6b,String.class));
  assertEquals("10.0",r2.getValue(f7b,String.class));
  Field<Float> f1c=round(2.0f);
  Field<Float> f2c=round(2.0f,2);
  Field<Float> f3c=floor(2.0f);
  Field<Float> f4c=ceil(2.0f);
  Field<Double> f1d=round(-2.0);
  Field<Double> f2d=round(-2.0,2);
  Field<Double> f3d=floor(-2.0);
  Field<Double> f4d=ceil(-2.0);
  Field<Float> f1e=ingres ? inline(0.0f) : round(0.0f);
  Field<Float> f2e=ingres ? inline(0.0f) : round(0.0f,2);
  Field<Float> f3e=ingres ? inline(0.0f) : floor(0.0f);
  Field<Float> f4e=ingres ? inline(0.0f) : ceil(0.0f);
  Field<Double> f1f=round(0.0);
  Field<Double> f2f=round(0.0,2);
  Field<Double> f3f=floor(0.0);
  Field<Double> f4f=ceil(0.0);
  Record record=create().select(f1c,f2c,f3c,f4c).select(f1d,f2d,f3d,f4d).select(f1e,f2e,f3e,f4e).select(f1f,f2f,f3f,f4f).fetchOne();
  assertEquals("2.0",record.getValue(f1c,String.class));
  assertEquals("2.0",record.getValue(f2c,String.class));
  assertEquals("2.0",record.getValue(f3c,String.class));
  assertEquals("2.0",record.getValue(f4c,String.class));
  assertEquals("-2.0",record.getValue(f1d,String.class));
  assertEquals("-2.0",record.getValue(f2d,String.class));
  assertEquals("-2.0",record.getValue(f3d,String.class));
  assertEquals("-2.0",record.getValue(f4d,String.class));
  assertEquals("0.0",record.getValue(f1e,String.class));
  assertEquals("0.0",record.getValue(f2e,String.class));
  assertEquals("0.0",record.getValue(f3e,String.class));
  assertEquals("0.0",record.getValue(f4e,String.class));
  assertEquals("0.0",record.getValue(f1f,String.class));
  assertEquals("0.0",record.getValue(f2f,String.class));
  assertEquals("0.0",record.getValue(f3f,String.class));
  assertEquals("0.0",record.getValue(f4f,String.class));
}
