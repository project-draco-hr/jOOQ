{
  assertEquals("abc",create().select(field("cast('abc' as char(3))",SQLDataType.CHAR)).where(field("cast('abc' as char(3))",SQLDataType.CHAR).equal("abc")).fetchOne(0,String.class));
  assertEquals("abc",create().select(trim("abc")).fetchOne(0));
  assertEquals("abc",create().select(trim("abc  ")).fetchOne(0));
  assertEquals("abc",create().select(trim("  abc")).fetchOne(0));
  assertEquals("abc",create().select(trim("  abc  ")).fetchOne(0));
  assertEquals("  abc",create().select(rtrim("  abc  ")).fetchOne(0));
  assertEquals("abc  ",create().select(ltrim("  abc  ")).fetchOne(0));
  assertEquals("abc",create().select(lower("ABC")).fetchOne(0));
  assertEquals("ABC",create().select(upper("abc")).fetchOne(0));
  assertEquals("abc",create().select(concat("a","b","c")).fetchOne(0));
  assertEquals("George Orwell",create().select(concat(TAuthor_FIRST_NAME(),val(" "),TAuthor_LAST_NAME())).from(TAuthor()).where(TAuthor_FIRST_NAME().equal("George")).fetchOne(0));
  assertEquals("1ab45",create().select(concat(val(1),val("ab"),val(45))).fetchOne(0));
  SelectQuery q=create().selectQuery();
  Field<String> constant=val("abc");
switch (getDialect()) {
case DERBY:
    log.info("SKIPPING","replace function test");
  break;
default :
{
  Field<String> x=replace(constant,"b","x");
  Field<String> y=replace(constant,"b","y");
  Field<String> z=replace(constant,"b");
  Record record=create().select(x,y,z).fetchOne();
  assertEquals("axc",record.getValue(x));
  assertEquals("ayc",record.getValue(y));
  assertEquals("ac",record.getValue(z));
}
}
Field<Integer> length=length(constant);
Field<Integer> charLength=charLength(constant);
Field<Integer> bitLength=bitLength(constant);
Field<Integer> octetLength=octetLength(constant);
q.addSelect(length,charLength,bitLength,octetLength);
q.execute();
Record record=q.getResult().get(0);
assertEquals(Integer.valueOf(3),record.getValue(length));
assertEquals(Integer.valueOf(3),record.getValue(charLength));
switch (getDialect()) {
case HSQLDB:
case H2:
assertEquals(Integer.valueOf(48),record.getValue(bitLength));
assertEquals(Integer.valueOf(6),record.getValue(octetLength));
break;
default :
assertEquals(Integer.valueOf(24),record.getValue(bitLength));
assertEquals(Integer.valueOf(3),record.getValue(octetLength));
break;
}
switch (getDialect()) {
case DERBY:
log.info("SKIPPING","RPAD and LPAD functions");
break;
default :
{
Record result=create().select(rpad(val("aa"),4),rpad(val("aa"),4,"-"),lpad(val("aa"),4),lpad(val("aa"),4,"-")).fetchOne();
assertEquals("aa  ",result.getValue(0));
assertEquals("aa--",result.getValue(1));
assertEquals("  aa",result.getValue(2));
assertEquals("--aa",result.getValue(3));
break;
}
}
Record result=create().select(substring(val("abcde"),1),substring(val("abcde"),1,2),substring(val("abcde"),3),substring(val("abcde"),3,2)).fetchOne();
assertEquals("abcde",result.getValue(0));
assertEquals("ab",result.getValue(1));
assertEquals("cde",result.getValue(2));
assertEquals("cd",result.getValue(3));
result=create().select(substring(TAuthor_FIRST_NAME(),2),substring(TAuthor_FIRST_NAME(),2,2)).from(TAuthor()).where(TAuthor_ID().equal(1)).fetchOne();
assertEquals("eorge",result.getValue(substring(TAuthor_FIRST_NAME(),2)));
assertEquals("eo",result.getValue(substring(TAuthor_FIRST_NAME(),2,2)));
switch (getDialect()) {
case DERBY:
case SQLITE:
log.info("SKIPPING","REPEAT function");
break;
default :
{
result=create().select(repeat("a",1),repeat("ab",2),repeat("abc",3)).fetchOne();
assertEquals("a",result.getValue(0));
assertEquals("abab",result.getValue(1));
assertEquals("abcabcabc",result.getValue(2));
break;
}
}
switch (getDialect()) {
case DERBY:
case INGRES:
case SQLITE:
log.info("SKIPPING","ASCII function test");
break;
default :
record=create().select(ascii("A"),ascii("a"),ascii("-"),ascii(" ")).fetchOne();
assertEquals((int)'A',(int)record.getValueAsInteger(0));
assertEquals((int)'a',(int)record.getValueAsInteger(1));
assertEquals((int)'-',(int)record.getValueAsInteger(2));
assertEquals((int)' ',(int)record.getValueAsInteger(3));
break;
}
}
