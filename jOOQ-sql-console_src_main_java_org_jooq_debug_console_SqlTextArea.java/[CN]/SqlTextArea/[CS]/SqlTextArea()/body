{
  setTabSize(2);
  setTabsEmulated(true);
  setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_SQL);
  setMarkOccurrences(true);
  setAnimateBracketMatching(false);
  setAutoIndentEnabled(true);
  setCurrentLineHighlightColor(new Color(232,242,254));
  setMarkOccurrencesColor(new Color(220,220,220));
  setMatchedBracketBGColor(null);
  setMatchedBracketBorderColor(new Color(192,192,192));
  getActionMap().put("copy",new RSyntaxTextAreaEditorKit.CopyAsRtfAction());
  Font editorFont=getFont().deriveFont(UIManager.getFont("TextField.font").getSize2D());
  SyntaxScheme syntaxScheme=getSyntaxScheme();
  syntaxScheme.setStyle(Token.SEPARATOR,new Style(new Color(200,0,0),null));
  syntaxScheme.setStyle(Token.RESERVED_WORD,new Style(Color.BLUE,null,editorFont));
  setFont(new Font("Monospaced",editorFont.getStyle(),editorFont.getSize()));
  addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      boolean isControlDown=e.isControlDown();
      boolean isShiftDown=e.isShiftDown();
switch (e.getKeyCode()) {
case KeyEvent.VK_P:
        if (isControlDown && isShiftDown) {
          int position=RSyntaxUtilities.getMatchingBracketPosition(SqlTextArea.this);
          if (position >= 0) {
            setCaretPosition(position + 1);
          }
        }
      break;
case KeyEvent.VK_F:
    if (isControlDown && isShiftDown) {
      formatSelection();
    }
  break;
}
}
}
);
addMouseListener(new MouseAdapter(){
@Override public void mousePressed(MouseEvent e){
maybeShowPopup(e);
}
@Override public void mouseReleased(MouseEvent e){
maybeShowPopup(e);
}
private void maybeShowPopup(MouseEvent e){
if (e.isPopupTrigger()) {
boolean isEditable=isEditable();
JPopupMenu popupMenu=new JPopupMenu();
final Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
JMenuItem copyClipboardMenuItem=new JMenuItem("Copy");
copyClipboardMenuItem.setEnabled(getSelectionStart() < getSelectionEnd());
copyClipboardMenuItem.addActionListener(new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    copyAsRtf();
  }
}
);
popupMenu.add(copyClipboardMenuItem);
JMenuItem pasteClipboardMenuItem=new JMenuItem("Paste");
pasteClipboardMenuItem.setEnabled(false);
if (isEditable && clipboard.isDataFlavorAvailable(DataFlavor.stringFlavor)) {
  try {
    final String data=(String)clipboard.getData(DataFlavor.stringFlavor);
    if (data != null && data.length() > 0) {
      pasteClipboardMenuItem.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          replaceSelection(data);
        }
      }
);
      pasteClipboardMenuItem.setEnabled(true);
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
popupMenu.add(pasteClipboardMenuItem);
popupMenu.addSeparator();
JMenuItem formatMenuItem=new JMenuItem("Format");
formatMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,KeyEvent.CTRL_MASK | KeyEvent.SHIFT_MASK));
formatMenuItem.setEnabled(isEditable && getSelectionStart() < getSelectionEnd());
formatMenuItem.addActionListener(new ActionListener(){
  @Override public void actionPerformed(  ActionEvent e){
    formatSelection();
  }
}
);
popupMenu.add(formatMenuItem);
if (popupMenu.getComponentCount() > 0) {
  popupMenu.show(SqlTextArea.this,e.getX(),e.getY());
}
}
}
}
);
}
