{
  List<ColumnDefinition> result=new ArrayList<ColumnDefinition>();
  for (  Record record : create().select(COLUMNS.COLUMN_NAME,COLUMNS.ORDINAL_POSITION,COLUMNS.DATA_TYPE,COLUMNS.CHARACTER_MAXIMUM_LENGTH,COLUMNS.NUMERIC_PRECISION,COLUMNS.NUMERIC_SCALE,COLUMNS.IS_NULLABLE,COLUMNS.COLUMN_DEFAULT,COLUMNS.UDT_SCHEMA,COLUMNS.UDT_NAME,PG_DESCRIPTION.DESCRIPTION).from(COLUMNS).join(PG_NAMESPACE).on(COLUMNS.TABLE_SCHEMA.eq(PG_NAMESPACE.NSPNAME)).join(PG_CLASS).on(PG_CLASS.RELNAME.eq(COLUMNS.TABLE_NAME)).and(PG_CLASS.RELNAMESPACE.eq(oid(PG_NAMESPACE))).leftOuterJoin(PG_DESCRIPTION).on(PG_DESCRIPTION.OBJOID.eq(oid(PG_CLASS))).and(PG_DESCRIPTION.OBJSUBID.eq(COLUMNS.ORDINAL_POSITION)).where(COLUMNS.TABLE_SCHEMA.equal(getSchema().getName())).and(COLUMNS.TABLE_NAME.equal(getName())).orderBy(COLUMNS.ORDINAL_POSITION).fetch()) {
    SchemaDefinition typeSchema=null;
    String schemaName=record.get(COLUMNS.UDT_SCHEMA);
    if (schemaName != null)     typeSchema=getDatabase().getSchema(schemaName);
    DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),typeSchema,record.get(COLUMNS.DATA_TYPE),record.get(COLUMNS.CHARACTER_MAXIMUM_LENGTH),record.get(COLUMNS.NUMERIC_PRECISION),record.get(COLUMNS.NUMERIC_SCALE),record.get(COLUMNS.IS_NULLABLE,boolean.class),record.get(COLUMNS.COLUMN_DEFAULT),record.get(COLUMNS.UDT_NAME));
    ColumnDefinition column=new DefaultColumnDefinition(getDatabase().getTable(getSchema(),getName()),record.get(COLUMNS.COLUMN_NAME),record.get(COLUMNS.ORDINAL_POSITION,int.class),type,defaultString(record.get(COLUMNS.COLUMN_DEFAULT)).trim().toLowerCase().startsWith("nextval"),record.get(PG_DESCRIPTION.DESCRIPTION));
    result.add(applySyntheticIdentities(column));
  }
  return result;
}
