{
  jOOQAbstractTest.reset=false;
  Select<A> q=create().selectFrom(TAuthor()).orderBy(TAuthor_LAST_NAME());
  q=runSerialisation(q);
  try {
    q.execute();
    fail();
  }
 catch (  DetachedException expected) {
  }
  create().attach(q);
  assertEquals(2,q.execute());
  assertEquals("Coelho",q.getResult().getValue(0,TAuthor_LAST_NAME()));
  assertEquals("Orwell",q.getResult().getValue(1,TAuthor_LAST_NAME()));
  q=runSerialisation(q);
  assertEquals("Coelho",q.getResult().getValue(0,TAuthor_LAST_NAME()));
  assertEquals("Orwell",q.getResult().getValue(1,TAuthor_LAST_NAME()));
  Result<A> result=q.getResult();
  result=runSerialisation(result);
  assertEquals("Coelho",result.getValue(0,TAuthor_LAST_NAME()));
  assertEquals("Orwell",result.getValue(1,TAuthor_LAST_NAME()));
  try {
    result.get(1).setValue(TAuthor_FIRST_NAME(),"Georgie");
    result.get(1).store();
    fail();
  }
 catch (  DetachedException expected) {
  }
  create().attach(result);
  assertEquals(1,result.get(1).store());
  assertEquals("Georgie",create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Orwell")).getValue(TAuthor_FIRST_NAME()));
  ConnectionProviderListener.c=create().getConnection();
  try {
    q=create(new Settings().withExecuteListeners(ConnectionProviderListener.class.getName())).selectFrom(TAuthor()).orderBy(TAuthor_LAST_NAME());
    q=runSerialisation(q);
    q.execute();
    result=q.getResult();
    result=runSerialisation(result);
    assertEquals("Coelho",result.getValue(0,TAuthor_LAST_NAME()));
    assertEquals("Orwell",result.getValue(1,TAuthor_LAST_NAME()));
    result.get(1).setValue(TAuthor_FIRST_NAME(),"Gee-Gee");
    result.get(1).store();
  }
  finally {
    ConnectionProviderListener.c=null;
  }
  if (cSequences() == null) {
    log.info("SKIPPING","sequences test");
  }
 else {
    Select<?> s;
    s=create().select(SAuthorID().nextval(),SAuthorID().currval());
    s=runSerialisation(s);
  }
}
