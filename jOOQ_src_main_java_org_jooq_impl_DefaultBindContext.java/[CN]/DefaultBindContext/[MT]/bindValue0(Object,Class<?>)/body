{
  SQLDialect dialect=configuration.getDialect();
  Converter<?,?> converter=DataTypes.converter(type);
  if (converter != null) {
    value=((Converter)converter).to(value);
    type=converter.fromType();
  }
  if (log.isTraceEnabled()) {
    if (value != null && value.getClass().isArray() && value.getClass() != byte[].class) {
      log.trace("Binding variable " + peekIndex(),Arrays.asList((Object[])value) + " (" + type+ ")");
    }
 else {
      log.trace("Binding variable " + peekIndex(),value + " (" + type+ ")");
    }
  }
  if (value == null) {
    int sqlType=DefaultDataType.getDataType(dialect,type).getSQLType();
    if (ArrayRecord.class.isAssignableFrom(type)) {
      String typeName=Utils.newArrayRecord((Class<ArrayRecord<?>>)type,configuration).getName();
      stmt.setNull(nextIndex(),sqlType,typeName);
    }
 else     if (UDTRecord.class.isAssignableFrom(type)) {
      String typeName=Utils.newRecord((Class<UDTRecord<?>>)type).getUDT().getName();
      stmt.setNull(nextIndex(),sqlType,typeName);
    }
 else     if (asList(POSTGRES,SYBASE).contains(configuration.getDialect()) && sqlType == Types.BLOB) {
      stmt.setNull(nextIndex(),Types.BINARY);
    }
 else     if (sqlType != Types.OTHER) {
      stmt.setNull(nextIndex(),sqlType);
    }
 else     if (configuration.getDialect() == SQLSERVER) {
      stmt.setNull(nextIndex(),sqlType);
    }
 else     if (configuration.getDialect() == SYBASE) {
      stmt.setNull(nextIndex(),Types.VARCHAR);
    }
 else {
      stmt.setObject(nextIndex(),null);
    }
  }
 else   if (type == Blob.class) {
    stmt.setBlob(nextIndex(),(Blob)value);
  }
 else   if (type == Boolean.class) {
    stmt.setBoolean(nextIndex(),(Boolean)value);
  }
 else   if (type == BigDecimal.class) {
    if (dialect == SQLITE) {
      stmt.setString(nextIndex(),value.toString());
    }
 else {
      stmt.setBigDecimal(nextIndex(),(BigDecimal)value);
    }
  }
 else   if (type == BigInteger.class) {
    if (dialect == SQLITE) {
      stmt.setString(nextIndex(),value.toString());
    }
 else {
      stmt.setBigDecimal(nextIndex(),new BigDecimal((BigInteger)value));
    }
  }
 else   if (type == Byte.class) {
    stmt.setByte(nextIndex(),(Byte)value);
  }
 else   if (type == byte[].class) {
    stmt.setBytes(nextIndex(),(byte[])value);
  }
 else   if (type == Clob.class) {
    stmt.setClob(nextIndex(),(Clob)value);
  }
 else   if (type == Double.class) {
    stmt.setDouble(nextIndex(),(Double)value);
  }
 else   if (type == Float.class) {
    stmt.setFloat(nextIndex(),(Float)value);
  }
 else   if (type == Integer.class) {
    stmt.setInt(nextIndex(),(Integer)value);
  }
 else   if (type == Long.class) {
    stmt.setLong(nextIndex(),(Long)value);
  }
 else   if (type == Short.class) {
    stmt.setShort(nextIndex(),(Short)value);
  }
 else   if (type == String.class) {
    stmt.setString(nextIndex(),(String)value);
  }
 else   if (type == Date.class) {
    if (dialect == SQLITE) {
      stmt.setString(nextIndex(),((Date)value).toString());
    }
 else {
      stmt.setDate(nextIndex(),(Date)value);
    }
  }
 else   if (type == Time.class) {
    if (dialect == SQLITE) {
      stmt.setString(nextIndex(),((Time)value).toString());
    }
 else {
      stmt.setTime(nextIndex(),(Time)value);
    }
  }
 else   if (type == Timestamp.class) {
    if (dialect == SQLITE) {
      stmt.setString(nextIndex(),((Timestamp)value).toString());
    }
 else {
      stmt.setTimestamp(nextIndex(),(Timestamp)value);
    }
  }
 else   if (type == YearToMonth.class) {
    if (dialect == POSTGRES) {
      stmt.setObject(nextIndex(),toPGInterval((YearToMonth)value));
    }
 else {
      stmt.setString(nextIndex(),value.toString());
    }
  }
 else   if (type == DayToSecond.class) {
    if (dialect == POSTGRES) {
      stmt.setObject(nextIndex(),toPGInterval((DayToSecond)value));
    }
 else {
      stmt.setString(nextIndex(),value.toString());
    }
  }
 else   if (UNumber.class.isAssignableFrom(type)) {
    stmt.setString(nextIndex(),value.toString());
  }
 else   if (type == UUID.class) {
switch (dialect) {
case H2:
case POSTGRES:
{
        stmt.setObject(nextIndex(),value);
        break;
      }
case SQLSERVER:
case SYBASE:
default :
{
      stmt.setString(nextIndex(),value.toString());
      break;
    }
}
}
 else if (type.isArray()) {
switch (dialect) {
case POSTGRES:
{
    stmt.setString(nextIndex(),toPGArrayString((Object[])value));
    break;
  }
case HSQLDB:
stmt.setArray(nextIndex(),new DefaultArray(dialect,(Object[])value,type));
break;
case H2:
stmt.setObject(nextIndex(),value);
break;
default :
throw new SQLDialectNotSupportedException("Cannot bind ARRAY types in dialect " + dialect);
}
}
 else if (ArrayRecord.class.isAssignableFrom(type)) {
Connection connection=getConnectionProvider().acquire();
ArrayRecord<?> arrayRecord=(ArrayRecord<?>)value;
stmt.setArray(nextIndex(),on(connection).call("createARRAY",arrayRecord.getName(),arrayRecord.get()).<Array>get());
}
 else if (EnumType.class.isAssignableFrom(type)) {
stmt.setString(nextIndex(),((EnumType)value).getLiteral());
}
 else {
stmt.setObject(nextIndex(),value);
}
return this;
}
