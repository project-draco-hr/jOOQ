{
  final int COL_MIN_WIDTH=4;
  final int COL_MAX_WIDTH=50;
  final int NUM_COL_MAX_WIDTH=100;
  final int MAX_RECORDS=min(50,maxRecords);
  final int[] decimalPlaces=new int[fields.length];
  final int[] widths=new int[fields.length];
  for (int index=0; index < fields.length; index++) {
    if (Number.class.isAssignableFrom(fields[index].getType())) {
      List<Integer> decimalPlacesList=new ArrayList<Integer>();
      decimalPlacesList.add(0);
      String value;
      for (int i=0; i < min(MAX_RECORDS,size()); i++) {
        value=format0(getValue(i,index),get(i).changed(index));
        decimalPlacesList.add(getDecimalPlaces(value));
      }
      decimalPlaces[index]=Collections.max(decimalPlacesList);
    }
  }
  int colMaxWidth;
  for (int index=0; index < fields.length; index++) {
    boolean isNumCol=Number.class.isAssignableFrom(fields[index].getType());
    colMaxWidth=isNumCol ? NUM_COL_MAX_WIDTH : COL_MAX_WIDTH;
    List<Integer> widthList=new ArrayList<Integer>();
    widthList.add(min(colMaxWidth,max(COL_MIN_WIDTH,fields[index].getName().length())));
    String value;
    for (int i=0; i < min(MAX_RECORDS,size()); i++) {
      value=format0(getValue(i,index),get(i).changed(index));
      if (isNumCol) {
        value=alignNumberValue(decimalPlaces[index],value);
      }
      widthList.add(min(colMaxWidth,value.length()));
    }
    widths[index]=Collections.max(widthList);
  }
  StringBuilder sb=new StringBuilder();
  sb.append("+");
  for (int index=0; index < fields.length; index++) {
    sb.append(rightPad("",widths[index],"-"));
    sb.append("+");
  }
  sb.append("\n|");
  for (int index=0; index < fields.length; index++) {
    String padded;
    if (Number.class.isAssignableFrom(fields[index].getType())) {
      padded=leftPad(fields[index].getName(),widths[index]);
    }
 else {
      padded=rightPad(fields[index].getName(),widths[index]);
    }
    sb.append(abbreviate(padded,widths[index]));
    sb.append("|");
  }
  sb.append("\n+");
  for (int index=0; index < fields.length; index++) {
    sb.append(rightPad("",widths[index],"-"));
    sb.append("+");
  }
  for (int i=0; i < min(maxRecords,size()); i++) {
    sb.append("\n|");
    for (int index=0; index < fields.length; index++) {
      String value=format0(getValue(i,index),get(i).changed(index)).replace("\n","{lf}").replace("\r","{cr}");
      String padded;
      if (Number.class.isAssignableFrom(fields[index].getType())) {
        value=alignNumberValue(decimalPlaces[index],value);
        padded=leftPad(value,widths[index]);
      }
 else {
        padded=rightPad(value,widths[index]);
      }
      sb.append(abbreviate(padded,widths[index]));
      sb.append("|");
    }
  }
  if (size() > 0) {
    sb.append("\n+");
    for (int index=0; index < fields.length; index++) {
      sb.append(rightPad("",widths[index],"-"));
      sb.append("+");
    }
  }
  if (maxRecords < size()) {
    sb.append("\n|...");
    sb.append(size() - maxRecords);
    sb.append(" record(s) truncated...");
  }
  return sb.toString();
}
