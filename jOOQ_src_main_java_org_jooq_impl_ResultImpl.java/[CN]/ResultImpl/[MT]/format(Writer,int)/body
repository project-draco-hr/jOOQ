{
  try {
    final int COL_MIN_WIDTH=4;
    final int COL_MAX_WIDTH=50;
    final int NUM_COL_MAX_WIDTH=100;
    final int MAX_RECORDS=min(50,maxRecords);
    final int[] decimalPlaces=new int[fields.fields.length];
    final int[] widths=new int[fields.fields.length];
    for (int index=0; index < fields.fields.length; index++) {
      if (Number.class.isAssignableFrom(fields.fields[index].getType())) {
        List<Integer> decimalPlacesList=new ArrayList<Integer>();
        decimalPlacesList.add(0);
        String value;
        for (int i=0; i < min(MAX_RECORDS,size()); i++) {
          value=format0(getValue(i,index),get(i).changed(index),true);
          decimalPlacesList.add(getDecimalPlaces(value));
        }
        decimalPlaces[index]=Collections.max(decimalPlacesList);
      }
    }
    int colMaxWidth;
    for (int index=0; index < fields.fields.length; index++) {
      boolean isNumCol=Number.class.isAssignableFrom(fields.fields[index].getType());
      colMaxWidth=isNumCol ? NUM_COL_MAX_WIDTH : COL_MAX_WIDTH;
      List<Integer> widthList=new ArrayList<Integer>();
      widthList.add(min(colMaxWidth,max(COL_MIN_WIDTH,fields.fields[index].getName().length())));
      String value;
      for (int i=0; i < min(MAX_RECORDS,size()); i++) {
        value=format0(getValue(i,index),get(i).changed(index),true);
        if (isNumCol) {
          value=alignNumberValue(decimalPlaces[index],value);
        }
        widthList.add(min(colMaxWidth,value.length()));
      }
      widths[index]=Collections.max(widthList);
    }
    writer.append("+");
    for (int index=0; index < fields.fields.length; index++) {
      writer.append(rightPad("",widths[index],"-"));
      writer.append("+");
    }
    writer.append("\n|");
    for (int index=0; index < fields.fields.length; index++) {
      String padded;
      if (Number.class.isAssignableFrom(fields.fields[index].getType())) {
        padded=leftPad(fields.fields[index].getName(),widths[index]);
      }
 else {
        padded=rightPad(fields.fields[index].getName(),widths[index]);
      }
      writer.append(abbreviate(padded,widths[index]));
      writer.append("|");
    }
    writer.append("\n+");
    for (int index=0; index < fields.fields.length; index++) {
      writer.append(rightPad("",widths[index],"-"));
      writer.append("+");
    }
    for (int i=0; i < min(maxRecords,size()); i++) {
      writer.append("\n|");
      for (int index=0; index < fields.fields.length; index++) {
        String value=format0(getValue(i,index),get(i).changed(index),true).replace("\n","{lf}").replace("\r","{cr}");
        String padded;
        if (Number.class.isAssignableFrom(fields.fields[index].getType())) {
          value=alignNumberValue(decimalPlaces[index],value);
          padded=leftPad(value,widths[index]);
        }
 else {
          padded=rightPad(value,widths[index]);
        }
        writer.append(abbreviate(padded,widths[index]));
        writer.append("|");
      }
    }
    if (size() > 0) {
      writer.append("\n+");
      for (int index=0; index < fields.fields.length; index++) {
        writer.append(rightPad("",widths[index],"-"));
        writer.append("+");
      }
    }
    if (maxRecords < size()) {
      writer.append("\n|...");
      writer.append("" + (size() - maxRecords));
      writer.append(" record(s) truncated...");
    }
    writer.flush();
  }
 catch (  java.io.IOException e) {
    throw new IOException("Exception while writing TEXT",e);
  }
}
