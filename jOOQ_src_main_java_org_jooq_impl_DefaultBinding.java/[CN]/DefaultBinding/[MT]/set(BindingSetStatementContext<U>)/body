{
  Configuration configuration=ctx.configuration();
  SQLDialect dialect=ctx.dialect();
  T value=converter.to(ctx.value());
  if (log.isTraceEnabled())   if (value != null && value.getClass().isArray() && value.getClass() != byte[].class)   log.trace("Binding variable " + ctx.index(),Arrays.asList((Object[])value) + " (" + type+ ")");
 else   log.trace("Binding variable " + ctx.index(),value + " (" + type+ ")");
  if (value == null) {
    int sqlType=DefaultDataType.getDataType(dialect,type).getSQLType();
    if (UDTRecord.class.isAssignableFrom(type)) {
      ctx.statement().setNull(ctx.index(),sqlType,Tools.getMappedUDTName(configuration,(Class<UDTRecord<?>>)type));
    }
 else     if (asList(POSTGRES).contains(configuration.family()) && sqlType == Types.BLOB) {
      ctx.statement().setNull(ctx.index(),Types.BINARY);
    }
 else     if (sqlType != Types.OTHER) {
      ctx.statement().setNull(ctx.index(),sqlType);
    }
 else {
      ctx.statement().setObject(ctx.index(),null);
    }
  }
 else {
    Class<?> actualType=type;
    if (actualType == Object.class) {
      actualType=value.getClass();
    }
    if (actualType == Blob.class) {
      ctx.statement().setBlob(ctx.index(),(Blob)value);
    }
 else     if (actualType == Boolean.class) {
      ctx.statement().setBoolean(ctx.index(),(Boolean)value);
    }
 else     if (actualType == BigDecimal.class) {
      if (asList(SQLITE).contains(dialect.family())) {
        ctx.statement().setString(ctx.index(),value.toString());
      }
 else {
        ctx.statement().setBigDecimal(ctx.index(),(BigDecimal)value);
      }
    }
 else     if (actualType == BigInteger.class) {
      if (asList(SQLITE).contains(dialect.family())) {
        ctx.statement().setString(ctx.index(),value.toString());
      }
 else {
        ctx.statement().setBigDecimal(ctx.index(),new BigDecimal((BigInteger)value));
      }
    }
 else     if (actualType == Byte.class) {
      ctx.statement().setByte(ctx.index(),(Byte)value);
    }
 else     if (actualType == byte[].class) {
      ctx.statement().setBytes(ctx.index(),(byte[])value);
    }
 else     if (actualType == Clob.class) {
      ctx.statement().setClob(ctx.index(),(Clob)value);
    }
 else     if (actualType == Double.class) {
      ctx.statement().setDouble(ctx.index(),(Double)value);
    }
 else     if (actualType == Float.class) {
      ctx.statement().setFloat(ctx.index(),(Float)value);
    }
 else     if (actualType == Integer.class) {
      ctx.statement().setInt(ctx.index(),(Integer)value);
    }
 else     if (actualType == Long.class) {
      ctx.statement().setLong(ctx.index(),(Long)value);
    }
 else     if (actualType == Short.class) {
      ctx.statement().setShort(ctx.index(),(Short)value);
    }
 else     if (actualType == String.class) {
      ctx.statement().setString(ctx.index(),(String)value);
    }
 else     if (actualType == Date.class) {
      Date date=(Date)value;
      if (dialect == SQLITE) {
        ctx.statement().setString(ctx.index(),date.toString());
      }
 else {
        ctx.statement().setDate(ctx.index(),date);
      }
    }
 else     if (actualType == Time.class) {
      Time time=(Time)value;
      if (dialect == SQLITE) {
        ctx.statement().setString(ctx.index(),time.toString());
      }
 else {
        ctx.statement().setTime(ctx.index(),time);
      }
    }
 else     if (actualType == Timestamp.class) {
      Timestamp timestamp=(Timestamp)value;
      if (dialect == SQLITE) {
        ctx.statement().setString(ctx.index(),timestamp.toString());
      }
 else {
        ctx.statement().setTimestamp(ctx.index(),timestamp);
      }
    }
 else     if (actualType == LocalDate.class) {
      ctx.statement().setDate(ctx.index(),Date.valueOf((LocalDate)value));
    }
 else     if (actualType == LocalTime.class) {
      ctx.statement().setTime(ctx.index(),Time.valueOf((LocalTime)value));
    }
 else     if (actualType == LocalDateTime.class) {
      ctx.statement().setTimestamp(ctx.index(),Timestamp.valueOf((LocalDateTime)value));
    }
 else     if (actualType == OffsetTime.class) {
      ctx.statement().setString(ctx.index(),value.toString());
    }
 else     if (actualType == OffsetDateTime.class) {
      ctx.statement().setString(ctx.index(),value.toString());
    }
 else     if (actualType == YearToMonth.class) {
      if (dialect.family() == POSTGRES) {
        ctx.statement().setObject(ctx.index(),toPGInterval((YearToMonth)value));
      }
 else {
        ctx.statement().setString(ctx.index(),value.toString());
      }
    }
 else     if (actualType == DayToSecond.class) {
      if (dialect.family() == POSTGRES) {
        ctx.statement().setObject(ctx.index(),toPGInterval((DayToSecond)value));
      }
 else {
        ctx.statement().setString(ctx.index(),value.toString());
      }
    }
 else     if (actualType == UByte.class) {
      ctx.statement().setShort(ctx.index(),((UByte)value).shortValue());
    }
 else     if (actualType == UShort.class) {
      ctx.statement().setInt(ctx.index(),((UShort)value).intValue());
    }
 else     if (actualType == UInteger.class) {
      ctx.statement().setLong(ctx.index(),((UInteger)value).longValue());
    }
 else     if (actualType == ULong.class) {
      ctx.statement().setBigDecimal(ctx.index(),new BigDecimal(value.toString()));
    }
 else     if (actualType == UUID.class) {
switch (dialect.family()) {
case H2:
case POSTGRES:
{
          ctx.statement().setObject(ctx.index(),value);
          break;
        }
default :
{
        ctx.statement().setString(ctx.index(),value.toString());
        break;
      }
  }
}
 else if (actualType.isArray()) {
switch (dialect.family()) {
case POSTGRES:
{
      ctx.statement().setString(ctx.index(),toPGArrayString((Object[])value));
      break;
    }
case HSQLDB:
{
    Object[] a=(Object[])value;
    Class<?> t=actualType;
    if (actualType == UUID[].class) {
      a=Convert.convertArray(a,String[].class);
      t=String[].class;
    }
    ctx.statement().setArray(ctx.index(),new MockArray(dialect,a,t));
    break;
  }
case H2:
{
  ctx.statement().setObject(ctx.index(),value);
  break;
}
default :
throw new SQLDialectNotSupportedException("Cannot bind ARRAY types in dialect " + dialect);
}
}
 else if (EnumType.class.isAssignableFrom(actualType)) {
ctx.statement().setString(ctx.index(),((EnumType)value).getLiteral());
}
 else {
ctx.statement().setObject(ctx.index(),value);
}
}
}
