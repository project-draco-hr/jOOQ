{
  if (asList(ASE,INGRES).contains(dialect())) {
    log.info("SKIPPING","Parameterised LIMIT .. OFFSET tests");
    return;
  }
  for (int i=1; i < 6; i++) {
    Select<?> s1=create().selectFrom(TBook()).limit(param("limit",i));
    Select<?> s2=create().select().from(TBook()).limit(param("limit",i));
    assertEquals(Math.min(i,4),s1.fetch().size());
    assertEquals(Math.min(i,4),s2.fetch().size());
    assertEquals(Math.min(i + 1,4),s1.bind("limit",i + 1).fetch().size());
    assertEquals(Math.min(i + 1,4),s2.bind("limit",i + 1).fetch().size());
  }
  for (int i=1; i < 6; i++) {
    Select<?> s1a=create().selectFrom(TBook()).limit(param("offset",1),i);
    Select<?> s1b=create().selectFrom(TBook()).limit(1,param("limit",i));
    Select<?> s1c=create().selectFrom(TBook()).limit(param("offset",1),param("limit",i));
    Select<?> s2a=create().selectFrom(TBook()).limit(i).offset(param("offset",1));
    Select<?> s2b=create().selectFrom(TBook()).limit(param("limit",i)).offset(1);
    Select<?> s2c=create().selectFrom(TBook()).limit(param("limit",i)).offset(param("offset",1));
    Select<?> s3a=create().select().from(TBook()).limit(param("offset",1),i);
    Select<?> s3b=create().select().from(TBook()).limit(1,param("limit",i));
    Select<?> s3c=create().select().from(TBook()).limit(param("offset",1),param("limit",i));
    Select<?> s4a=create().select().from(TBook()).limit(i).offset(param("offset",1));
    Select<?> s4b=create().select().from(TBook()).limit(param("limit",i)).offset(1);
    Select<?> s4c=create().select().from(TBook()).limit(param("limit",i)).offset(param("offset",1));
    assertEquals(Math.min(i,3),s1a.fetch().size());
    assertEquals(Math.min(i,3),s1b.fetch().size());
    assertEquals(Math.min(i,3),s1c.fetch().size());
    assertEquals(Math.min(i + 1,2),s1c.bind("limit",i + 1).bind("offset",2).fetch().size());
    assertEquals(Math.min(i,3),s2a.fetch().size());
    assertEquals(Math.min(i,3),s2b.fetch().size());
    assertEquals(Math.min(i,3),s2c.fetch().size());
    assertEquals(Math.min(i + 1,2),s2c.bind("limit",i + 1).bind("offset",2).fetch().size());
    assertEquals(Math.min(i,3),s3a.fetch().size());
    assertEquals(Math.min(i,3),s3b.fetch().size());
    assertEquals(Math.min(i,3),s3c.fetch().size());
    assertEquals(Math.min(i + 1,2),s3c.bind("limit",i + 1).bind("offset",2).fetch().size());
    assertEquals(Math.min(i,3),s4a.fetch().size());
    assertEquals(Math.min(i,3),s4b.fetch().size());
    assertEquals(Math.min(i,3),s4c.fetch().size());
    assertEquals(Math.min(i + 1,2),s4c.bind("limit",i + 1).bind("offset",2).fetch().size());
  }
  Result<B> result=create().selectFrom(TBook()).orderBy(TBook_ID(),TBook_AUTHOR_ID()).limit(param("offset",1),param("limit",2)).fetch();
  assertEquals(Integer.valueOf(2),result.getValue(0,TBook_ID()));
  assertEquals(Integer.valueOf(3),result.getValue(1,TBook_ID()));
}
