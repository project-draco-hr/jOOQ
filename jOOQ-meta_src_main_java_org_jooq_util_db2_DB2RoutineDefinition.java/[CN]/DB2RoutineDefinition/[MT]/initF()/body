{
  for (  Record record : create().select(Funcparms.ROWTYPE,Funcparms.TYPENAME,Funcparms.LENGTH,Funcparms.SCALE,Funcparms.ORDINAL,Funcparms.PARMNAME).from(FUNCPARMS).join(FUNCTIONS).on(Funcparms.FUNCSCHEMA.equal(Functions.FUNCSCHEMA),Funcparms.FUNCNAME.equal(Functions.FUNCNAME)).where(Funcparms.FUNCSCHEMA.equal(getSchema().getName()),Funcparms.FUNCNAME.equal(getName()),Functions.ORIGIN.equal("Q")).orderBy(Funcparms.FUNCNAME.asc(),Funcparms.ORDINAL.asc()).fetch()) {
    String rowType=record.getValue(Funcparms.ROWTYPE);
    String dataType=record.getValue(Funcparms.TYPENAME);
    Integer precision=record.getValue(Funcparms.LENGTH);
    Short scale=record.getValue(Funcparms.SCALE);
    int position=record.getValue(Funcparms.ORDINAL);
    String paramName=record.getValue(Funcparms.PARMNAME);
    if ("C".equals(rowType)) {
      DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),getSchema(),dataType,precision,precision,scale,null,null);
      addParameter(InOutDefinition.RETURN,new DefaultParameterDefinition(this,"RETURN_VALUE",-1,type));
    }
 else     if ("P".equals(rowType)) {
      DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),getSchema(),dataType,precision,precision,scale,null,null);
      ParameterDefinition column=new DefaultParameterDefinition(this,paramName,position,type);
      addParameter(InOutDefinition.IN,column);
    }
 else {
    }
  }
}
