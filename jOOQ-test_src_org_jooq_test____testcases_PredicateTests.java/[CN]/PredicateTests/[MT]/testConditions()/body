{
  assertEquals(Arrays.asList(2,3),create().select().from(TBook()).where(TBook_ID().between(2,3)).and(TBook_ID().betweenSymmetric(2,3)).and(TBook_ID().betweenSymmetric(3,2)).orderBy(TBook_ID()).fetch(TBook_ID()));
  assertEquals(Arrays.asList(3,4),create().select().from(TBook()).where(val(3).between(TBook_AUTHOR_ID(),TBook_ID())).orderBy(TBook_ID()).fetch(TBook_ID()));
  assertEquals(Arrays.asList(1,4),create().select().from(TBook()).where(TBook_ID().notBetween(2,3)).and(TBook_ID().notBetweenSymmetric(2,3)).and(TBook_ID().notBetweenSymmetric(3,2)).orderBy(TBook_ID()).fetch(TBook_ID()));
  assertEquals(Arrays.asList(1,2),create().select().from(TBook()).where(val(3).notBetween(TBook_AUTHOR_ID(),TBook_ID())).orderBy(TBook_ID()).fetch(TBook_ID()));
  assertEquals(Arrays.asList(),create().select().from(TBook()).where(TBook_ID().in(new Integer[0])).fetch(TBook_ID()));
  assertEquals(BOOK_IDS,create().select().from(TBook()).where(TBook_ID().notIn(new Integer[0])).orderBy(TBook_ID()).fetch(TBook_ID()));
  assertEquals(asList(1),create().select(TBook_ID()).from(TBook()).where(TBook_ID().in(val(1),castNull(Integer.class))).fetch(TBook_ID()));
  if (asList(ASE).contains(dialect())) {
    assertEquals(asList(2,3,4),create().select(TBook_ID()).from(TBook()).where(TBook_ID().notIn(val(1),castNull(Integer.class))).orderBy(TBook_ID()).fetch(TBook_ID()));
  }
 else {
    assertEquals(asList(),create().select(TBook_ID()).from(TBook()).where(TBook_ID().notIn(val(1),castNull(Integer.class))).fetch(TBook_ID()));
  }
  assertEquals(Arrays.asList(1,2),create().select().from(TBook()).where(TBook_ID().in(1,2)).orderBy(TBook_ID()).fetch(TBook_ID()));
  assertEquals(Arrays.asList(2,3,4),create().select().from(TBook()).where(val(2).in(TBook_ID(),TBook_AUTHOR_ID())).orderBy(TBook_ID()).fetch(TBook_ID()));
}
