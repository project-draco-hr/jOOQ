{
  Field<Integer> count=count();
  assertEquals(1,(int)create().select(count).from(TBook()).where(TBook_ID().in(Collections.nCopies(999,1))).fetchOne(count));
switch (getDialect()) {
case SQLITE:
    log.info("SKIPPING","SQLite can't handle more than 999 variables");
  break;
default :
assertEquals(1,(int)create().select(count).from(TBook()).where(TBook_ID().in(Collections.nCopies(1000,1))).fetchOne(count));
assertEquals(1,(int)create().select(count).from(TBook()).where(TBook_ID().in(Collections.nCopies(1001,1))).fetchOne(count));
assertEquals(1,(int)create().select(count).from(TBook()).where(TBook_ID().in(Collections.nCopies(1950,1))).fetchOne(count));
assertEquals(3,(int)create().select(count).from(TBook()).where(TBook_ID().notIn(Collections.nCopies(1950,1))).fetchOne(count));
assertEquals(3,(int)create(new Settings().withStatementType(STATIC_STATEMENT)).select(count).from(TBook()).where(TBook_ID().notIn(Collections.nCopies(3000,1))).fetchOne(count));
List<Integer> list=new ArrayList<Integer>();
list.addAll(Collections.nCopies(1000,1));
list.addAll(Collections.nCopies(1000,2));
assertEquals(2,(int)create().select(count).from(TBook()).where(TBook_ID().notIn(list)).fetchOne(count));
break;
}
}
