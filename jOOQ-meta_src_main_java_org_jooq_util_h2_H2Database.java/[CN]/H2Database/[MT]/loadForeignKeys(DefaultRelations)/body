{
  for (  Record record : create().select(CrossReferences.FK_NAME,CrossReferences.FKTABLE_NAME,CrossReferences.FKTABLE_SCHEMA,CrossReferences.FKCOLUMN_NAME,Constraints.CONSTRAINT_NAME).from(CROSS_REFERENCES).join(CONSTRAINTS).on(CrossReferences.PK_NAME.equal(Constraints.UNIQUE_INDEX_NAME)).and(CrossReferences.PKTABLE_NAME.equal(Constraints.TABLE_NAME)).and(CrossReferences.PKTABLE_SCHEMA.equal(Constraints.TABLE_SCHEMA)).where(CrossReferences.FKTABLE_SCHEMA.in(getInputSchemata())).orderBy(CrossReferences.FKTABLE_SCHEMA.asc(),CrossReferences.FK_NAME.asc(),CrossReferences.ORDINAL_POSITION.asc()).fetch()) {
    SchemaDefinition schema=getSchema(record.getValue(CrossReferences.FKTABLE_SCHEMA));
    String foreignKeyTableName=record.getValue(CrossReferences.FKTABLE_NAME);
    String foreignKeyColumn=record.getValue(CrossReferences.FKCOLUMN_NAME);
    String foreignKey=record.getValue(CrossReferences.FK_NAME);
    String uniqueKey=record.getValue(Constraints.CONSTRAINT_NAME);
    TableDefinition foreignKeyTable=getTable(schema,foreignKeyTableName);
    if (foreignKeyTable != null) {
      ColumnDefinition referencingColumn=foreignKeyTable.getColumn(foreignKeyColumn);
      relations.addForeignKey(foreignKey,uniqueKey,referencingColumn);
    }
  }
}
