{
  Rdb$relationConstraints pk=RDB$RELATION_CONSTRAINTS.as("pk");
  Rdb$relationConstraints fk=RDB$RELATION_CONSTRAINTS.as("fk");
  Rdb$refConstraints rc=RDB$REF_CONSTRAINTS.as("rc");
  Rdb$indexSegments isp=RDB$INDEX_SEGMENTS.as("isp");
  Rdb$indexSegments isf=RDB$INDEX_SEGMENTS.as("isf");
  Result<Record> fetch=create().selectDistinct(fk.RDB$CONSTRAINT_NAME.trim().as("fk"),fk.RDB$RELATION_NAME.trim().as("fkTable"),isf.RDB$FIELD_NAME.trim().as("fkField"),pk.RDB$CONSTRAINT_NAME.trim().as("pk"),pk.RDB$RELATION_NAME.trim().as("pkTable")).from(fk).join(rc).on(fk.RDB$CONSTRAINT_NAME.eq(rc.RDB$CONSTRAINT_NAME)).join(pk).on(pk.RDB$CONSTRAINT_NAME.eq(rc.RDB$CONST_NAME_UQ)).join(isp).on(isp.RDB$INDEX_NAME.eq(pk.RDB$INDEX_NAME)).join(isf).on(isf.RDB$INDEX_NAME.eq(fk.RDB$INDEX_NAME)).where(isp.RDB$FIELD_POSITION.eq(isf.RDB$FIELD_POSITION)).orderBy(fk.RDB$CONSTRAINT_NAME.asc(),isf.RDB$FIELD_POSITION.asc()).fetch();
  System.out.println(fetch.format(1000));
  for (  Record record : fetch) {
    String pkName=record.getValue("pk",String.class);
    String pkTable=record.getValue("pkTable",String.class);
    String fkName=record.getValue("fk",String.class);
    String fkTable=record.getValue("fkTable",String.class);
    String fkField=record.getValue("fkField",String.class);
    TableDefinition tdReferencing=getTable(getSchemata().get(0),fkTable,true);
    TableDefinition tdReferenced=getTable(getSchemata().get(0),pkTable,true);
    if (tdReferenced != null && tdReferencing != null) {
      ColumnDefinition referencingColumn=tdReferencing.getColumn(fkField);
      relations.addForeignKey(fkName,pkName,referencingColumn,getSchemata().get(0));
    }
  }
}
