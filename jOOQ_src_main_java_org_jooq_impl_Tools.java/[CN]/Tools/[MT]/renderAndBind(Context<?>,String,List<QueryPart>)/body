{
  RenderContext render=(RenderContext)((ctx instanceof RenderContext) ? ctx : null);
  BindContext bind=(BindContext)((ctx instanceof BindContext) ? ctx : null);
  int substituteIndex=0;
  char[] sqlChars=sql.toCharArray();
  if (render == null)   render=new DefaultRenderContext(bind.configuration());
  SQLDialect dialect=render.configuration().dialect();
  SQLDialect family=dialect.family();
  boolean mysql=asList(MARIADB,MYSQL).contains(family);
  String[][] quotes=QUOTES.get(family);
  boolean needsBackslashEscaping=needsBackslashEscaping(ctx.configuration());
  for (int i=0; i < sqlChars.length; i++) {
    if (peek(sqlChars,i,"--") || (mysql && peek(sqlChars,i,"#"))) {
      for (; i < sqlChars.length && sqlChars[i] != '\r' && sqlChars[i] != '\n'; render.sql(sqlChars[i++]))       ;
      if (i < sqlChars.length)       render.sql(sqlChars[i]);
    }
 else     if (peek(sqlChars,i,"/*")) {
      for (; !peek(sqlChars,i,"*/"); render.sql(sqlChars[i++]))       ;
      render.sql(sqlChars[i++]);
      render.sql(sqlChars[i]);
    }
 else     if (sqlChars[i] == '\'') {
      render.sql(sqlChars[i++]);
      for (; ; ) {
        if (sqlChars[i] == '\\' && needsBackslashEscaping) {
          render.sql(sqlChars[i++]);
        }
 else         if (peek(sqlChars,i,"''")) {
          render.sql(sqlChars[i++]);
        }
 else         if (peek(sqlChars,i,"'")) {
          break;
        }
        render.sql(sqlChars[i++]);
      }
      render.sql(sqlChars[i]);
    }
 else     if (peekAny(sqlChars,i,quotes[QUOTE_START_DELIMITER])) {
      int delimiter=0;
      for (int d=0; d < quotes[QUOTE_START_DELIMITER].length; d++) {
        if (peek(sqlChars,i,quotes[QUOTE_START_DELIMITER][d])) {
          delimiter=d;
          break;
        }
      }
      for (int d=0; d < quotes[QUOTE_START_DELIMITER][delimiter].length(); d++)       render.sql(sqlChars[i++]);
      for (; ; ) {
        if (peek(sqlChars,i,quotes[QUOTE_END_DELIMITER_ESCAPED][delimiter])) {
          for (int d=0; d < quotes[QUOTE_END_DELIMITER_ESCAPED][delimiter].length(); d++)           render.sql(sqlChars[i++]);
        }
 else         if (peek(sqlChars,i,quotes[QUOTE_END_DELIMITER][delimiter])) {
          break;
        }
        render.sql(sqlChars[i++]);
      }
      for (int d=0; d < quotes[QUOTE_END_DELIMITER][delimiter].length(); d++) {
        if (d > 0)         i++;
        render.sql(sqlChars[i]);
      }
    }
 else     if (substituteIndex < substitutes.size() && ((sqlChars[i] == '?') || (sqlChars[i] == ':' && i + 1 < sqlChars.length && isJavaIdentifierPart(sqlChars[i + 1]) && (i - 1 < 0 || sqlChars[i - 1] != ':')))) {
      if (sqlChars[i] == ':')       while (++i < sqlChars.length && isJavaIdentifierPart(sqlChars[i]))       ;
      QueryPart substitute=substitutes.get(substituteIndex++);
      if (render.paramType() == INLINED || render.paramType() == NAMED || render.paramType() == NAMED_OR_INLINED) {
        render.visit(substitute);
      }
 else {
        CastMode previous=render.castMode();
        render.castMode(CastMode.NEVER).visit(substitute).castMode(previous);
      }
      if (bind != null) {
        bind.visit(substitute);
      }
    }
 else     if (sqlChars[i] == '{') {
      if (peekAny(sqlChars,i,JDBC_ESCAPE_PREFIXES,true)) {
        render.sql(sqlChars[i]);
      }
 else {
        int start=++i;
        for (; i < sqlChars.length && sqlChars[i] != '}'; i++)         ;
        int end=i;
        String token=sql.substring(start,end);
        try {
          QueryPart substitute=substitutes.get(Integer.valueOf(token));
          render.visit(substitute);
          if (bind != null) {
            bind.visit(substitute);
          }
        }
 catch (        NumberFormatException e) {
          render.keyword(token);
        }
      }
    }
 else {
      render.sql(sqlChars[i]);
    }
  }
}
