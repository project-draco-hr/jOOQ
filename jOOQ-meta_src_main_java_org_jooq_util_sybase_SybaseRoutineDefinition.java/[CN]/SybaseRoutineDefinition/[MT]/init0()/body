{
  for (  Record record : create().select(SYSPROCPARM.PARM_NAME,SYSDOMAIN.DOMAIN_NAME,SYSPROCPARM.WIDTH,SYSPROCPARM.SCALE,SYSPROCPARM.PARM_ID,SYSPROCPARM.PARM_TYPE,SYSPROCPARM.PARM_MODE_IN,SYSPROCPARM.PARM_MODE_OUT).from(SYSPROCPARM).join(SYSDOMAIN).on(SYSPROCPARM.DOMAIN_ID.equal(SYSDOMAIN.DOMAIN_ID)).join(SYSPROCEDURE).on(SYSPROCPARM.PROC_ID.equal(SYSPROCEDURE.PROC_ID)).where(SYSPROCEDURE.PROC_NAME.equal(getName())).orderBy(SYSPROCPARM.PARM_ID).fetch()) {
    String paramName=record.getValue(SYSPROCPARM.PARM_NAME);
    Boolean paramModeIn=record.getValueAsBoolean(SYSPROCPARM.PARM_MODE_IN,false);
    Boolean paramModeOut=record.getValueAsBoolean(SYSPROCPARM.PARM_MODE_OUT,false);
    int parmType=record.getValue(SYSPROCPARM.PARM_TYPE);
    InOutDefinition inOutDefinition;
    if (parmType == 4) {
      inOutDefinition=InOutDefinition.RETURN;
      paramName="RETURN_VALUE";
    }
 else     if (paramModeIn && paramModeOut) {
      inOutDefinition=InOutDefinition.INOUT;
    }
 else     if (paramModeIn) {
      inOutDefinition=InOutDefinition.IN;
    }
 else     if (paramModeOut) {
      inOutDefinition=InOutDefinition.OUT;
    }
 else {
      throw new IllegalArgumentException("Stored procedure param is neither in or out mode!");
    }
    DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),getSchema(),record.getValue(SYSDOMAIN.DOMAIN_NAME),record.getValue(SYSPROCPARM.WIDTH),record.getValue(SYSPROCPARM.WIDTH),record.getValue(SYSPROCPARM.SCALE));
    ParameterDefinition parameter=new DefaultParameterDefinition(this,paramName,record.getValue(SYSPROCPARM.PARM_ID),type);
    addParameter(inOutDefinition,parameter);
  }
}
