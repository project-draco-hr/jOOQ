{
  for (  Record record : create().select(Sysprocparm.PARM_NAME,Sysdomain.DOMAIN_NAME,Sysprocparm.WIDTH,Sysprocparm.SCALE,Sysprocparm.PARM_ID,Sysprocparm.PARM_TYPE,Sysprocparm.PARM_MODE_IN,Sysprocparm.PARM_MODE_OUT).from(SYSPROCPARM).join(SYSDOMAIN).on(Sysprocparm.DOMAIN_ID.equal(Sysdomain.DOMAIN_ID)).join(SYSPROCEDURE).on(Sysprocparm.PROC_ID.equal(Sysprocedure.PROC_ID)).where(Sysprocedure.PROC_NAME.equal(getName())).orderBy(Sysprocparm.PARM_ID).fetch()) {
    String paramName=record.getValue(Sysprocparm.PARM_NAME);
    Boolean paramModeIn=record.getValueAsBoolean(Sysprocparm.PARM_MODE_IN,false);
    Boolean paramModeOut=record.getValueAsBoolean(Sysprocparm.PARM_MODE_OUT,false);
    int parmType=record.getValue(Sysprocparm.PARM_TYPE);
    InOutDefinition inOutDefinition;
    if (parmType == 4) {
      inOutDefinition=InOutDefinition.RETURN;
      paramName="RETURN_VALUE";
    }
 else     if (paramModeIn && paramModeOut) {
      inOutDefinition=InOutDefinition.INOUT;
    }
 else     if (paramModeIn) {
      inOutDefinition=InOutDefinition.IN;
    }
 else     if (paramModeOut) {
      inOutDefinition=InOutDefinition.OUT;
    }
 else {
      throw new IllegalArgumentException("Stored procedure param is neither in or out mode!");
    }
    DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),record.getValue(Sysdomain.DOMAIN_NAME),record.getValue(Sysprocparm.WIDTH),record.getValue(Sysprocparm.SCALE));
    ParameterDefinition parameter=new DefaultParameterDefinition(this,paramName,record.getValue(Sysprocparm.PARM_ID),type);
    addParameter(inOutDefinition,parameter);
  }
}
