{
  setTabSize(2);
  setTabsEmulated(true);
  setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_SQL);
  setMarkOccurrences(true);
  setAnimateBracketMatching(false);
  setAutoIndentEnabled(true);
  setCurrentLineHighlightColor(new Color(232,242,254));
  setMarkOccurrencesColor(new Color(220,220,220));
  setMatchedBracketBGColor(null);
  setMatchedBracketBorderColor(new Color(192,192,192));
  getActionMap().put("copy",new RSyntaxTextAreaEditorKit.CopyAsRtfAction());
  Font editorFont=UIManager.getFont("TextArea.font");
  editorFont=new Font("Monospaced",editorFont.getStyle(),editorFont.getSize());
  SyntaxScheme syntaxScheme=getSyntaxScheme();
  syntaxScheme.setStyle(Token.SEPARATOR,new Style(new Color(200,0,0),null));
  syntaxScheme.setStyle(Token.RESERVED_WORD,new Style(Color.BLUE,null,editorFont));
  setFont(editorFont);
  addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      boolean isControlDown=e.isControlDown();
      boolean isShiftDown=e.isShiftDown();
switch (e.getKeyCode()) {
case KeyEvent.VK_P:
        if (isControlDown && isShiftDown) {
          int position=RSyntaxUtilities.getMatchingBracketPosition(SqlTextArea.this);
          if (position >= 0) {
            setCaretPosition(position + 1);
          }
        }
      break;
case KeyEvent.VK_F:
    if (isControlDown && isShiftDown) {
      formatSelection();
    }
  break;
}
}
}
);
}
