{
switch (getDialect()) {
case SQLITE:
    log.info("SKIPPING","SchemaMapping tests");
  return;
}
Settings settings=new Settings().withRendering(new Rendering().withRenderMapping(new RenderMapping().withSchemata(new MappedSchema().withInput(TAuthor().getSchema().getName()).withOutput(TAuthor().getSchema().getName()).withTables(new MappedTable(TAuthor().getName(),TAuthor().getName()),new MappedTable(TBook().getName(),TBook().getName())))));
Select<Record> query=create(settings).select(TBook_TITLE()).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).orderBy(TBook_ID().asc());
Result<Record> result=query.fetch();
assertEquals("1984",result.getValue(0,TBook_TITLE()));
assertEquals("Animal Farm",result.getValue(1,TBook_TITLE()));
assertEquals("O Alquimista",result.getValue(2,TBook_TITLE()));
assertEquals("Brida",result.getValue(3,TBook_TITLE()));
String sql=query.getSQL();
log.info("Executing",sql);
assertEquals(result,create().fetch(sql,query.getBindValues().toArray()));
switch (getDialect()) {
case ASE:
case DB2:
case DERBY:
case H2:
case HSQLDB:
case INGRES:
case ORACLE:
case POSTGRES:
case SQLITE:
case SQLSERVER:
case SYBASE:
log.info("SKIPPING","Schema mapping test");
return;
case MYSQL:
if (delegate.getClass() == jOOQMySQLTestSchemaRewrite.class) {
log.info("SKIPPING","Schema mapping test");
return;
}
}
settings=new Settings().withRendering(new Rendering().withRenderMapping(new RenderMapping().withSchemata(new MappedSchema().withInput(TAuthor().getSchema().getName()).withOutput(TAuthor().getSchema().getName() + "2"))));
Select<Record> q=create(settings).select(TBook_TITLE()).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).orderBy(TBook_ID().asc());
assertTrue(create(settings).render(q).contains(TAuthor().getSchema().getName() + "2"));
assertTrue(q.getSQL().contains(TAuthor().getSchema().getName() + "2"));
assertEquals(create(settings).render(q),q.getSQL());
result=q.fetch();
assertEquals("1984",result.getValue(0,TBook_TITLE()));
assertEquals("Animal Farm",result.getValue(1,TBook_TITLE()));
assertEquals("O Alquimista",result.getValue(2,TBook_TITLE()));
assertEquals("Brida",result.getValue(3,TBook_TITLE()));
Field<Integer> f1=FOneField().cast(Integer.class);
Field<Integer> f2=FNumberField(42).cast(Integer.class);
q=create(settings).select(f1,f2);
assertTrue(create(settings).render(q).contains(TAuthor().getSchema().getName() + "2"));
assertTrue(q.getSQL().contains(TAuthor().getSchema().getName() + "2"));
assertEquals(create(settings).render(q),q.getSQL());
Record record=q.fetchOne();
assertEquals(1,(int)record.getValue(f1));
assertEquals(42,(int)record.getValue(f2));
settings=new Settings().withRendering(new Rendering().withRenderMapping(new RenderMapping().withSchemata(new MappedSchema().withInput(TAuthor().getSchema().getName()).withOutput(TAuthor().getSchema().getName() + "2").withTables(new MappedTable(TAuthor().getName(),VAuthor().getName()),new MappedTable(TBook().getName(),VBook().getName())))));
q=create(settings).select(TBook_TITLE()).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).orderBy(TBook_ID().asc());
assertTrue(create(settings).render(q).contains(VAuthor().getName()));
assertTrue(create(settings).render(q).contains(VBook().getName()));
assertTrue(create(settings).render(q).contains("test2"));
assertFalse(create(settings).render(q).contains(TAuthor().getName()));
assertFalse(create(settings).render(q).contains(TBook().getName()));
result=q.fetch();
assertEquals("1984",result.getValue(0,TBook_TITLE()));
assertEquals("Animal Farm",result.getValue(1,TBook_TITLE()));
assertEquals("O Alquimista",result.getValue(2,TBook_TITLE()));
assertEquals("Brida",result.getValue(3,TBook_TITLE()));
}
