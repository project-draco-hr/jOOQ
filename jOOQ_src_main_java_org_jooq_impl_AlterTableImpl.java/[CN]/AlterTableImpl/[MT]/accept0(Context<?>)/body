{
  SQLDialect family=ctx.family();
  ctx.start(ALTER_TABLE_TABLE).keyword("alter table").sql(' ').visit(table).end(ALTER_TABLE_TABLE).formatIndentStart().formatSeparator();
  if (renameTo != null) {
    boolean qualify=ctx.qualify();
    ctx.start(ALTER_TABLE_RENAME).qualify(false).keyword("rename to").sql(' ').visit(renameTo).qualify(qualify).end(ALTER_TABLE_RENAME);
  }
 else   if (renameColumn != null) {
    boolean qualify=ctx.qualify();
    ctx.start(ALTER_TABLE_RENAME_COLUMN).qualify(false);
switch (ctx.family()) {
case H2:
      ctx.keyword("alter column").sql(' ').visit(renameColumn).formatSeparator().keyword("rename to").sql(' ').visit(renameColumnTo);
    break;
default :
  ctx.keyword("rename column").sql(' ').visit(renameColumn).formatSeparator().keyword("to").sql(' ').visit(renameColumnTo);
break;
}
ctx.qualify(qualify).end(ALTER_TABLE_RENAME_COLUMN);
}
 else if (renameConstraint != null) {
boolean qualify=ctx.qualify();
ctx.start(ALTER_TABLE_RENAME_CONSTRAINT);
ctx.data(DATA_CONSTRAINT_REFERENCE,true);
ctx.qualify(false).keyword("rename constraint").sql(' ').visit(renameConstraint).formatSeparator().keyword("to").sql(' ').visit(renameConstraintTo).qualify(qualify);
ctx.data().remove(DATA_CONSTRAINT_REFERENCE);
ctx.end(ALTER_TABLE_RENAME_CONSTRAINT);
}
 else if (addColumn != null) {
boolean qualify=ctx.qualify();
ctx.start(ALTER_TABLE_ADD).keyword("add").sql(' ');
ctx.qualify(false).visit(addColumn).sql(' ').qualify(qualify);
toSQLDDLTypeDeclaration(ctx,addColumnType);
if (!addColumnType.nullable()) {
ctx.sql(' ').keyword("not null");
}
 else if (!asList(DERBY,FIREBIRD).contains(family)) {
ctx.sql(' ').keyword("null");
}
ctx.end(ALTER_TABLE_ADD);
}
 else if (addConstraint != null) {
boolean qualify=ctx.qualify();
ctx.start(ALTER_TABLE_ADD);
ctx.keyword("add").sql(' ').qualify(false).visit(addConstraint).qualify(qualify);
ctx.end(ALTER_TABLE_ADD);
}
 else if (alterColumn != null) {
ctx.start(ALTER_TABLE_ALTER);
switch (family) {
case CUBRID:
case MARIADB:
case MYSQL:
{
if (alterColumnDefault == null) {
  ctx.keyword("change column").sql(' ').qualify(false).visit(alterColumn).qualify(true);
}
 else {
  ctx.keyword("alter column");
}
break;
}
default :
ctx.keyword("alter");
break;
}
ctx.sql(' ').qualify(false).visit(alterColumn).qualify(true);
if (alterColumnType != null) {
switch (family) {
case DERBY:
ctx.sql(' ').keyword("set data type");
break;
case POSTGRES:
ctx.sql(' ').keyword("type");
break;
}
ctx.sql(' ');
toSQLDDLTypeDeclaration(ctx,alterColumnType);
if (!alterColumnType.nullable()) {
ctx.sql(' ').keyword("not null");
}
}
 else if (alterColumnDefault != null) {
ctx.start(ALTER_TABLE_ALTER_DEFAULT);
switch (family) {
default :
ctx.keyword("set default");
break;
}
ctx.sql(' ').visit(alterColumnDefault).end(ALTER_TABLE_ALTER_DEFAULT);
}
ctx.end(ALTER_TABLE_ALTER);
}
 else if (dropColumn != null) {
ctx.start(ALTER_TABLE_DROP);
switch (family) {
default :
ctx.keyword("drop");
break;
}
ctx.sql(' ').qualify(false).visit(dropColumn).qualify(true);
switch (family) {
default :
break;
}
if (dropColumnCascade) {
ctx.sql(' ').keyword("cascade");
}
ctx.end(ALTER_TABLE_DROP);
}
 else if (dropConstraint != null) {
ctx.start(ALTER_TABLE_DROP);
ctx.data(DATA_CONSTRAINT_REFERENCE,true);
ctx.keyword("drop constraint").sql(' ').visit(dropConstraint);
ctx.data().remove(DATA_CONSTRAINT_REFERENCE);
ctx.end(ALTER_TABLE_DROP);
}
ctx.formatIndentEnd();
}
