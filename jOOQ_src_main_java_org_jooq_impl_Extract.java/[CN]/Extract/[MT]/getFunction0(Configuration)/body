{
switch (configuration.getDialect()) {
case INGRES:
case MYSQL:
case POSTGRES:
case HSQLDB:
case H2:
    return new SQLExtract();
case SQLITE:
switch (datePart) {
case YEAR:
    return new Function<Integer>("strftime",SQLDataType.INTEGER,create(configuration).val("%Y"),field);
case MONTH:
  return new Function<Integer>("strftime",SQLDataType.INTEGER,create(configuration).val("%m"),field);
case DAY:
return new Function<Integer>("strftime",SQLDataType.INTEGER,create(configuration).val("%d"),field);
case HOUR:
return new Function<Integer>("strftime",SQLDataType.INTEGER,create(configuration).val("%H"),field);
case MINUTE:
return new Function<Integer>("strftime",SQLDataType.INTEGER,create(configuration).val("%M"),field);
case SECOND:
return new Function<Integer>("strftime",SQLDataType.INTEGER,create(configuration).val("%S"),field);
default :
throw new SQLDialectNotSupportedException("DatePart not supported: " + datePart);
}
case DERBY:
case DB2:
switch (datePart) {
case YEAR:
return new Function<Integer>("year",SQLDataType.INTEGER,field);
case MONTH:
return new Function<Integer>("month",SQLDataType.INTEGER,field);
case DAY:
return new Function<Integer>("day",SQLDataType.INTEGER,field);
case HOUR:
return new Function<Integer>("hour",SQLDataType.INTEGER,field);
case MINUTE:
return new Function<Integer>("minute",SQLDataType.INTEGER,field);
case SECOND:
return new Function<Integer>("second",SQLDataType.INTEGER,field);
default :
throw new SQLDialectNotSupportedException("DatePart not supported: " + datePart);
}
case ORACLE:
switch (datePart) {
case YEAR:
return new Function<Integer>("to_char",SQLDataType.INTEGER,field,create(configuration).val("YYYY"));
case MONTH:
return new Function<Integer>("to_char",SQLDataType.INTEGER,field,create(configuration).val("MM"));
case DAY:
return new Function<Integer>("to_char",SQLDataType.INTEGER,field,create(configuration).val("DD"));
case HOUR:
return new Function<Integer>("to_char",SQLDataType.INTEGER,field,create(configuration).val("HH24"));
case MINUTE:
return new Function<Integer>("to_char",SQLDataType.INTEGER,field,create(configuration).val("MI"));
case SECOND:
return new Function<Integer>("to_char",SQLDataType.INTEGER,field,create(configuration).val("SS"));
default :
throw new SQLDialectNotSupportedException("DatePart not supported: " + datePart);
}
case ADAPTIVESERVER:
case SQLSERVER:
case SYBASE:
switch (datePart) {
case YEAR:
return new Function<Integer>("datepart",SQLDataType.INTEGER,create(configuration).field("yy"),field);
case MONTH:
return new Function<Integer>("datepart",SQLDataType.INTEGER,create(configuration).field("mm"),field);
case DAY:
return new Function<Integer>("datepart",SQLDataType.INTEGER,create(configuration).field("dd"),field);
case HOUR:
return new Function<Integer>("datepart",SQLDataType.INTEGER,create(configuration).field("hh"),field);
case MINUTE:
return new Function<Integer>("datepart",SQLDataType.INTEGER,create(configuration).field("mi"),field);
case SECOND:
return new Function<Integer>("datepart",SQLDataType.INTEGER,create(configuration).field("ss"),field);
default :
throw new SQLDialectNotSupportedException("DatePart not supported: " + datePart);
}
default :
throw new SQLDialectNotSupportedException("extract not supported");
}
}
