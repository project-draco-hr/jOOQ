{
  if (!hasDebuggers) {
    return;
  }
  endExecutionTime=System.currentTimeMillis();
  List<Debugger> debuggers=DebuggerRegistry.get();
  if (!debuggers.isEmpty()) {
    boolean hasListener=false;
    for (    Debugger debugger : debuggers) {
      LoggingListener listener=debugger.getLoggingListener();
      if (listener != null) {
        hasListener=true;
        break;
      }
    }
    if (hasListener) {
      String[] sql=ctx.batchSQL();
      QueryType type=QueryType.detectType(sql[0]);
      String parameterDescription=null;
      if (sql.length == 1) {
        PreparedStatement statement=ctx.statement();
        if (statement instanceof TrackingPreparedStatement) {
          parameterDescription=((TrackingPreparedStatement)statement).getParameterDescription();
        }
      }
      QueryInfo info=new QueryInfo(type,sql,parameterDescription);
      final QueryLog log=new QueryLog(info,startPreparationTime == 0 ? null : aggregatedPreparationDuration,startBindTime == 0 ? null : endBindTime - startBindTime,endExecutionTime - startExecutionTime);
      final List<LoggingListener> listeners=new ArrayList<LoggingListener>(debuggers.size());
      for (      Debugger debugger : debuggers) {
        LoggingListener listener=debugger.getLoggingListener();
        if (listener != null) {
          QueryMatcher[] matchers=listener.getMatchers();
          if (matchers == null) {
            listeners.add(listener);
            listener.logQuery(log);
          }
 else {
            for (            QueryMatcher matcher : matchers) {
              if (matcher.matches(log.getQueryInfo())) {
                listeners.add(listener);
                listener.logQuery(log);
                break;
              }
            }
          }
        }
      }
      ResultSet resultSet=ctx.resultSet();
      if (resultSet != null && !listeners.isEmpty()) {
        ResultSet newResultSet=new TrackingResultSet(resultSet){
          @Override protected void notifyData(          long lifeTime,          int readRows,          int readCount,          int writeCount){
            ResultLog resultLog=null;
            for (            LoggingListener loggingListener : listeners) {
              if (resultLog == null) {
                resultLog=new ResultLog(log.getID(),lifeTime,readRows,readCount,writeCount);
              }
              loggingListener.logResult(resultLog);
            }
          }
        }
;
        ctx.resultSet(newResultSet);
      }
    }
  }
  if (matchingDebugger != null) {
    Thread currentThread=Thread.currentThread();
    long threadID=currentThread.getId();
    String threadName=currentThread.getName();
    StackTraceElement[] callerStackTraceElements=currentThread.getStackTrace();
    callerStackTraceElements=Arrays.copyOfRange(callerStackTraceElements,2,callerStackTraceElements.length);
    matchingDebugger.processBreakpointAfterExecutionHit(ctx,new BreakpointHit(matchingBreakpoint.getID(),effectiveSQL,matchingParameterDescription,threadID,threadName,callerStackTraceElements,false));
  }
  if (matchingBreakpoint != null) {
    QueryProcessor afterExecutionProcessor=matchingBreakpoint.getAfterExecutionProcessor();
    matchingBreakpoint=null;
    if (afterExecutionProcessor != null) {
      String sql=afterExecutionProcessor.processSQL(matchingSQL);
      long subStartExecutionTime=System.currentTimeMillis();
      executeSQL(ctx,sql);
      long subEndExecutionTime=System.currentTimeMillis();
      for (      Debugger debugger : debuggers) {
        LoggingListener listener=debugger.getLoggingListener();
        if (listener != null) {
          QueryType type=QueryType.detectType(sql);
          QueryInfo info=new QueryInfo(type,new String[]{sql},null);
          QueryLog log=new QueryLog(info,null,null,subEndExecutionTime - subStartExecutionTime);
          QueryMatcher[] matchers=listener.getMatchers();
          if (matchers == null) {
            listener.logQuery(log);
          }
 else {
            for (            QueryMatcher matcher : matchers) {
              if (matcher.matches(log.getQueryInfo())) {
                listener.logQuery(log);
                break;
              }
            }
          }
        }
      }
    }
  }
}
