{
  Map<String,List<Query>> queries=new LinkedHashMap<String,List<Query>>();
  QueryCollector collector=new QueryCollector();
  Configuration local=configuration.derive(Tools.combine(configuration.executeListenerProviders(),new DefaultExecuteListenerProvider(collector)));
  local.data(DATA_OMIT_RETURNING_CLAUSE,true);
  local.settings().setExecuteLogging(false);
  for (int i=0; i < records.length; i++) {
    Configuration previous=((AttachableInternal)records[i]).configuration();
    try {
      records[i].attach(local);
      executeAction(i);
    }
 catch (    QueryCollectorSignal e) {
      Query query=e.getQuery();
      String sql=e.getSQL();
      if (query.isExecutable()) {
        List<Query> list=queries.get(sql);
        if (list == null) {
          list=new ArrayList<Query>();
          queries.put(sql,list);
        }
        list.add(query);
      }
    }
 finally {
      records[i].attach(previous);
    }
  }
  List<Integer> result=new ArrayList<Integer>();
  for (  Entry<String,List<Query>> entry : queries.entrySet()) {
    BatchBindStep batch=create.batch(entry.getValue().get(0));
    for (    Query query : entry.getValue()) {
      batch.bind(query.getBindValues().toArray());
    }
    int[] array=batch.execute();
    for (    int i : array) {
      result.add(i);
    }
  }
  int[] array=new int[result.size()];
  for (int i=0; i < result.size(); i++) {
    array[i]=result.get(i);
  }
  updateChangedFlag();
  return array;
}
