{
  if (type == Blob.class) {
    return (T)stmt.getBlob(index);
  }
 else   if (type == Boolean.class) {
    return (T)checkWasNull(stmt,Boolean.valueOf(stmt.getBoolean(index)));
  }
 else   if (type == BigInteger.class) {
    BigDecimal result=stmt.getBigDecimal(index);
    return (T)(result == null ? null : result.toBigInteger());
  }
 else   if (type == BigDecimal.class) {
    return (T)stmt.getBigDecimal(index);
  }
 else   if (type == Byte.class) {
    return (T)checkWasNull(stmt,Byte.valueOf(stmt.getByte(index)));
  }
 else   if (type == byte[].class) {
    return (T)stmt.getBytes(index);
  }
 else   if (type == Clob.class) {
    return (T)stmt.getClob(index);
  }
 else   if (type == Date.class) {
    return (T)stmt.getDate(index);
  }
 else   if (type == Double.class) {
    return (T)checkWasNull(stmt,Double.valueOf(stmt.getDouble(index)));
  }
 else   if (type == Float.class) {
    return (T)checkWasNull(stmt,Float.valueOf(stmt.getFloat(index)));
  }
 else   if (type == Integer.class) {
    return (T)checkWasNull(stmt,Integer.valueOf(stmt.getInt(index)));
  }
 else   if (type == Long.class) {
    return (T)checkWasNull(stmt,Long.valueOf(stmt.getLong(index)));
  }
 else   if (type == Short.class) {
    return (T)checkWasNull(stmt,Short.valueOf(stmt.getShort(index)));
  }
 else   if (type == String.class) {
    return (T)stmt.getString(index);
  }
 else   if (type == Time.class) {
    return (T)stmt.getTime(index);
  }
 else   if (type == Timestamp.class) {
    return (T)stmt.getTimestamp(index);
  }
 else   if (type.isArray()) {
    return (T)convertArray(stmt.getObject(index),(Class<? extends Object[]>)type);
  }
 else   if (ArrayRecord.class.isAssignableFrom(type)) {
    return (T)getArrayRecord(configuration,stmt.getArray(index),(Class<? extends ArrayRecord<?>>)type);
  }
 else   if (EnumType.class.isAssignableFrom(type)) {
    return getEnumType(type,stmt.getString(index));
  }
 else   if (MasterDataType.class.isAssignableFrom(type)) {
    return (T)getMasterDataType(type,stmt.getString(index));
  }
 else   if (UDTRecord.class.isAssignableFrom(type)) {
switch (configuration.getDialect()) {
case POSTGRES:
      return (T)pgNewUDTRecord(type,stmt.getObject(index));
  }
  return (T)stmt.getObject(index,getTypeMapping(type));
}
 else if (Result.class.isAssignableFrom(type)) {
  ResultSet nested=(ResultSet)stmt.getObject(index);
  FieldProvider fields=new MetaDataFieldProvider(configuration,nested.getMetaData());
  Cursor<Record> cursor=new CursorImpl<Record>(configuration,fields,nested);
  return (T)cursor.fetchResult();
}
 else {
  return (T)stmt.getObject(index);
}
}
