{
  if (inlineParameters) {
    if (value == null) {
      return "null";
    }
 else     if (type == Blob.class) {
      return "[BLOB]";
    }
 else     if (type == Boolean.class) {
      return value.toString();
    }
 else     if (type == BigInteger.class) {
      return value.toString();
    }
 else     if (type == BigDecimal.class) {
      return value.toString();
    }
 else     if (type == Byte.class) {
      return value.toString();
    }
 else     if (type == byte[].class) {
      return "'" + new String((byte[])value).replace("'","''") + "'";
    }
 else     if (type == Clob.class) {
      return "[CLOB]";
    }
 else     if (type == Date.class) {
      return "'" + value + "'";
    }
 else     if (type == Double.class) {
      return value.toString();
    }
 else     if (type == Float.class) {
      return value.toString();
    }
 else     if (type == Integer.class) {
      return value.toString();
    }
 else     if (type == Long.class) {
      return value.toString();
    }
 else     if (type == Short.class) {
      return value.toString();
    }
 else     if (type == String.class) {
      return "'" + value.toString().replace("'","''") + "'";
    }
 else     if (type == Time.class) {
      return "'" + value + "'";
    }
 else     if (type == Timestamp.class) {
      return "'" + value + "'";
    }
 else     if (type.isArray()) {
      return "ARRAY" + Arrays.asList((Object[])value).toString();
    }
 else     if (ArrayRecord.class.isAssignableFrom(type)) {
      return value.toString();
    }
 else     if (EnumType.class.isAssignableFrom(type)) {
      return toSQL(configuration,((EnumType)value).getLiteral(),inlineParameters);
    }
 else     if (MasterDataType.class.isAssignableFrom(type)) {
      return toSQL(configuration,((MasterDataType<?>)value).getPrimaryKey(),inlineParameters);
    }
 else     if (UDTRecord.class.isAssignableFrom(type)) {
      return "[UDT]";
    }
 else {
    }
    throw new UnsupportedOperationException("Class " + type + " is not supported");
  }
  if (configuration.getDialect() == SQLDialect.POSTGRES) {
    if (byte[].class == type) {
    }
 else     if (type.isArray()) {
      StringBuilder sb=new StringBuilder();
      sb.append("?::");
      sb.append(getDataType(configuration.getDialect(),type).getCastTypeName(configuration));
      return sb.toString();
    }
 else     if (EnumType.class.isAssignableFrom(type)) {
      return "?::" + ((EnumType)value).getName();
    }
  }
  return "?";
}
