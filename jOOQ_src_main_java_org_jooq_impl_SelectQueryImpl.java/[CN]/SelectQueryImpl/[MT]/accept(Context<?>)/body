{
  if (into != null && context.data(DATA_OMIT_INTO_CLAUSE) == null && asList(CUBRID,DERBY,FIREBIRD,H2,MARIADB,MYSQL,POSTGRES,SQLITE).contains(context.configuration().dialect().family())) {
    context.data(DATA_OMIT_INTO_CLAUSE,true);
    context.visit(DSL.createTable(into).as(this));
    context.data().remove(DATA_OMIT_INTO_CLAUSE);
    return;
  }
  if (with != null)   context.visit(with).formatSeparator();
  pushWindow(context);
  Boolean wrapDerivedTables=(Boolean)context.data(DATA_WRAP_DERIVED_TABLES_IN_PARENTHESES);
  if (TRUE.equals(wrapDerivedTables)) {
    context.sql("(").data(DATA_WRAP_DERIVED_TABLES_IN_PARENTHESES,null);
  }
  if (getLimit().isApplicable()) {
    SQLDialect dialect=context.configuration().dialect();
switch (dialect) {
default :
{
        toSQLReferenceLimitDefault(context);
        break;
      }
  }
}
 else {
  toSQLReference0(context);
}
if (forUpdate && !asList(CUBRID).contains(context.configuration().dialect().family())) {
  context.formatSeparator().keyword("for update");
  if (!forUpdateOf.isEmpty()) {
    context.sql(" ").keyword("of").sql(" ");
    Utils.fieldNames(context,forUpdateOf);
  }
 else   if (!forUpdateOfTables.isEmpty()) {
    context.sql(" ").keyword("of").sql(" ");
switch (context.configuration().dialect().family()) {
case DERBY:
{
        forUpdateOfTables.toSQLFieldNames(context);
        break;
      }
default :
    Utils.tableNames(context,forUpdateOfTables);
  break;
}
}
if (context.configuration().dialect().family() == FIREBIRD) {
context.sql(" ").keyword("with lock");
}
if (forUpdateMode != null) {
context.sql(" ");
context.keyword(forUpdateMode.toSQL());
if (forUpdateMode == ForUpdateMode.WAIT) {
context.sql(" ");
context.sql(forUpdateWait);
}
}
}
 else if (forShare) {
switch (context.configuration().dialect()) {
case MARIADB:
case MYSQL:
context.formatSeparator().keyword("lock in share mode");
break;
default :
context.formatSeparator().keyword("for share");
break;
}
}
if (!StringUtils.isBlank(option)) {
context.formatSeparator().sql(option);
}
if (TRUE.equals(wrapDerivedTables)) {
context.sql(")").data(DATA_WRAP_DERIVED_TABLES_IN_PARENTHESES,true);
}
}
