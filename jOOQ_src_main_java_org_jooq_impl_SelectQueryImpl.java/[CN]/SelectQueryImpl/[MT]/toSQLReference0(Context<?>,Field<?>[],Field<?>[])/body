{
  SQLDialect dialect=context.dialect();
  SQLDialect family=dialect.family();
  int unionOpSize=unionOp.size();
  boolean wrapQueryExpressionInDerivedTable=false;
  boolean wrapQueryExpressionBodyInDerivedTable=false;
  if (unionOpSize > 0) {
    for (int i=unionOpSize - 1; i >= 0; i--) {
switch (unionOp.get(i)) {
case EXCEPT:
        context.start(SELECT_EXCEPT);
      break;
case INTERSECT:
    context.start(SELECT_INTERSECT);
  break;
case UNION:
context.start(SELECT_UNION);
break;
case UNION_ALL:
context.start(SELECT_UNION_ALL);
break;
}
unionParenthesis(context,"(");
}
}
context.start(SELECT_SELECT).keyword("select").sql(" ");
if (!StringUtils.isBlank(hint)) {
context.sql(hint).sql(" ");
}
if (!distinctOn.isEmpty()) {
context.keyword("distinct on").sql(" (").visit(distinctOn).sql(") ");
}
 else if (distinct) {
context.keyword("distinct").sql(" ");
}
context.declareFields(true);
if (alternativeFields != null) {
if (wrapQueryExpressionBodyInDerivedTable && originalFields.length < alternativeFields.length) context.visit(new SelectFieldList(Arrays.copyOf(alternativeFields,alternativeFields.length - 1)));
 else context.visit(new SelectFieldList(alternativeFields));
}
 else if (context.subquery() && dialect == H2 && context.data(DATA_ROW_VALUE_EXPRESSION_PREDICATE_SUBQUERY) != null) {
Object data=context.data(DATA_ROW_VALUE_EXPRESSION_PREDICATE_SUBQUERY);
try {
context.data(DATA_ROW_VALUE_EXPRESSION_PREDICATE_SUBQUERY,null);
context.sql("(").visit(getSelect1()).sql(")");
}
  finally {
context.data(DATA_ROW_VALUE_EXPRESSION_PREDICATE_SUBQUERY,data);
}
}
 else {
context.visit(getSelect1());
}
context.declareFields(false).end(SELECT_SELECT);
if (!asList().contains(family)) {
context.start(SELECT_INTO);
Table<?> actualInto=(Table<?>)context.data(DATA_SELECT_INTO_TABLE);
if (actualInto == null) actualInto=into;
if (actualInto != null && context.data(DATA_OMIT_INTO_CLAUSE) == null && asList(HSQLDB,POSTGRES).contains(family)) {
context.formatSeparator().keyword("into").sql(" ").visit(actualInto);
}
context.end(SELECT_INTO);
}
context.start(SELECT_FROM).declareTables(true);
boolean hasFrom=false;
if (!hasFrom) {
DefaultConfiguration c=new DefaultConfiguration(dialect);
String renderedFrom=new DefaultRenderContext(c).render(getFrom());
hasFrom=!renderedFrom.isEmpty();
}
if (hasFrom) {
context.formatSeparator().keyword("from").sql(" ").visit(getFrom());
}
context.declareTables(false).end(SELECT_FROM);
context.start(SELECT_WHERE);
if (!(getWhere().getWhere() instanceof TrueCondition)) {
context.formatSeparator().keyword("where").sql(" ").visit(getWhere());
}
context.end(SELECT_WHERE);
context.start(SELECT_START_WITH);
if (!(getConnectByStartWith().getWhere() instanceof TrueCondition)) {
context.formatSeparator().keyword("start with").sql(" ").visit(getConnectByStartWith());
}
context.end(SELECT_START_WITH);
context.start(SELECT_CONNECT_BY);
if (!(getConnectBy().getWhere() instanceof TrueCondition)) {
context.formatSeparator().keyword("connect by");
if (connectByNoCycle) {
context.sql(" ").keyword("nocycle");
}
context.sql(" ").visit(getConnectBy());
}
context.end(SELECT_CONNECT_BY);
context.start(SELECT_GROUP_BY);
if (grouping) {
context.formatSeparator().keyword("group by").sql(" ");
if (getGroupBy().isEmpty()) {
if (asList().contains(dialect)) {
context.sql("empty_grouping_dummy_table.dual");
}
 else if (asList(CUBRID,DERBY,FIREBIRD,HSQLDB,MARIADB,MYSQL,POSTGRES,SQLITE).contains(dialect)) {
context.sql("1");
}
 else {
context.sql("()");
}
}
 else {
context.visit(getGroupBy());
}
}
context.end(SELECT_GROUP_BY);
context.start(SELECT_HAVING);
if (!(getHaving().getWhere() instanceof TrueCondition)) {
context.formatSeparator().keyword("having").sql(" ").visit(getHaving());
}
context.end(SELECT_HAVING);
context.start(SELECT_WINDOW);
if (!getWindow().isEmpty() && asList(POSTGRES).contains(family)) {
context.formatSeparator().keyword("window").sql(" ").declareWindows(true).visit(getWindow()).declareWindows(false);
}
context.end(SELECT_WINDOW);
toSQLOrderBy(context,originalFields,alternativeFields,false,wrapQueryExpressionBodyInDerivedTable,orderBy,limit);
if (unionOpSize > 0) {
unionParenthesis(context,")");
for (int i=0; i < unionOpSize; i++) {
CombineOperator op=unionOp.get(i);
for (Select<?> other : union.get(i)) {
context.formatSeparator().keyword(op.toSQL(dialect)).sql(" ");
unionParenthesis(context,"(");
context.visit(other);
unionParenthesis(context,")");
}
if (i < unionOpSize - 1) unionParenthesis(context,")");
switch (unionOp.get(i)) {
case EXCEPT:
context.end(SELECT_EXCEPT);
break;
case INTERSECT:
context.end(SELECT_INTERSECT);
break;
case UNION:
context.end(SELECT_UNION);
break;
case UNION_ALL:
context.end(SELECT_UNION_ALL);
break;
}
}
}
toSQLOrderBy(context,originalFields,alternativeFields,wrapQueryExpressionInDerivedTable,wrapQueryExpressionBodyInDerivedTable,unionOrderBy,unionLimit);
}
