{
  super(new BorderLayout());
  setOpaque(false);
  JTabbedPane tabbedPane=new JTabbedPane();
  tabbedPane.setOpaque(false);
  JPanel breakpointHitExecutionPane=new JPanel(new GridBagLayout());
  breakpointHitExecutionPane.setBorder(BorderFactory.createEmptyBorder(2,5,5,5));
  breakpointHitExecutionPane.setOpaque(false);
  breakpointHit=breakpointHitNode.getUserObject();
  int y=0;
  breakpointHitExecutionPane.add(new JLabel("Statement:"),new GridBagConstraints(0,y++,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  SqlTextArea sqlTextArea=new SqlTextArea();
  String sql=breakpointHit.getSql();
  String parameterDescription=breakpointHit.getParameterDescription();
  if (parameterDescription != null) {
    sql+="\n -> " + parameterDescription;
  }
  sqlTextArea.setText(sql + "\n");
  sqlTextArea.setCaretPosition(0);
  breakpointHitExecutionPane.add(new RTextScrollPane(sqlTextArea),new GridBagConstraints(0,y++,1,1,1,1,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  if (breakpointHit.isBeforeExecution()) {
    replaceStatementCheckBox=new JCheckBox("Replace with statement");
    replaceStatementCheckBox.setOpaque(false);
    replaceStatementCheckBox.addItemListener(new ItemListener(){
      @Override public void itemStateChanged(      ItemEvent e){
        adjustStates();
      }
    }
);
    breakpointHitExecutionPane.add(replaceStatementCheckBox,new GridBagConstraints(0,y++,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
    replacementSQLTextArea=new SqlTextArea();
    replacementSQLTextAreaScrollPane=new RTextScrollPane(replacementSQLTextArea);
    breakpointHitExecutionPane.add(replacementSQLTextAreaScrollPane,new GridBagConstraints(0,y++,1,1,1,1,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(2,20,0,0),0,0));
  }
  JPanel executionTypePane=new JPanel(new FlowLayout(FlowLayout.LEFT,0,0));
  executionTypePane.setVisible(breakpointHit.isBeforeExecution());
  executionTypePane.setOpaque(false);
  ButtonGroup executionTypeGroup=new ButtonGroup();
  final JRadioButton executeTypeNoneRadioButton=new JRadioButton("Execute");
  executeTypeNoneRadioButton.setOpaque(false);
  executeTypeNoneRadioButton.setSelected(true);
  executionTypeGroup.add(executeTypeNoneRadioButton);
  executionTypePane.add(executeTypeNoneRadioButton);
  final JRadioButton executeTypeBreakRadioButton=new JRadioButton("Execute and break");
  executeTypeBreakRadioButton.setOpaque(false);
  executionTypeGroup.add(executeTypeBreakRadioButton);
  executionTypePane.add(executeTypeBreakRadioButton);
  final JRadioButton executeTypeSkipRadioButton=new JRadioButton("Skip");
  executeTypeSkipRadioButton.setOpaque(false);
  executionTypeGroup.add(executeTypeSkipRadioButton);
  executionTypePane.add(executeTypeSkipRadioButton);
  final JRadioButton executeTypeFailRadioButton=new JRadioButton("Throw exception");
  executeTypeFailRadioButton.setOpaque(false);
  executionTypeGroup.add(executeTypeFailRadioButton);
  executionTypePane.add(executeTypeFailRadioButton);
  breakpointHitExecutionPane.add(executionTypePane,new GridBagConstraints(0,y++,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  JPanel buttonPane=new JPanel(new FlowLayout(FlowLayout.CENTER,0,0));
  buttonPane.setOpaque(false);
  buttonPane.setBorder(BorderFactory.createEmptyBorder(5,5,0,5));
  JButton applyButton=new JButton("Proceed");
  applyButton.setOpaque(false);
  applyButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (breakpointHit.isBeforeExecution()) {
        String replacementSQL=null;
        ExecutionType executionType=ExecutionType.RUN;
        if (executeTypeNoneRadioButton.isSelected()) {
          executionType=ExecutionType.RUN;
          replacementSQL=replaceStatementCheckBox.isSelected() ? replacementSQLTextArea.getText() : null;
        }
 else         if (executeTypeBreakRadioButton.isSelected()) {
          executionType=ExecutionType.STEP_THROUGH;
          replacementSQL=replaceStatementCheckBox.isSelected() ? replacementSQLTextArea.getText() : null;
        }
 else         if (executeTypeSkipRadioButton.isSelected()) {
          executionType=ExecutionType.RUN_OVER;
        }
 else         if (executeTypeFailRadioButton.isSelected()) {
          executionType=ExecutionType.FAIL;
        }
        breakpointHit.setExecutionType(executionType,replacementSQL);
      }
 else {
        breakpointHit.setExecutionType(ExecutionType.RUN,null);
      }
      debuggerPane.proceedBreakpointHit(breakpointHitNode);
    }
  }
);
  buttonPane.add(applyButton);
  breakpointHitExecutionPane.add(buttonPane,new GridBagConstraints(0,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  adjustStates();
  tabbedPane.addTab("Execution",breakpointHitExecutionPane);
  tabbedPane.addTab("Editor",new EditorsPane(new StatementExecutorCreator(){
    @Override public StatementExecutor createStatementExecutor(){
      return debugger.createBreakpointHitStatementExecutor(breakpointHit.getThreadID());
    }
  }
,false));
  add(tabbedPane);
}
