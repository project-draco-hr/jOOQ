{
  if (cRoutines() == null) {
    log.info("SKIPPING","functions test");
    return;
  }
  jOOQAbstractTest.reset=false;
  assertEquals("0","" + invoke(cRoutines(),"fAuthorExists",create(),null));
  assertEquals("1","" + invoke(cRoutines(),"fAuthorExists",create(),"Paulo"));
  assertEquals("0","" + invoke(cRoutines(),"fAuthorExists",create(),"Shakespeare"));
  assertEquals("1","" + invoke(cRoutines(),"fOne",create()));
  assertEquals("1","" + invoke(cRoutines(),"fNumber",create(),1));
  assertEquals(null,invoke(cRoutines(),"fNumber",create(),null));
  assertEquals("1204","" + invoke(cRoutines(),"f317",create(),1,2,3,4));
  assertEquals("1204","" + invoke(cRoutines(),"f317",create(),1,2,null,4));
  assertEquals("4301","" + invoke(cRoutines(),"f317",create(),4,3,2,1));
  assertEquals("4301","" + invoke(cRoutines(),"f317",create(),4,3,null,1));
  assertEquals("1101","" + invoke(cRoutines(),"f317",create(),1,1,1,1));
  assertEquals("1101","" + invoke(cRoutines(),"f317",create(),1,1,null,1));
  Field<Integer> f1a=FAuthorExistsField("Paulo").cast(Integer.class);
  Field<Integer> f2a=FAuthorExistsField("Shakespeare").cast(Integer.class);
  Field<Integer> f3a=FOneField().cast(Integer.class);
  Field<Integer> f4a=FNumberField(42).cast(Integer.class);
  Field<Integer> f5a=FNumberField(FNumberField(FOneField())).cast(Integer.class);
  Field<Integer> f6a=F317Field(1,2,null,4).cast(Integer.class);
  Field<Integer> f7a=F317Field(4,3,null,1).cast(Integer.class);
  Field<Integer> f8a=F317Field(1,1,null,1).cast(Integer.class);
  Field<Integer> f9a=F317Field(FNumberField(1),FNumberField(2),FNumberField((Number)null),FNumberField(4)).cast(Integer.class);
  Field<Integer> f1b=FAuthorExistsField("Paulo").cast(Integer.class);
  Field<Integer> f2b=FAuthorExistsField("Shakespeare").cast(Integer.class);
  Field<Integer> f3b=FOneField().cast(Integer.class);
  Field<Integer> f4b=FNumberField(42).cast(Integer.class);
  Field<Integer> f5b=FNumberField(FNumberField(FOneField())).cast(Integer.class);
  Field<Integer> f6b=F317Field(1,2,3,4).cast(Integer.class);
  Field<Integer> f7b=F317Field(4,3,2,1).cast(Integer.class);
  Field<Integer> f8b=F317Field(1,1,1,1).cast(Integer.class);
  Field<Integer> f9b=F317Field(FNumberField(1),FNumberField(2),FNumberField(3),FNumberField(4)).cast(Integer.class);
  Field<Integer> f10=FAuthorExistsField(null).cast(Integer.class);
  SelectQuery q=create().selectQuery();
  q.addSelect(f1a,f2a,f3a,f4a,f5a,f6a,f7a,f8a,f9a,f1b,f2b,f3b,f4b,f5b,f6b,f7b,f8b,f9b,f10);
  q.execute();
  Result<Record> result=q.getResult();
  assertEquals(1,result.size());
  assertEquals("1",result.get(0).getValueAsString(f1a));
  assertEquals("0",result.get(0).getValueAsString(f2a));
  assertEquals("1",result.get(0).getValueAsString(f3a));
  assertEquals("42",result.get(0).getValueAsString(f4a));
  assertEquals("1",result.get(0).getValueAsString(f5a));
  assertEquals("1204",result.get(0).getValueAsString(f6a));
  assertEquals("4301",result.get(0).getValueAsString(f7a));
  assertEquals("1101",result.get(0).getValueAsString(f8a));
  assertEquals("1204",result.get(0).getValueAsString(f9a));
  assertEquals("1",result.get(0).getValueAsString(f1b));
  assertEquals("0",result.get(0).getValueAsString(f2b));
  assertEquals("1",result.get(0).getValueAsString(f3b));
  assertEquals("42",result.get(0).getValueAsString(f4b));
  assertEquals("1",result.get(0).getValueAsString(f5b));
  assertEquals("1204",result.get(0).getValueAsString(f6b));
  assertEquals("4301",result.get(0).getValueAsString(f7b));
  assertEquals("1101",result.get(0).getValueAsString(f8b));
  assertEquals("1204",result.get(0).getValueAsString(f9b));
  assertEquals("0",result.get(0).getValueAsString(f10));
  assertEquals(Integer.valueOf(1),create().selectOne().where(f4b.equal(1)).or(f1b.equal(1)).fetchOne(0));
  assertEquals(null,create().selectOne().where(f4b.equal(1)).and(f1b.equal(1)).fetchOne(0));
  assertEquals(null,create().selectOne().where(f4b.equal(1)).and(f1b.equal(1)).fetchOne());
  result=create().select(FNumberField(1).cast(Integer.class),FNumberField(TAuthor_ID()).cast(Integer.class),FNumberField(FNumberField(TAuthor_ID())).cast(Integer.class)).from(TAuthor()).orderBy(TAuthor_ID()).fetch();
  assertEquals(Integer.valueOf(1),result.getValue(0,0));
  assertEquals(Integer.valueOf(1),result.getValue(0,1));
  assertEquals(Integer.valueOf(1),result.getValue(0,2));
  assertEquals(Integer.valueOf(1),result.getValue(1,0));
  assertEquals(Integer.valueOf(2),result.getValue(1,1));
  assertEquals(Integer.valueOf(2),result.getValue(1,2));
}
