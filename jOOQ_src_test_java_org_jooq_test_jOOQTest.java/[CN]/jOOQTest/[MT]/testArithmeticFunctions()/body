{
  Field<BigDecimal> sum1=FIELD_ID1.sum();
  assertEquals(BigDecimal.class,sum1.getType());
  assertEquals("sum(\"TABLE1\".\"ID1\")",internal(sum1).toSQLReference(create,true));
  assertEquals("sum(\"TABLE1\".\"ID1\")",internal(sum1).toSQLReference(create,false));
  assertEquals("sum(\"TABLE1\".\"ID1\")",internal(sum1).toSQLDeclaration(create,true));
  assertEquals("sum(\"TABLE1\".\"ID1\")",internal(sum1).toSQLDeclaration(create,false));
  assertEquals(1,internal(sum1).bindReference(create,statement));
  Field<BigDecimal> sum2=FIELD_ID1.sum().as("value");
  assertEquals(BigDecimal.class,sum2.getType());
  assertEquals("\"value\"",internal(sum2).toSQLReference(create,true));
  assertEquals("\"value\"",internal(sum2).toSQLReference(create,false));
  assertEquals("sum(\"TABLE1\".\"ID1\") \"value\"",internal(sum2).toSQLDeclaration(create,true));
  assertEquals("sum(\"TABLE1\".\"ID1\") \"value\"",internal(sum2).toSQLDeclaration(create,false));
  assertEquals(1,internal(sum2).bindReference(create,statement));
  Field<BigDecimal> avg1=FIELD_ID1.avg();
  assertEquals(BigDecimal.class,avg1.getType());
  assertEquals("avg(\"TABLE1\".\"ID1\")",internal(avg1).toSQLReference(create,true));
  assertEquals("avg(\"TABLE1\".\"ID1\")",internal(avg1).toSQLReference(create,false));
  assertEquals("avg(\"TABLE1\".\"ID1\")",internal(avg1).toSQLDeclaration(create,true));
  assertEquals("avg(\"TABLE1\".\"ID1\")",internal(avg1).toSQLDeclaration(create,false));
  assertEquals(1,internal(avg1).bindReference(create,statement));
  Field<BigDecimal> avg2=FIELD_ID1.avg().as("value");
  assertEquals(BigDecimal.class,avg2.getType());
  assertEquals("\"value\"",internal(avg2).toSQLReference(create,true));
  assertEquals("\"value\"",internal(avg2).toSQLReference(create,false));
  assertEquals("avg(\"TABLE1\".\"ID1\") \"value\"",internal(avg2).toSQLDeclaration(create,true));
  assertEquals("avg(\"TABLE1\".\"ID1\") \"value\"",internal(avg2).toSQLDeclaration(create,false));
  assertEquals(1,internal(avg2).bindReference(create,statement));
  Field<Integer> min1=FIELD_ID1.min();
  assertEquals(Integer.class,min1.getType());
  assertEquals("min(\"TABLE1\".\"ID1\")",internal(min1).toSQLReference(create,true));
  assertEquals("min(\"TABLE1\".\"ID1\")",internal(min1).toSQLReference(create,false));
  assertEquals("min(\"TABLE1\".\"ID1\")",internal(min1).toSQLDeclaration(create,true));
  assertEquals("min(\"TABLE1\".\"ID1\")",internal(min1).toSQLDeclaration(create,false));
  assertEquals(1,internal(min1).bindReference(create,statement));
  Field<Integer> min2=FIELD_ID1.min().as("value");
  assertEquals(Integer.class,min2.getType());
  assertEquals("\"value\"",internal(min2).toSQLReference(create,true));
  assertEquals("\"value\"",internal(min2).toSQLReference(create,false));
  assertEquals("min(\"TABLE1\".\"ID1\") \"value\"",internal(min2).toSQLDeclaration(create,true));
  assertEquals("min(\"TABLE1\".\"ID1\") \"value\"",internal(min2).toSQLDeclaration(create,false));
  assertEquals(1,internal(min2).bindReference(create,statement));
  Field<Integer> max1=FIELD_ID1.max();
  assertEquals(Integer.class,max1.getType());
  assertEquals("max(\"TABLE1\".\"ID1\")",internal(max1).toSQLReference(create,true));
  assertEquals("max(\"TABLE1\".\"ID1\")",internal(max1).toSQLReference(create,false));
  assertEquals("max(\"TABLE1\".\"ID1\")",internal(max1).toSQLDeclaration(create,true));
  assertEquals("max(\"TABLE1\".\"ID1\")",internal(max1).toSQLDeclaration(create,false));
  assertEquals(1,internal(max1).bindReference(create,statement));
  Field<Integer> max2=FIELD_ID1.max().as("value");
  assertEquals(Integer.class,max2.getType());
  assertEquals("\"value\"",internal(max2).toSQLReference(create,true));
  assertEquals("\"value\"",internal(max2).toSQLReference(create,false));
  assertEquals("max(\"TABLE1\".\"ID1\") \"value\"",internal(max2).toSQLDeclaration(create,true));
  assertEquals("max(\"TABLE1\".\"ID1\") \"value\"",internal(max2).toSQLDeclaration(create,false));
  assertEquals(1,internal(max2).bindReference(create,statement));
  Field<Integer> count1=create.count();
  assertEquals(Integer.class,count1.getType());
  assertEquals("count(*)",internal(count1).toSQLReference(create,true));
  assertEquals("count(*)",internal(count1).toSQLReference(create,false));
  assertEquals("count(*)",internal(count1).toSQLDeclaration(create,true));
  assertEquals("count(*)",internal(count1).toSQLDeclaration(create,false));
  assertEquals(1,internal(count1).bindReference(create,statement));
  Field<Integer> count1a=create.count().as("cnt");
  assertEquals(Integer.class,count1a.getType());
  assertEquals("\"cnt\"",internal(count1a).toSQLReference(create,true));
  assertEquals("\"cnt\"",internal(count1a).toSQLReference(create,false));
  assertEquals("count(*) \"cnt\"",internal(count1a).toSQLDeclaration(create,true));
  assertEquals("count(*) \"cnt\"",internal(count1a).toSQLDeclaration(create,false));
  assertEquals(1,internal(count1a).bindReference(create,statement));
  Field<Integer> count2=FIELD_ID1.count();
  assertEquals(Integer.class,count2.getType());
  assertEquals("count(\"TABLE1\".\"ID1\")",internal(count2).toSQLReference(create,true));
  assertEquals("count(\"TABLE1\".\"ID1\")",internal(count2).toSQLReference(create,false));
  assertEquals("count(\"TABLE1\".\"ID1\")",internal(count2).toSQLDeclaration(create,true));
  assertEquals("count(\"TABLE1\".\"ID1\")",internal(count2).toSQLDeclaration(create,false));
  assertEquals(1,internal(count2).bindReference(create,statement));
  Field<Integer> count2a=FIELD_ID1.count().as("cnt");
  assertEquals(Integer.class,count2a.getType());
  assertEquals("\"cnt\"",internal(count2a).toSQLReference(create,true));
  assertEquals("\"cnt\"",internal(count2a).toSQLReference(create,false));
  assertEquals("count(\"TABLE1\".\"ID1\") \"cnt\"",internal(count2a).toSQLDeclaration(create,true));
  assertEquals("count(\"TABLE1\".\"ID1\") \"cnt\"",internal(count2a).toSQLDeclaration(create,false));
  assertEquals(1,internal(count2a).bindReference(create,statement));
  Field<Integer> count3=FIELD_ID1.countDistinct();
  assertEquals(Integer.class,count3.getType());
  assertEquals("count(distinct \"TABLE1\".\"ID1\")",internal(count3).toSQLReference(create,true));
  assertEquals("count(distinct \"TABLE1\".\"ID1\")",internal(count3).toSQLReference(create,false));
  assertEquals("count(distinct \"TABLE1\".\"ID1\")",internal(count3).toSQLDeclaration(create,true));
  assertEquals("count(distinct \"TABLE1\".\"ID1\")",internal(count3).toSQLDeclaration(create,false));
  assertEquals(1,internal(count3).bindReference(create,statement));
  Field<Integer> count3a=FIELD_ID1.countDistinct().as("cnt");
  assertEquals(Integer.class,count3a.getType());
  assertEquals("\"cnt\"",internal(count3a).toSQLReference(create,true));
  assertEquals("\"cnt\"",internal(count3a).toSQLReference(create,false));
  assertEquals("count(distinct \"TABLE1\".\"ID1\") \"cnt\"",internal(count3a).toSQLDeclaration(create,true));
  assertEquals("count(distinct \"TABLE1\".\"ID1\") \"cnt\"",internal(count3a).toSQLDeclaration(create,false));
  assertEquals(1,internal(count3a).bindReference(create,statement));
}
