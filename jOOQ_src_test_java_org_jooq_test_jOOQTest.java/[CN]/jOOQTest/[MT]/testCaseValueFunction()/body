{
  Case decode=create.decode();
  CaseValueStep<Integer> value=decode.value(FIELD_ID1);
  CaseWhenStep<Integer,String> c=value.when(1,"one");
  assertEquals("case \"TABLE1\".\"ID1\" when 1 then 'one' end",refI().render(c));
  assertEquals("case \"TABLE1\".\"ID1\" when ? then ? end",ref().render(c));
  assertEquals("case \"TABLE1\".\"ID1\" when 1 then 'one' end",decI().render(c));
  assertEquals("case \"TABLE1\".\"ID1\" when ? then ? end",dec().render(c));
  c.otherwise("nothing");
  assertEquals("case \"TABLE1\".\"ID1\" when 1 then 'one' else 'nothing' end",refI().render(c));
  assertEquals("case \"TABLE1\".\"ID1\" when ? then ? else ? end",ref().render(c));
  assertEquals("case \"TABLE1\".\"ID1\" when 1 then 'one' else 'nothing' end",decI().render(c));
  assertEquals("case \"TABLE1\".\"ID1\" when ? then ? else ? end",dec().render(c));
  c.when(2,"two").when(3,"three");
  assertEquals("case \"TABLE1\".\"ID1\" when 1 then 'one' when 2 then 'two' when 3 then 'three' else 'nothing' end",refI().render(c));
  assertEquals("case \"TABLE1\".\"ID1\" when ? then ? when ? then ? when ? then ? else ? end",ref().render(c));
  assertEquals("case \"TABLE1\".\"ID1\" when 1 then 'one' when 2 then 'two' when 3 then 'three' else 'nothing' end",decI().render(c));
  assertEquals("case \"TABLE1\".\"ID1\" when ? then ? when ? then ? when ? then ? else ? end",dec().render(c));
  context.checking(new Expectations(){
{
      oneOf(statement).setInt(1,1);
      oneOf(statement).setString(2,"one");
      oneOf(statement).setInt(3,2);
      oneOf(statement).setString(4,"two");
      oneOf(statement).setInt(5,3);
      oneOf(statement).setString(6,"three");
      oneOf(statement).setString(7,"nothing");
    }
  }
);
  int i=internal(c).bindReference(create,statement);
  assertEquals(8,i);
  context.assertIsSatisfied();
}
