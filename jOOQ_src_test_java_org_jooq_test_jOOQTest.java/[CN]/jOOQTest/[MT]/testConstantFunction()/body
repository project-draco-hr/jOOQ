{
  Field<Integer> f1=create.val(Integer.valueOf(1));
  assertEquals(Integer.class,f1.getType());
  assertEquals("1",internal(f1).toSQLReference(create,true));
  assertEquals("?",internal(f1).toSQLReference(create,false));
  assertEquals("1",internal(f1).toSQLDeclaration(create,true));
  assertEquals("?",internal(f1).toSQLDeclaration(create,false));
  Field<String> f2=create.val("test's");
  assertEquals(String.class,f2.getType());
  assertEquals("'test''s'",internal(f2).toSQLReference(create,true));
  assertEquals("?",internal(f2).toSQLReference(create,false));
  assertEquals("'test''s'",internal(f2).toSQLDeclaration(create,true));
  assertEquals("?",internal(f2).toSQLDeclaration(create,false));
  Field<Integer> f3=create.val(Integer.valueOf(1)).as("value");
  assertEquals(Integer.class,f3.getType());
  assertEquals("\"value\"",internal(f3).toSQLReference(create,true));
  assertEquals("\"value\"",internal(f3).toSQLReference(create,false));
  assertEquals("1 \"value\"",internal(f3).toSQLDeclaration(create,true));
  assertEquals("? \"value\"",internal(f3).toSQLDeclaration(create,false));
  context.checking(new Expectations(){
{
      oneOf(statement).setInt(1,1);
      oneOf(statement).setString(1,"test's");
      oneOf(statement).setInt(1,1);
    }
  }
);
  int i=internal(f1).bindDeclaration(create,statement);
  int j=internal(f2).bindDeclaration(create,statement);
  int k=internal(f3).bindDeclaration(create,statement);
  assertEquals(2,i);
  assertEquals(2,j);
  assertEquals(2,k);
  context.assertIsSatisfied();
}
