{
  assertEquals("(?)",r_ref().render(tuple(1)));
  assertEquals("(1)",r_refI().render(tuple(1)));
  assertEquals("(?, ?)",r_ref().render(tuple(1,"2")));
  assertEquals("(1, '2')",r_refI().render(tuple(1,"2")));
  assertEquals("(?, ?, ?)",r_ref().render(tuple(1,"2",3)));
  assertEquals("(1, '2', 3)",r_refI().render(tuple(1,"2",3)));
  assertEquals("(?, ?, ?, ?)",r_ref().render(tuple(1,"2",3,"4")));
  assertEquals("(1, '2', 3, '4')",r_refI().render(tuple(1,"2",3,"4")));
  assertEquals("(?, ?, ?, ?, ?)",r_ref().render(tuple(1,"2",3,"4",5)));
  assertEquals("(1, '2', 3, '4', 5)",r_refI().render(tuple(1,"2",3,"4",5)));
  assertEquals("(?, ?, ?, ?, ?, ?)",r_ref().render(tuple(1,"2",3,"4",5,"6")));
  assertEquals("(1, '2', 3, '4', 5, '6')",r_refI().render(tuple(1,"2",3,"4",5,"6")));
  assertEquals("(?, ?, ?, ?, ?, ?, ?)",r_ref().render(tuple(1,"2",3,"4",5,"6",7)));
  assertEquals("(1, '2', 3, '4', 5, '6', 7)",r_refI().render(tuple(1,"2",3,"4",5,"6",7)));
  assertEquals("(?, ?, ?, ?, ?, ?, ?, ?)",r_ref().render(tuple(1,"2",3,"4",5,"6",7,"8")));
  assertEquals("(1, '2', 3, '4', 5, '6', 7, '8')",r_refI().render(tuple(1,"2",3,"4",5,"6",7,"8")));
  assertEquals("(?, ?, ?, ?, ?, ?, ?, ?, ?)",r_ref().render(tuple(1,"2",3,"4",5,"6",7,"8",9)));
  assertEquals("(1, '2', 3, '4', 5, '6', 7, '8', 9)",r_refI().render(tuple(1,"2",3,"4",5,"6",7,"8",9)));
  context.checking(new Expectations(){
{
      int i=0;
      oneOf(statement).setInt(++i,i);
      oneOf(statement).setString(++i,"" + i);
      oneOf(statement).setInt(++i,i);
      oneOf(statement).setString(++i,"" + i);
      oneOf(statement).setInt(++i,i);
      oneOf(statement).setString(++i,"" + i);
      oneOf(statement).setInt(++i,i);
      oneOf(statement).setString(++i,"" + i);
      oneOf(statement).setInt(++i,i);
    }
  }
);
  assertEquals(10,b_ref().bind(tuple(1,"2",3,"4",5,"6",7,"8",9)).peekIndex());
  context.assertIsSatisfied();
}
