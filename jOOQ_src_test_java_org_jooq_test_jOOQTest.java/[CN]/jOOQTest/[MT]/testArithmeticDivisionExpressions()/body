{
  Field<Integer> division1=FIELD_ID1.div(FIELD_ID1).div(1).div(2);
  assertEquals(Integer.class,division1.getType());
  assertEquals("(((\"TABLE1\".\"ID1\" / \"TABLE1\".\"ID1\") / 1) / 2)",refI().render(division1));
  assertEquals("(((\"TABLE1\".\"ID1\" / \"TABLE1\".\"ID1\") / ?) / ?)",ref().render(division1));
  assertEquals("(((\"TABLE1\".\"ID1\" / \"TABLE1\".\"ID1\") / 1) / 2)",decI().render(division1));
  assertEquals("(((\"TABLE1\".\"ID1\" / \"TABLE1\".\"ID1\") / ?) / ?)",dec().render(division1));
  Field<Integer> division2=division1.as("d");
  assertEquals(Integer.class,division2.getType());
  assertEquals("\"d\"",refI().render(division2));
  assertEquals("\"d\"",ref().render(division2));
  assertEquals("(((\"TABLE1\".\"ID1\" / \"TABLE1\".\"ID1\") / 1) / 2) \"d\"",decI().render(division2));
  assertEquals("(((\"TABLE1\".\"ID1\" / \"TABLE1\".\"ID1\") / ?) / ?) \"d\"",dec().render(division2));
  context.checking(new Expectations(){
{
      oneOf(statement).setInt(1,1);
      oneOf(statement).setInt(2,2);
    }
  }
);
  int i=internal(division2).bindDeclaration(create,statement);
  assertEquals(3,i);
  context.assertIsSatisfied();
}
