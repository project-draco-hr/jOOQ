{
  Row1<Integer> t1=row(1);
  Row2<Integer,String> t2=row(1,"2");
  Row3<Integer,String,Integer> t3=row(1,"2",3);
  Row4<Integer,String,Integer,String> t4=row(1,"2",3,"4");
  Row5<Integer,String,Integer,String,Integer> t5=row(1,"2",3,"4",5);
  Row6<Integer,String,Integer,String,Integer,String> t6=row(1,"2",3,"4",5,"6");
  Row7<Integer,String,Integer,String,Integer,String,Integer> t7=row(1,"2",3,"4",5,"6",7);
  Row8<Integer,String,Integer,String,Integer,String,Integer,String> t8=row(1,"2",3,"4",5,"6",7,"8");
  RowN t9=row(1,"2",3,"4",5,"6",7,"8",9);
  assertEquals(1,t1.getDegree());
  assertEquals(2,t2.getDegree());
  assertEquals(3,t3.getDegree());
  assertEquals(4,t4.getDegree());
  assertEquals(5,t5.getDegree());
  assertEquals(6,t6.getDegree());
  assertEquals(7,t7.getDegree());
  assertEquals(8,t8.getDegree());
  assertEquals(9,t9.getDegree());
  assertEquals(val(1),t1.field1());
  assertEquals(val(1),t2.field1());
  assertEquals(val("2"),t2.field2());
  assertEquals(val(1),t3.field1());
  assertEquals(val("2"),t3.field2());
  assertEquals(val(3),t3.field3());
  assertEquals(val(1),t4.field1());
  assertEquals(val("2"),t4.field2());
  assertEquals(val(3),t4.field3());
  assertEquals(val("4"),t4.field4());
  assertEquals(val(1),t5.field1());
  assertEquals(val("2"),t5.field2());
  assertEquals(val(3),t5.field3());
  assertEquals(val("4"),t5.field4());
  assertEquals(val(5),t5.field5());
  assertEquals(val(1),t6.field1());
  assertEquals(val("2"),t6.field2());
  assertEquals(val(3),t6.field3());
  assertEquals(val("4"),t6.field4());
  assertEquals(val(5),t6.field5());
  assertEquals(val("6"),t6.field6());
  assertEquals(val(1),t7.field1());
  assertEquals(val("2"),t7.field2());
  assertEquals(val(3),t7.field3());
  assertEquals(val("4"),t7.field4());
  assertEquals(val(5),t7.field5());
  assertEquals(val("6"),t7.field6());
  assertEquals(val(7),t7.field7());
  assertEquals(val(1),t8.field1());
  assertEquals(val("2"),t8.field2());
  assertEquals(val(3),t8.field3());
  assertEquals(val("4"),t8.field4());
  assertEquals(val(5),t8.field5());
  assertEquals(val("6"),t8.field6());
  assertEquals(val(7),t8.field7());
  assertEquals(val("8"),t8.field8());
  assertEquals("(?)",r_ref().render(t1));
  assertEquals("(1)",r_refI().render(t1));
  assertEquals("(?, ?)",r_ref().render(t2));
  assertEquals("(1, '2')",r_refI().render(t2));
  assertEquals("(?, ?, ?)",r_ref().render(t3));
  assertEquals("(1, '2', 3)",r_refI().render(t3));
  assertEquals("(?, ?, ?, ?)",r_ref().render(t4));
  assertEquals("(1, '2', 3, '4')",r_refI().render(t4));
  assertEquals("(?, ?, ?, ?, ?)",r_ref().render(t5));
  assertEquals("(1, '2', 3, '4', 5)",r_refI().render(t5));
  assertEquals("(?, ?, ?, ?, ?, ?)",r_ref().render(t6));
  assertEquals("(1, '2', 3, '4', 5, '6')",r_refI().render(t6));
  assertEquals("(?, ?, ?, ?, ?, ?, ?)",r_ref().render(t7));
  assertEquals("(1, '2', 3, '4', 5, '6', 7)",r_refI().render(t7));
  assertEquals("(?, ?, ?, ?, ?, ?, ?, ?)",r_ref().render(t8));
  assertEquals("(1, '2', 3, '4', 5, '6', 7, '8')",r_refI().render(t8));
  assertEquals("(?, ?, ?, ?, ?, ?, ?, ?, ?)",r_ref().render(t9));
  assertEquals("(1, '2', 3, '4', 5, '6', 7, '8', 9)",r_refI().render(t9));
  context.checking(new Expectations(){
{
      int i=0;
      oneOf(statement).setInt(++i,i);
      oneOf(statement).setString(++i,"" + i);
      oneOf(statement).setInt(++i,i);
      oneOf(statement).setString(++i,"" + i);
      oneOf(statement).setInt(++i,i);
      oneOf(statement).setString(++i,"" + i);
      oneOf(statement).setInt(++i,i);
      oneOf(statement).setString(++i,"" + i);
      oneOf(statement).setInt(++i,i);
    }
  }
);
  assertEquals(10,b_ref().bind(t9).peekIndex());
  context.assertIsSatisfied();
}
