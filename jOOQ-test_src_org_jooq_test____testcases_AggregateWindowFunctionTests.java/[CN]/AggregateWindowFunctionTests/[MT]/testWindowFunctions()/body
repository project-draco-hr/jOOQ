{
switch (dialect()) {
case FIREBIRD:
case MARIADB:
case MYSQL:
case SQLITE:
    log.info("SKIPPING","Window function tests");
  return;
}
switch (dialect()) {
case DERBY:
case H2:
case HSQLDB:
List<Integer> rows=create().select(rowNumber().over()).from(TBook()).orderBy(TBook_ID()).fetch(0,Integer.class);
assertEquals(asList(1,2,3,4),rows);
log.info("SKIPPING","Advanced window function tests");
return;
}
int column=0;
Result<?> result=create().select(TBook_ID(),rowNumber().over().partitionByOne().orderBy(TBook_ID().mul(2).desc(),TBook_ID().add(1).desc()),rowNumber().over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(3),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(1),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column=0;
result=create().select(TBook_ID(),count().over(),count().over().partitionBy(TBook_AUTHOR_ID())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(4),result.getValue(1,column));
assertEquals(Integer.valueOf(4),result.getValue(2,column));
assertEquals(Integer.valueOf(4),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(2),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(2),result.getValue(3,column));
column=0;
result=create().select(TBook_ID(),rank().over().orderBy(TBook_ID().desc()),rank().over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc()),denseRank().over().orderBy(TBook_ID().desc()),denseRank().over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(3),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(1),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(3),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(1),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
switch (dialect()) {
default :
{
column=0;
result=create().select(TBook_ID(),percentRank().over().orderBy(TBook_ID().desc()),percentRank().over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc()),cumeDist().over().orderBy(TBook_ID().desc()),cumeDist().over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals("1",result.get(0).getValue(column,String.class).substring(0,1));
assertEquals("0.6",result.get(1).getValue(column,String.class).substring(0,3));
assertEquals("0.3",result.get(2).getValue(column,String.class).substring(0,3));
assertEquals("0",result.get(3).getValue(column,String.class).substring(0,1));
column++;
assertEquals("1",result.get(0).getValue(column,String.class).substring(0,1));
assertEquals("0",result.get(1).getValue(column,String.class).substring(0,1));
assertEquals("1",result.get(2).getValue(column,String.class).substring(0,1));
assertEquals("0",result.get(3).getValue(column,String.class).substring(0,1));
column++;
assertEquals("1",result.get(0).getValue(column,String.class).substring(0,1));
assertEquals("0.75",result.get(1).getValue(column,String.class));
assertEquals("0.5",result.get(2).getValue(column,String.class));
assertEquals("0.25",result.get(3).getValue(column,String.class));
column++;
assertEquals("1",result.get(0).getValue(column,String.class).substring(0,1));
assertEquals("0.5",result.get(1).getValue(column,String.class));
assertEquals("1",result.get(2).getValue(column,String.class).substring(0,1));
assertEquals("0.5",result.get(3).getValue(column,String.class));
break;
}
}
column=0;
result=create().select(TBook_ID(),max(TBook_ID()).over().partitionByOne(),max(TBook_ID()).over().partitionBy(TBook_AUTHOR_ID())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(4),result.getValue(1,column));
assertEquals(Integer.valueOf(4),result.getValue(2,column));
assertEquals(Integer.valueOf(4),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(2),result.getValue(1,column));
assertEquals(Integer.valueOf(4),result.getValue(2,column));
assertEquals(Integer.valueOf(4),result.getValue(3,column));
column=0;
result=create().select(TBook_ID(),stddevPop(TBook_ID()).over().partitionByOne(),stddevSamp(TBook_ID()).over().partitionByOne(),varPop(TBook_ID()).over().partitionByOne(),varSamp(TBook_ID()).over().partitionByOne(),stddevPop(TBook_ID()).over().partitionBy(TBook_AUTHOR_ID()),stddevSamp(TBook_ID()).over().partitionBy(TBook_AUTHOR_ID()),varPop(TBook_ID()).over().partitionBy(TBook_AUTHOR_ID()),varSamp(TBook_ID()).over().partitionBy(TBook_AUTHOR_ID())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
assertEquals("1.118",result.get(0).getValue(1,String.class).substring(0,5));
assertEquals(1.25,result.get(0).getValue(3,Double.class));
assertEquals(0.5,result.get(0).getValue(5,Double.class));
assertEquals(0.25,result.get(0).getValue(7,Double.class));
if (true) {
assertEquals("1.290",result.get(0).getValue(2,String.class).substring(0,5));
assertEquals("1.666",result.get(0).getValue(4,String.class).substring(0,5));
assertEquals("0.707",result.get(0).getValue(6,String.class).substring(0,5));
assertEquals(0.5,result.get(0).getValue(8,Double.class));
}
{
result=create().select(TBook_ID(),ntile(1).over().orderBy(TBook_ID()),ntile(1).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID()),ntile(2).over().orderBy(TBook_ID()),ntile(2).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
assertEquals(BOOK_IDS,result.getValues(0));
assertEquals(nCopies(4,1),result.getValues(1));
assertEquals(nCopies(4,1),result.getValues(2));
assertEquals(asList(1,1,2,2),result.getValues(3));
assertEquals(asList(1,2,1,2),result.getValues(4));
}
column=0;
if (asList(CUBRID).contains(dialect())) {
log.info("SKIPPING","ROWS UNBOUNDED PRECEDING and similar tests");
}
 else {
result=create().select(TBook_ID(),sum(TBook_ID()).over().partitionByOne(),sum(TBook_ID()).over().partitionBy(TBook_AUTHOR_ID()),sum(TBook_ID()).over().orderBy(TBook_ID().asc()).rowsBetweenUnboundedPreceding().andPreceding(1)).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(new BigDecimal("10"),result.getValue(0,column));
assertEquals(new BigDecimal("10"),result.getValue(1,column));
assertEquals(new BigDecimal("10"),result.getValue(2,column));
assertEquals(new BigDecimal("10"),result.getValue(3,column));
column++;
assertEquals(new BigDecimal("3"),result.getValue(0,column));
assertEquals(new BigDecimal("3"),result.getValue(1,column));
assertEquals(new BigDecimal("7"),result.getValue(2,column));
assertEquals(new BigDecimal("7"),result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(new BigDecimal("1"),result.getValue(1,column));
assertEquals(new BigDecimal("3"),result.getValue(2,column));
assertEquals(new BigDecimal("6"),result.getValue(3,column));
column=0;
result=create().select(TBook_ID(),firstValue(TBook_ID()).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_PUBLISHED_IN().asc()).rowsBetweenUnboundedPreceding().andUnboundedFollowing()).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(2),result.getValue(1,column));
assertEquals(Integer.valueOf(3),result.getValue(2,column));
assertEquals(Integer.valueOf(3),result.getValue(3,column));
}
switch (dialect()) {
default :
{
column=0;
result=create().select(TBook_ID(),lead(TBook_ID()).over().partitionByOne().orderBy(TBook_ID().asc()),lead(TBook_ID()).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),lead(TBook_ID(),2).over().partitionByOne().orderBy(TBook_ID().asc()),lead(TBook_ID(),2).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),lead(TBook_ID(),2,55).over().partitionByOne().orderBy(TBook_ID().asc()),lead(TBook_ID(),2,55).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),lag(TBook_ID()).over().partitionByOne().orderBy(TBook_ID().asc()),lag(TBook_ID()).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),lag(TBook_ID(),2).over().partitionByOne().orderBy(TBook_ID().asc()),lag(TBook_ID(),2).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),lag(TBook_ID(),2,val(55)).over().partitionByOne().orderBy(TBook_ID().asc()),lag(TBook_ID(),2,val(55)).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(2,result.getValue(0,column));
assertEquals(3,result.getValue(1,column));
assertEquals(4,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(2,result.getValue(0,column));
assertEquals(null,result.getValue(1,column));
assertEquals(4,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(3,result.getValue(0,column));
assertEquals(4,result.getValue(1,column));
assertEquals(null,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(null,result.getValue(1,column));
assertEquals(null,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(3,result.getValue(0,column));
assertEquals(4,result.getValue(1,column));
assertEquals(55,result.getValue(2,column));
assertEquals(55,result.getValue(3,column));
column++;
assertEquals(55,result.getValue(0,column));
assertEquals(55,result.getValue(1,column));
assertEquals(55,result.getValue(2,column));
assertEquals(55,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(1,result.getValue(1,column));
assertEquals(2,result.getValue(2,column));
assertEquals(3,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(1,result.getValue(1,column));
assertEquals(null,result.getValue(2,column));
assertEquals(3,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(null,result.getValue(1,column));
assertEquals(1,result.getValue(2,column));
assertEquals(2,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(null,result.getValue(1,column));
assertEquals(null,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(55,result.getValue(0,column));
assertEquals(55,result.getValue(1,column));
assertEquals(1,result.getValue(2,column));
assertEquals(2,result.getValue(3,column));
column++;
assertEquals(55,result.getValue(0,column));
assertEquals(55,result.getValue(1,column));
assertEquals(55,result.getValue(2,column));
assertEquals(55,result.getValue(3,column));
break;
}
}
}
