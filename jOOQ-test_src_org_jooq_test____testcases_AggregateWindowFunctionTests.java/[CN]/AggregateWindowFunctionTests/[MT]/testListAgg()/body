{
switch (getDialect()) {
case ASE:
case CUBRID:
case DB2:
case DERBY:
case H2:
case HSQLDB:
case INGRES:
case MYSQL:
case POSTGRES:
case SQLITE:
case SQLSERVER:
case SYBASE:
    log.info("SKIPPING","LISTAGG tests");
  return;
}
Result<?> result1=create().select(TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),listAgg(TBook_TITLE(),", ").withinGroupOrderBy(TBook_ID().desc()).as("books")).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).groupBy(TAuthor_ID(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME()).orderBy(TAuthor_ID()).fetch();
assertEquals(2,result1.size());
assertEquals(AUTHOR_FIRST_NAMES,result1.getValues(TAuthor_FIRST_NAME()));
assertEquals(AUTHOR_LAST_NAMES,result1.getValues(TAuthor_LAST_NAME()));
assertEquals("Animal Farm, 1984",result1.getValue(0,"books"));
assertEquals("Brida, O Alquimista",result1.getValue(1,"books"));
Result<?> result2=create().select(TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),listAgg(TBook_TITLE()).withinGroupOrderBy(TBook_ID().asc()).over().partitionBy(TAuthor_ID())).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).orderBy(TBook_ID()).fetch();
assertEquals(4,result2.size());
assertEquals(BOOK_FIRST_NAMES,result2.getValues(TAuthor_FIRST_NAME()));
assertEquals(BOOK_LAST_NAMES,result2.getValues(TAuthor_LAST_NAME()));
assertEquals("1984Animal Farm",result2.getValue(0,2));
assertEquals("1984Animal Farm",result2.getValue(1,2));
assertEquals("O AlquimistaBrida",result2.getValue(2,2));
assertEquals("O AlquimistaBrida",result2.getValue(3,2));
}
