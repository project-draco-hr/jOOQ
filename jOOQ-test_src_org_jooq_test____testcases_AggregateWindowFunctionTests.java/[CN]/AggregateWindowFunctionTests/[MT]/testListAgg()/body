{
switch (dialect().family()) {
case DERBY:
case SQLITE:
    log.info("SKIPPING","LISTAGG tests");
  return;
}
Result<?> result1=create().select(TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),listAgg(TBook_ID(),", ").withinGroupOrderBy(TBook_ID().desc()).as("books1"),groupConcat(TBook_ID()).orderBy(TBook_ID().desc()).separator(", ").as("books2")).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).groupBy(TAuthor_ID(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME()).orderBy(TAuthor_ID()).fetch();
assertEquals(2,result1.size());
assertEquals(AUTHOR_FIRST_NAMES,result1.getValues(TAuthor_FIRST_NAME()));
assertEquals(AUTHOR_LAST_NAMES,result1.getValues(TAuthor_LAST_NAME()));
assertEquals("2, 1",result1.getValue(0,"books1"));
assertEquals("2, 1",result1.getValue(0,"books2"));
assertEquals("4, 3",result1.getValue(1,"books1"));
assertEquals("4, 3",result1.getValue(1,"books2"));
switch (dialect()) {
case CUBRID:
case H2:
case HSQLDB:
case MARIADB:
case MYSQL:
case POSTGRES:
log.info("SKIPPING","LISTAGG window function tests");
return;
}
Result<?> result2=create().select(TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),listAgg(TBook_TITLE()).withinGroupOrderBy(TBook_ID().asc()).over().partitionBy(TAuthor_ID())).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).orderBy(TBook_ID()).fetch();
assertEquals(4,result2.size());
assertEquals(BOOK_FIRST_NAMES,result2.getValues(TAuthor_FIRST_NAME()));
assertEquals(BOOK_LAST_NAMES,result2.getValues(TAuthor_LAST_NAME()));
assertEquals("1984Animal Farm",result2.getValue(0,2));
assertEquals("1984Animal Farm",result2.getValue(1,2));
assertEquals("O AlquimistaBrida",result2.getValue(2,2));
assertEquals("O AlquimistaBrida",result2.getValue(3,2));
}
