{
  assertEquals(3,create().selectFrom(TBook()).where(TBook_TITLE().notIn(create().select(TBook_TITLE()).from(TBook()).where(TBook_TITLE().in("1984")))).execute());
  assertEquals(3,create().selectFrom(TBook()).whereNotExists(create().selectOne().from(TAuthor()).where(TAuthor_YEAR_OF_BIRTH().greaterOrEqual(TBook_PUBLISHED_IN()))).orNotExists(create().select()).andExists(create().select()).execute());
  Table<Record> nested=create().select(TBook_AUTHOR_ID(),count().as("books")).from(TBook()).groupBy(TBook_AUTHOR_ID()).asTable("nested");
  Result<Record> records=create().select(nested.getFields()).from(nested).orderBy(nested.getField("books"),nested.getField(TBook_AUTHOR_ID())).fetch();
  assertEquals(2,records.size());
  assertEquals(Integer.valueOf(1),records.getValue(0,nested.getField(TBook_AUTHOR_ID())));
  assertEquals(Integer.valueOf(2),records.getValue(0,nested.getField("books")));
  assertEquals(Integer.valueOf(2),records.getValue(1,nested.getField(TBook_AUTHOR_ID())));
  assertEquals(Integer.valueOf(2),records.getValue(1,nested.getField("books")));
  Field<Object> books=create().select(count()).from(TBook()).where(TBook_AUTHOR_ID().equal(TAuthor_ID())).asField("books");
  records=create().select(TAuthor_ID(),books).from(TAuthor()).orderBy(books,TAuthor_ID()).fetch();
  assertEquals(2,records.size());
  assertEquals(Integer.valueOf(1),records.getValue(0,TAuthor_ID()));
  assertEquals(Integer.valueOf(2),records.getValue(0,books));
  assertEquals(Integer.valueOf(2),records.getValue(1,TAuthor_ID()));
  assertEquals(Integer.valueOf(2),records.getValue(1,books));
  assertEquals("Coelho",create().select(TAuthor_LAST_NAME()).from(TAuthor()).where(val(0).equal(create().select(count(TBook_ID())).from(TBook()).where(TBook_AUTHOR_ID().equal(TAuthor_ID())).and(TBook_TITLE().equal("1984")))).and(val(100).notEqual(create().selectOne())).and(val(0).lessThan(create().selectOne())).and(val(1).lessOrEqual(create().selectOne())).and(val(1).greaterThan(create().selectZero())).and(val(0).greaterOrEqual(create().selectZero())).limit(1).fetchOne(TAuthor_LAST_NAME()));
}
