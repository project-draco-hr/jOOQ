{
switch (getDialect()) {
case SQLITE:
    log.info("SKIPPING","FOR UPDATE tests");
  return;
}
final DSLContext create1=create();
final DSLContext create2=create();
((DefaultConnectionProvider)create2.configuration().getConnectionProvider()).setConnection(getNewConnection());
create2.configuration().getConnectionProvider().acquire().setAutoCommit(false);
final Vector<String> execOrder=new Vector<String>();
try {
final Thread t1=new Thread(new Runnable(){
  @Override public void run(){
    sleep(2000);
    execOrder.add("t1-block");
    try {
      create1.select(TAuthor_ID()).from(TAuthor()).forUpdate().fetch();
    }
 catch (    DataAccessException ignore) {
    }
 finally {
      execOrder.add("t1-fail-or-t2-commit");
    }
  }
}
);
final Thread t2=new Thread(new Runnable(){
  @Override public void run(){
    execOrder.add("t2-exec");
    Result<A> result2=create2.selectFrom(TAuthor()).forUpdate().fetch();
    assertEquals(2,result2.size());
    execOrder.add("t2-signal");
    sleep(4000);
    execOrder.add("t1-fail-or-t2-commit");
    try {
      create2.configuration().getConnectionProvider().acquire().commit();
      create2.configuration().getConnectionProvider().acquire().close();
    }
 catch (    Exception e) {
    }
  }
}
);
t1.start();
t2.start();
t1.join();
t2.join();
assertEquals(asList("t2-exec","t2-signal","t1-block","t1-fail-or-t2-commit","t1-fail-or-t2-commit"),execOrder);
}
  finally {
try {
  create2.configuration().getConnectionProvider().acquire().close();
}
 catch (Exception e) {
}
}
switch (getDialect()) {
case INGRES:
case ORACLE:
log.info("SKIPPING","LIMIT .. OFFSET .. FOR UPDATE");
break;
default :
{
Result<Record1<Integer>> result3=create().select(TAuthor_ID()).from(TAuthor()).limit(5).offset(0).forUpdate().fetch();
assertEquals(2,result3.size());
Result<A> result4=create().selectFrom(TAuthor()).limit(5).offset(0).forUpdate().fetch();
assertEquals(2,result4.size());
}
}
switch (getDialect()) {
case ASE:
case DB2:
case DERBY:
case FIREBIRD:
case HSQLDB:
case H2:
case INGRES:
case MYSQL:
case SYBASE:
log.info("SKIPPING","FOR UPDATE .. WAIT/NOWAIT tests");
break;
case POSTGRES:
case ORACLE:
default :
{
Result<Record1<Integer>> r1a=create().select(TAuthor_ID()).from(TAuthor()).forUpdate().noWait().fetch();
assertEquals(2,r1a.size());
if (getDialect() == ORACLE) {
Result<Record1<Integer>> r2a=create().select(TAuthor_ID()).from(TAuthor()).forUpdate().wait(2).fetch();
assertEquals(2,r2a.size());
Result<Record1<Integer>> r3a=create().select(TAuthor_ID()).from(TAuthor()).forUpdate().skipLocked().fetch();
assertEquals(2,r3a.size());
Result<A> r2b=create().selectFrom(TAuthor()).forUpdate().of(TAuthor_LAST_NAME(),TAuthor_FIRST_NAME()).wait(2).fetch();
assertEquals(2,r2b.size());
Result<A> r1b=create().selectFrom(TAuthor()).forUpdate().of(TAuthor_LAST_NAME(),TAuthor_FIRST_NAME()).noWait().fetch();
assertEquals(2,r1b.size());
Result<A> r3b=create().selectFrom(TAuthor()).forUpdate().of(TAuthor_LAST_NAME(),TAuthor_FIRST_NAME()).skipLocked().fetch();
assertEquals(2,r3b.size());
}
}
}
switch (getDialect()) {
case MYSQL:
case POSTGRES:
log.info("SKIPPING","FOR UPDATE OF tests");
break;
default :
{
Result<Record1<Integer>> result=create().select(TAuthor_ID()).from(TAuthor()).forUpdate().of(TAuthor_ID(),TAuthor_LAST_NAME(),TAuthor_FIRST_NAME()).fetch();
assertEquals(2,result.size());
Result<A> result2=create().selectFrom(TAuthor()).forUpdate().of(TAuthor_ID(),TAuthor_LAST_NAME(),TAuthor_FIRST_NAME()).fetch();
assertEquals(2,result2.size());
}
}
switch (getDialect()) {
case ASE:
case MYSQL:
log.info("SKIPPING","FOR UPDATE OF tests");
break;
case POSTGRES:
default :
{
Result<Record1<Integer>> result=create().select(TAuthor_ID()).from(TAuthor()).forUpdate().of(TAuthor()).fetch();
assertEquals(2,result.size());
Result<A> result2=create().selectFrom(TAuthor()).forUpdate().of(TAuthor()).fetch();
assertEquals(2,result2.size());
break;
}
}
switch (getDialect()) {
case MYSQL:
case POSTGRES:
{
Result<Record1<Integer>> result=create().select(TAuthor_ID()).from(TAuthor()).forShare().fetch();
assertEquals(2,result.size());
Result<A> result2=create().selectFrom(TAuthor()).forShare().fetch();
assertEquals(2,result2.size());
break;
}
default :
log.info("SKIPPING","FOR SHARE clause tests");
}
}
