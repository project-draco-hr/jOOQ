{
  if (dialect() == SQLITE || dialect() == CUBRID) {
    log.info("SKIPPING","Nested JOINs");
    return;
  }
  Result<Record3<Integer,Integer,String>> result1=create().select(TAuthor_ID(),TBook_ID(),TBookStore_NAME()).from(TAuthor().join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID()))).join(TBookToBookStore().join(TBookStore()).on(TBookToBookStore_BOOK_STORE_NAME().equal(TBookStore_NAME()))).on(TBook_ID().equal(TBookToBookStore_BOOK_ID())).orderBy(TBook_ID(),TBookStore_NAME()).fetch();
  assertEquals(6,result1.size());
  assertEquals(asList(1,1,1,2,2,2),result1.getValues(0));
  assertEquals(asList(1,1,2,3,3,3),result1.getValues(1));
  assertEquals(asList("Ex Libris","Orell F??ssli","Orell F??ssli","Buchhandlung im Volkshaus","Ex Libris","Orell F??ssli"),result1.getValues(2));
  Result<Record3<Integer,Integer,String>> result2=create().select(TAuthor_ID(),TBook_ID(),TBookStore_NAME()).from(TAuthor().join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())),TBookToBookStore().join(TBookStore()).on(TBookToBookStore_BOOK_STORE_NAME().equal(TBookStore_NAME()))).where(TBook_ID().equal(TBookToBookStore_BOOK_ID())).orderBy(TBook_ID(),TBookStore_NAME()).fetch();
  assertEquals(6,result2.size());
  assertEquals(asList(1,1,1,2,2,2),result2.getValues(0));
  assertEquals(asList(1,1,2,3,3,3),result2.getValues(1));
  assertEquals(asList("Ex Libris","Orell F??ssli","Orell F??ssli","Buchhandlung im Volkshaus","Ex Libris","Orell F??ssli"),result2.getValues(2));
  assertEquals(result1,result2);
}
