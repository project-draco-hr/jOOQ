{
  Jdbc j=configuration.getJdbc();
  org.jooq.util.jaxb.Generator g=configuration.getGenerator();
  if (g.getStrategy() == null)   g.setStrategy(new Strategy());
  if (g.getTarget() == null)   g.setTarget(new Target());
  Class.forName(j.getDriver());
  Connection connection=null;
  try {
    connection=DriverManager.getConnection(defaultString(j.getUrl()),defaultString(j.getUser()),defaultString(j.getPassword()));
    Class<Generator> generatorClass=(Class<Generator>)(!isBlank(g.getName()) ? Class.forName(g.getName()) : DefaultGenerator.class);
    Generator generator=generatorClass.newInstance();
    Class<GeneratorStrategy> strategyClass=(Class<GeneratorStrategy>)(!isBlank(g.getStrategy().getName()) ? Class.forName(g.getStrategy().getName()) : DefaultGeneratorStrategy.class);
    GeneratorStrategy strategy=strategyClass.newInstance();
    generator.setStrategy(strategy);
    Class<Database> databaseClass=(Class<Database>)Class.forName(g.getDatabase().getName());
    Database database=databaseClass.newInstance();
    List<Schema> schemata=g.getDatabase().getSchemata();
    if (schemata.isEmpty()) {
      Schema schema=new Schema();
      schema.setInputSchema(g.getDatabase().getInputSchema());
      schema.setOutputSchema(g.getDatabase().getOutputSchema());
      schemata.add(schema);
    }
 else {
      if (!StringUtils.isBlank(g.getDatabase().getInputSchema())) {
        log.warn("WARNING: Cannot combine configuration properties /configuration/generator/database/inputSchema and /configuration/generator/database/schemata");
      }
      if (!StringUtils.isBlank(g.getDatabase().getOutputSchema())) {
        log.warn("WARNING: Cannot combine configuration properties /configuration/generator/database/outputSchema and /configuration/generator/database/schemata");
      }
    }
    for (    Schema schema : schemata) {
      if (StringUtils.isBlank(schema.getInputSchema())) {
        log.warn("WARNING: The configuration property jdbc.Schema is deprecated and will be removed in the future. Use /configuration/generator/database/inputSchema instead");
        schema.setInputSchema(j.getSchema());
      }
      if (StringUtils.isBlank(schema.getOutputSchema())) {
        schema.setOutputSchema(schema.getInputSchema());
      }
    }
    database.setConnection(connection);
    database.setConfiguredSchemata(schemata);
    database.setIncludes(defaultString(g.getDatabase().getIncludes()).split(","));
    database.setExcludes(defaultString(g.getDatabase().getExcludes()).split(","));
    database.setConfiguredMasterDataTables(g.getDatabase().getMasterDataTables());
    database.setConfiguredEnumTypes(g.getDatabase().getEnumTypes());
    database.setConfiguredForcedTypes(g.getDatabase().getForcedTypes());
    if (g.getDatabase().isDateAsTimestamp() != null)     database.setDateAsTimestamp(g.getDatabase().isDateAsTimestamp());
    if (g.getDatabase().isUnsignedTypes() != null)     database.setSupportsUnsignedTypes(g.getDatabase().isUnsignedTypes());
    if (StringUtils.isBlank(g.getTarget().getPackageName()))     g.getTarget().setPackageName("org.jooq.generated");
    if (StringUtils.isBlank(g.getTarget().getDirectory()))     g.getTarget().setPackageName("target/generated-sources/jooq");
    generator.setTargetPackage(g.getTarget().getPackageName());
    generator.setTargetDirectory(g.getTarget().getDirectory());
    if (g.getGenerate().isRelations() != null)     generator.setGenerateRelations(g.getGenerate().isRelations());
    if (g.getGenerate().isNavigationMethods() != null)     generator.setGenerateNavigationMethods(g.getGenerate().isNavigationMethods());
    if (g.getGenerate().isDeprecated() != null)     generator.setGenerateDeprecated(g.getGenerate().isDeprecated());
    if (g.getGenerate().isInstanceFields() != null)     generator.setGenerateInstanceFields(g.getGenerate().isInstanceFields());
    if (g.getGenerate().isGeneratedAnnotation() != null)     generator.setGenerateGeneratedAnnotation(g.getGenerate().isGeneratedAnnotation());
    if (g.getGenerate().isPojos() != null)     generator.setGeneratePojos(g.getGenerate().isPojos());
    if (g.getGenerate().isJpaAnnotations() != null)     generator.setGenerateJPAAnnotations(g.getGenerate().isJpaAnnotations());
    strategy.setInstanceFields(generator.generateInstanceFields());
    generator.generate(database);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
 finally {
    if (connection != null) {
      connection.close();
    }
  }
}
