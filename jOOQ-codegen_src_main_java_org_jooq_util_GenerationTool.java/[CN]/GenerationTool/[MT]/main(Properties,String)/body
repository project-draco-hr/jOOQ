{
  Jdbc jdbc=new Jdbc();
  jdbc.setDriver(properties.getProperty("jdbc.Driver"));
  jdbc.setUrl(properties.getProperty("jdbc.URL"));
  jdbc.setUser(properties.getProperty("jdbc.User"));
  jdbc.setPassword(properties.getProperty("jdbc.Password"));
  jdbc.setSchema(properties.getProperty("jdbc.Schema"));
  Strategy strategy=new Strategy();
  strategy.setName(properties.containsKey("generator.strategy") ? properties.getProperty("generator.strategy") : null);
  MasterDataTables masterDataTables=new MasterDataTables();
  for (  String name : defaultString(properties.getProperty("generator.generate.master-data-tables")).split(",")) {
    if (isBlank(name))     continue;
    MasterDataTable table=new MasterDataTable();
    table.setName(name);
    table.setLiteral(properties.getProperty("generator.generate.master-data-table-literal." + name));
    table.setDescription(properties.getProperty("generator.generate.master-data-table-description." + name));
    masterDataTables.getMasterDataTable().add(table);
  }
  EnumTypes enumTypes=new EnumTypes();
  for (  String property : properties.stringPropertyNames()) {
    if (property.startsWith("generator.database.enum-type.")) {
      String name=property.replace("generator.database.enum-type.","");
      EnumType type=new EnumType();
      type.setName(name);
      type.setLiterals(properties.getProperty(property));
      enumTypes.getEnumType().add(type);
    }
  }
  ForcedTypes forcedTypes=new ForcedTypes();
  for (  String property : properties.stringPropertyNames()) {
    if (property.startsWith("generator.database.forced-type.")) {
      String name=property.replace("generator.database.forced-type.","");
      ForcedType type=new ForcedType();
      type.setName(name);
      type.setExpressions(properties.getProperty(property));
      forcedTypes.getForcedType().add(type);
    }
  }
  Schema schema=new Schema();
  schema.setInputSchema(properties.containsKey("generator.database.input-schema") ? properties.getProperty("generator.database.input-schema") : null);
  schema.setOutputSchema(properties.containsKey("generator.database.output-schema") ? properties.getProperty("generator.database.output-schema") : null);
  Schemata schemata=new Schemata();
  schemata.getSchema().add(schema);
  org.jooq.util.jaxb.Database database=new org.jooq.util.jaxb.Database();
  database.setName(properties.getProperty("generator.database"));
  database.setIncludes(properties.containsKey("generator.database.includes") ? properties.getProperty("generator.database.includes") : null);
  database.setExcludes(properties.containsKey("generator.database.excludes") ? properties.getProperty("generator.database.excludes") : null);
  database.setDateAsTimestamp("true".equalsIgnoreCase(properties.getProperty("generator.database.date-as-timestamp")));
  database.setUnsignedTypes(!"false".equalsIgnoreCase(properties.getProperty("generator.generate.unsigned-types")));
  database.setSchemata(schemata);
  if (!masterDataTables.getMasterDataTable().isEmpty())   database.setMasterDataTables(masterDataTables);
  if (!enumTypes.getEnumType().isEmpty())   database.setEnumTypes(enumTypes);
  if (!forcedTypes.getForcedType().isEmpty())   database.setForcedTypes(forcedTypes);
  Target target=new Target();
  target.setPackageName(properties.getProperty("generator.target.package"));
  target.setDirectory(properties.getProperty("generator.target.directory"));
  Generate generate=new Generate();
  generate.setRelations("true".equalsIgnoreCase(properties.getProperty("generator.generate.relations")));
  generate.setDeprecated(!"false".equalsIgnoreCase(properties.getProperty("generator.generate.deprecated")));
  generate.setInstanceFields(!"false".equalsIgnoreCase(properties.getProperty("generator.generate.instance-fields")));
  generate.setGeneratedAnnotation(!"false".equalsIgnoreCase(properties.getProperty("generator.generate.generated-annotation")));
  generate.setPojos("true".equalsIgnoreCase(properties.getProperty("generator.generate.pojos")));
  generate.setJpaAnnotations("true".equalsIgnoreCase(properties.getProperty("generator.generate.jpa-annotations")));
  org.jooq.util.jaxb.Generator generator=new org.jooq.util.jaxb.Generator();
  if (!isBlank(strategy.getName()))   generator.setStrategy(strategy);
  generator.setDatabase(database);
  generator.setTarget(target);
  generator.setGenerate(generate);
  generator.setName(properties.containsKey("generator") ? properties.getProperty("generator") : null);
  Configuration configuration=new Configuration();
  configuration.setJdbc(jdbc);
  configuration.setGenerator(generator);
  if (args.length < 2) {
    log.warn("WARNING: jooq-codegen source code generation using .properties files is deprecated as of jOOQ 2.0.4");
    log.info("         Consider using XML configuration instead");
    log.info("         See http://www.jooq.org/manual/META/Configuration/ for more details");
    log.info("");
    log.info("Use GenerationTool to migrate your .properties file to XML (printed on System.out) :");
    log.info("Usage  : GenerationTool <configuration-file> migrate");
    log.info("");
    main(configuration);
  }
 else   if ("migrate".equals(args[1])) {
    log.info("Migrating properties to XML");
    JAXB.marshal(configuration,System.out);
  }
}
