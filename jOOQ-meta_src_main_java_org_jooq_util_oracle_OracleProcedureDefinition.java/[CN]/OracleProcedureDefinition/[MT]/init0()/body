{
  Result<Record> result=create().select(AllArguments.IN_OUT,AllArguments.ARGUMENT_NAME,AllArguments.DATA_TYPE,AllArguments.DATA_PRECISION,AllArguments.DATA_SCALE,AllArguments.TYPE_NAME,AllArguments.POSITION).from(ALL_ARGUMENTS).where(AllArguments.OWNER.equal(getSchemaName()).and(AllArguments.OBJECT_NAME.equal(getName())).and(AllArguments.OBJECT_ID.equal(objectId)).and(AllArguments.OVERLOAD.equal(getOverload()))).and(AllArguments.DATA_LEVEL.equal(BigDecimal.ZERO)).and(AllArguments.DATA_TYPE.isNotNull()).orderBy(AllArguments.POSITION.asc()).fetch();
  for (  Record record : result) {
    InOutDefinition inOut=InOutDefinition.getFromString(record.getValue(AllArguments.IN_OUT));
    DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),record.getValue(AllArguments.DATA_TYPE),record.getValue(AllArguments.DATA_PRECISION),record.getValue(AllArguments.DATA_SCALE),record.getValue(AllArguments.TYPE_NAME));
    String name=record.getValue(AllArguments.ARGUMENT_NAME);
    Integer position=record.getValueAsInteger(AllArguments.POSITION);
    if (StringUtils.isBlank(name) && position == 0) {
      inOut=InOutDefinition.RETURN;
      name="RETURN_VALUE";
    }
    ParameterDefinition parameter=new DefaultParameterDefinition(this,name,position,type);
    addParameter(inOut,parameter);
  }
}
