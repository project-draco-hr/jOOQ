{
  try {
    create().execute("create table t (a int)");
    create().execute("insert into t values (1)");
    assertEquals(asList(1),asList(create().fetchOne(table("t")).intoArray()));
    create().alterTable("t").add("b",SQLDataType.INTEGER).execute();
    assertEquals(asList(1,null),asList(create().fetchOne(table("t")).intoArray()));
    create().alterTable("t").add("c",SQLDataType.NUMERIC).execute();
    assertEquals(asList(1,null,null),asList(create().fetchOne(table("t")).intoArray()));
    create().alterTable("t").add("d",SQLDataType.NUMERIC.precision(5)).execute();
    assertEquals(asList(1,null,null,null),asList(create().fetchOne(table("t")).intoArray()));
    create().alterTable("t").add("e",SQLDataType.NUMERIC.precision(5,2)).execute();
    assertEquals(asList(1,null,null,null,null),asList(create().fetchOne(table("t")).intoArray()));
    create().alterTable("t").add("f",SQLDataType.VARCHAR).execute();
    assertEquals(asList(1,null,null,null,null,null),asList(create().fetchOne(table("t")).intoArray()));
    create().alterTable("t").add("g",SQLDataType.VARCHAR.length(5)).execute();
    assertEquals(asList(1,null,null,null,null,null,null),asList(create().fetchOne(table("t")).intoArray()));
    try {
      create().alterTable("t").add("h",SQLDataType.INTEGER.nullable(false)).execute();
      fail();
    }
 catch (    DataAccessException expected) {
    }
    create().execute("delete t");
    create().alterTable("t").add("h",SQLDataType.INTEGER.nullable(false)).execute();
  }
  finally {
    create().dropTable("t").execute();
  }
}
