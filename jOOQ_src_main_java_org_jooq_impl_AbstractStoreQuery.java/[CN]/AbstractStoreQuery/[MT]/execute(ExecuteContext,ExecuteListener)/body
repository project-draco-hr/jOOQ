{
  if (returning.isEmpty()) {
    return super.execute(ctx,listener);
  }
 else {
    int result=1;
    ResultSet rs;
switch (ctx.configuration().dialect().family()) {
case SQLITE:
{
        try {
          listener.executeStart(ctx);
          result=ctx.statement().executeUpdate();
          ctx.rows(result);
          listener.executeEnd(ctx);
        }
  finally {
          consumeWarnings(ctx,listener);
        }
        DSLContext create=DSL.using(ctx.configuration());
        returned=create.select(returning).from(getInto()).where(rowid().equal(rowid().getDataType().convert(create.lastID()))).fetchInto(getInto());
        return result;
      }
case CUBRID:
{
      try {
        listener.executeStart(ctx);
        result=ctx.statement().executeUpdate();
        ctx.rows(result);
        listener.executeEnd(ctx);
      }
  finally {
        consumeWarnings(ctx,listener);
      }
      selectReturning(ctx.configuration(),create(ctx.configuration()).lastID());
      return result;
    }
case DERBY:
case H2:
case MARIADB:
case MYSQL:
{
    try {
      listener.executeStart(ctx);
      result=ctx.statement().executeUpdate();
      ctx.rows(result);
      listener.executeEnd(ctx);
    }
  finally {
      consumeWarnings(ctx,listener);
    }
    rs=ctx.statement().getGeneratedKeys();
    try {
      List<Object> list=new ArrayList<Object>();
      if (rs != null) {
        while (rs.next()) {
          list.add(rs.getObject(1));
        }
      }
      selectReturning(ctx.configuration(),list.toArray());
      return result;
    }
  finally {
      JDBCUtils.safeClose(rs);
    }
  }
case FIREBIRD:
case POSTGRES:
{
  try {
    listener.executeStart(ctx);
    rs=ctx.statement().executeQuery();
    listener.executeEnd(ctx);
  }
  finally {
    consumeWarnings(ctx,listener);
  }
  break;
}
case HSQLDB:
default :
{
try {
  listener.executeStart(ctx);
  result=ctx.statement().executeUpdate();
  ctx.rows(result);
  listener.executeEnd(ctx);
}
  finally {
  consumeWarnings(ctx,listener);
}
rs=ctx.statement().getGeneratedKeys();
break;
}
}
ExecuteContext ctx2=new DefaultExecuteContext(ctx.configuration());
ExecuteListener listener2=new ExecuteListeners(ctx2);
ctx2.resultSet(rs);
returned=new CursorImpl<R>(ctx2,listener2,fieldArray(returning),null,false,true).fetch().into(getInto());
return result;
}
}
