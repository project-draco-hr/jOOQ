{
  int y=0;
  QueryProcessor beforeExecutionProcessor=breakpoint.getBeforeExecutionProcessor();
  beforeCheckbox=new JCheckBox("Execute before: ");
  beforeCheckbox.setOpaque(false);
  beforeCheckbox.setSelected(beforeExecutionProcessor != null);
  beforeCheckbox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  processorPane.add(beforeCheckbox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(2,0,0,0),0,0));
  beforePane=new QueryProcessorPane(beforeExecutionProcessor);
  processorPane.add(beforePane,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,5,0,0),0,0));
  y++;
  QueryProcessor replacementExecutionProcessor=breakpoint.getReplacementExecutionProcessor();
  executeTypeComboBox=new JComboBox(new String[]{"Execute","Replace with"});
  if (replacementExecutionProcessor != null) {
    executeTypeComboBox.setSelectedIndex(1);
  }
 else {
    executeTypeComboBox.setSelectedIndex(0);
  }
  processorPane.add(executeTypeComboBox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  replacePane=new QueryProcessorPane(breakpoint.getReplacementExecutionProcessor());
  processorPane.add(replacePane,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,0),0,0));
  executeTypeComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  y++;
  QueryProcessor afterExecutionProcessor=breakpoint.getAfterExecutionProcessor();
  afterCheckbox=new JCheckBox("Execute after: ");
  afterCheckbox.setOpaque(false);
  afterCheckbox.setSelected(afterExecutionProcessor != null);
  afterCheckbox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  processorPane.add(afterCheckbox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(2,0,0,0),0,0));
  afterPane=new QueryProcessorPane(afterExecutionProcessor);
  processorPane.add(afterPane,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,5,0,0),0,0));
}
