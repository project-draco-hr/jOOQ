{
  super(new GridBagLayout());
  setOpaque(false);
  QueryMatcher queryMatcher=breakpoint.getMatcher();
  this.breakpoint=breakpoint;
  if (queryMatcher == null) {
    queryMatcher=new QueryMatcher(null,null,null,true);
  }
  int y=0;
  TextMatcher statementTextMatcher=queryMatcher.getQueryTextMatcher();
  queryTextMatcherCheckBox=new JCheckBox("Statement",statementTextMatcher != null);
  queryTextMatcherCheckBox.setOpaque(false);
  queryTextMatcherCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(queryTextMatcherCheckBox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  queryTextMatcherPane=new TextMatcherPane(statementTextMatcher);
  add(queryTextMatcherPane,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,0),0,0));
  y++;
  Set<QueryType> queryTypeSet=queryMatcher.getQueryTypeSet();
  queryTypeCheckBox=new JCheckBox("Type",queryTypeSet != null);
  queryTypeCheckBox.setOpaque(false);
  queryTypeCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(queryTypeCheckBox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  JPanel typesPane=new JPanel(new GridBagLayout());
  typesPane.setOpaque(false);
  queryTypeSelectCheckBox=new JCheckBox("SELECT",queryTypeSet != null && queryTypeSet.contains(QueryType.SELECT));
  queryTypeSelectCheckBox.setOpaque(false);
  typesPane.add(queryTypeSelectCheckBox,new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  queryTypeUpdateCheckBox=new JCheckBox("UPDATE",queryTypeSet != null && queryTypeSet.contains(QueryType.UPDATE));
  queryTypeUpdateCheckBox.setOpaque(false);
  typesPane.add(queryTypeUpdateCheckBox,new GridBagConstraints(1,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,2,0,0),0,0));
  queryTypeInsertCheckBox=new JCheckBox("INSERT",queryTypeSet != null && queryTypeSet.contains(QueryType.INSERT));
  queryTypeInsertCheckBox.setOpaque(false);
  typesPane.add(queryTypeInsertCheckBox,new GridBagConstraints(2,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,2,0,0),0,0));
  queryTypeDeleteCheckBox=new JCheckBox("DELETE",queryTypeSet != null && queryTypeSet.contains(QueryType.DELETE));
  queryTypeDeleteCheckBox.setOpaque(false);
  typesPane.add(queryTypeDeleteCheckBox,new GridBagConstraints(3,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,2,0,0),0,0));
  queryTypeOtherCheckBox=new JCheckBox("OTHER",queryTypeSet != null && queryTypeSet.contains(QueryType.OTHER));
  queryTypeOtherCheckBox.setOpaque(false);
  typesPane.add(queryTypeOtherCheckBox,new GridBagConstraints(4,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,2,0,0),0,0));
  add(typesPane,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,0,0),0,0));
  y++;
  TextMatcher threadNameTextMatcher=queryMatcher.getThreadNameTextMatcher();
  threadNameTextMatcherCheckBox=new JCheckBox("Thread name",threadNameTextMatcher != null);
  threadNameTextMatcherCheckBox.setOpaque(false);
  threadNameTextMatcherCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(threadNameTextMatcherCheckBox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  threadNameTextMatcherPane=new TextMatcherPane(threadNameTextMatcher);
  add(threadNameTextMatcherPane,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,0,0),0,0));
  y++;
  Integer hitCount=breakpoint.getHitCount();
  hitCountCheckBox=new JCheckBox("Hit count",hitCount != null);
  hitCountCheckBox.setOpaque(false);
  hitCountCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(hitCountCheckBox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  NumberFormat numberFormat=NumberFormat.getIntegerInstance();
  hitCountField=new JFormattedTextField(numberFormat);
  hitCountField.setHorizontalAlignment(JFormattedTextField.RIGHT);
  hitCountField.setValue(hitCount == null ? 10 : hitCount);
  hitCountField.setColumns(7);
  add(hitCountField,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,0,0),0,0));
  y++;
  breakpointTypeCombobox=new JComboBox(new Object[]{BREAK,PROCESS});
  breakpointTypeCombobox.setSelectedItem(breakpoint.isBreaking() ? BREAK : PROCESS);
  breakpointTypeCombobox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(breakpointTypeCombobox,new GridBagConstraints(0,y,2,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  y++;
  processorPane=new JPanel(new GridBagLayout());
  processorPane.setOpaque(false);
  populateProcessorPane();
  add(processorPane,new GridBagConstraints(0,y,2,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,20,0,0),0,0));
  y++;
  JPanel buttonPane=new JPanel(new FlowLayout(FlowLayout.CENTER,0,0));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(20,5,5,5));
  buttonPane.setOpaque(false);
  JButton applyButton=new JButton("Apply changes");
  applyButton.setOpaque(false);
  applyButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      debuggerPane.modifyBreakpoint(getBreakpoint());
    }
  }
);
  buttonPane.add(applyButton);
  add(buttonPane,new GridBagConstraints(0,y,2,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  add(Box.createGlue(),new GridBagConstraints(0,Short.MAX_VALUE,1,1,0,1,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  adjustStates();
}
