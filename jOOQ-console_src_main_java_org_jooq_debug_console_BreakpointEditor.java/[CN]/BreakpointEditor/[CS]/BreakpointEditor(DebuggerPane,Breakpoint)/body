{
  super(new GridBagLayout());
  setOpaque(false);
  StatementMatcher statementMatcher=breakpoint.getStatementMatcher();
  id=breakpoint.getID();
  if (statementMatcher == null) {
    statementMatcher=new StatementMatcher(null,null,null,true);
  }
  int y=0;
  TextMatcher statementTextMatcher=statementMatcher.getStatementTextMatcher();
  statementTextMatcherCheckBox=new JCheckBox("Statement",statementTextMatcher != null);
  statementTextMatcherCheckBox.setOpaque(false);
  statementTextMatcherCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(statementTextMatcherCheckBox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  statementTextMatcherPane=new TextMatcherPane(statementTextMatcher);
  add(statementTextMatcherPane,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,0),0,0));
  y++;
  Set<QueryType> queryTypeSet=statementMatcher.getQueryTypeSet();
  statementTypeCheckBox=new JCheckBox("Type",queryTypeSet != null);
  statementTypeCheckBox.setOpaque(false);
  statementTypeCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(statementTypeCheckBox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  JPanel typesPane=new JPanel(new GridBagLayout());
  typesPane.setOpaque(false);
  statementTypeSelectCheckBox=new JCheckBox("SELECT",queryTypeSet != null && queryTypeSet.contains(QueryType.SELECT));
  statementTypeSelectCheckBox.setOpaque(false);
  typesPane.add(statementTypeSelectCheckBox,new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  statementTypeUpdateCheckBox=new JCheckBox("UPDATE",queryTypeSet != null && queryTypeSet.contains(QueryType.UPDATE));
  statementTypeUpdateCheckBox.setOpaque(false);
  typesPane.add(statementTypeUpdateCheckBox,new GridBagConstraints(1,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,2,0,0),0,0));
  statementTypeInsertCheckBox=new JCheckBox("INSERT",queryTypeSet != null && queryTypeSet.contains(QueryType.INSERT));
  statementTypeInsertCheckBox.setOpaque(false);
  typesPane.add(statementTypeInsertCheckBox,new GridBagConstraints(2,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,2,0,0),0,0));
  statementTypeDeleteCheckBox=new JCheckBox("DELETE",queryTypeSet != null && queryTypeSet.contains(QueryType.DELETE));
  statementTypeDeleteCheckBox.setOpaque(false);
  typesPane.add(statementTypeDeleteCheckBox,new GridBagConstraints(3,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,2,0,0),0,0));
  statementTypeOtherCheckBox=new JCheckBox("OTHER",queryTypeSet != null && queryTypeSet.contains(QueryType.OTHER));
  statementTypeOtherCheckBox.setOpaque(false);
  typesPane.add(statementTypeOtherCheckBox,new GridBagConstraints(4,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,2,0,0),0,0));
  add(typesPane,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,0,0),0,0));
  y++;
  TextMatcher threadNameTextMatcher=statementMatcher.getThreadNameTextMatcher();
  threadNameTextMatcherCheckBox=new JCheckBox("Thread name",threadNameTextMatcher != null);
  threadNameTextMatcherCheckBox.setOpaque(false);
  threadNameTextMatcherCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(threadNameTextMatcherCheckBox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  threadNameTextMatcherPane=new TextMatcherPane(threadNameTextMatcher);
  add(threadNameTextMatcherPane,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,0,0),0,0));
  y++;
  Integer hitCount=breakpoint.getHitCount();
  hitCountCheckBox=new JCheckBox("Hit count",hitCount != null);
  hitCountCheckBox.setOpaque(false);
  hitCountCheckBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(hitCountCheckBox,new GridBagConstraints(0,y,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  NumberFormat numberFormat=NumberFormat.getIntegerInstance();
  hitCountField=new JFormattedTextField(numberFormat);
  hitCountField.setHorizontalAlignment(JFormattedTextField.RIGHT);
  hitCountField.setValue(hitCount == null ? 10 : hitCount);
  hitCountField.setColumns(7);
  add(hitCountField,new GridBagConstraints(1,y,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,0,0),0,0));
  y++;
  breakpointTypeComboBox=new JComboBox(new Object[]{BREAK,PROCESS});
  breakpointTypeComboBox.setSelectedItem(breakpoint.isBreaking() ? BREAK : PROCESS);
  breakpointTypeComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      adjustStates();
    }
  }
);
  add(breakpointTypeComboBox,new GridBagConstraints(0,y,2,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  y++;
  processorPane=new JPanel(new GridBagLayout());
  processorPane.setOpaque(false);
  populateProcessorPane(breakpoint);
  add(processorPane,new GridBagConstraints(0,y,2,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,20,0,0),0,0));
  y++;
  JPanel buttonPane=new JPanel(new FlowLayout(FlowLayout.CENTER,0,0));
  buttonPane.setBorder(BorderFactory.createEmptyBorder(20,5,5,5));
  buttonPane.setOpaque(false);
  JButton applyButton=new JButton("Apply changes");
  applyButton.setOpaque(false);
  applyButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      debuggerPane.modifyBreakpoint(getBreakpoint());
    }
  }
);
  buttonPane.add(applyButton);
  add(buttonPane,new GridBagConstraints(0,y,2,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  add(Box.createGlue(),new GridBagConstraints(0,Short.MAX_VALUE,1,1,0,1,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  adjustStates();
}
