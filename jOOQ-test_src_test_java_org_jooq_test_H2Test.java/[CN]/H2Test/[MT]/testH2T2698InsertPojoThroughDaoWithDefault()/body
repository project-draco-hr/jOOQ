{
  jOOQAbstractTest.reset=false;
  T_2698Dao dao=new T_2698Dao(create().configuration());
  List<T_2698> list;
  dao.insert(new T_2698(1,null,null));
  list=dao.fetchById(1);
  assertEquals(1,list.size());
  assertEquals(1,(int)list.get(0).getId());
  assertEquals(-1,(int)list.get(0).getXx());
  assertEquals(-2,(int)list.get(0).getYy());
  dao.update(new T_2698(1,42,42));
  list=dao.fetchById(1);
  assertEquals(1,list.size());
  assertEquals(1,(int)list.get(0).getId());
  assertEquals(42,(int)list.get(0).getXx());
  assertEquals(42,(int)list.get(0).getYy());
  assertEquals(1,create().update(T_2698).set(XX,defaultValue(Integer.class)).set(YY,defaultValue(Integer.class)).execute());
  dao.update(new T_2698(1,null,42));
  list=dao.fetchById(1);
  assertEquals(1,list.size());
  assertEquals(1,(int)list.get(0).getId());
  assertEquals(-1,(int)list.get(0).getXx());
  assertEquals(42,(int)list.get(0).getYy());
  assertEquals(1,create().update(T_2698).set(XX,defaultValue(Integer.class)).set(YY,defaultValue(Integer.class)).execute());
  dao.update(new T_2698(1,42,null));
  list=dao.fetchById(1);
  assertEquals(1,list.size());
  assertEquals(1,(int)list.get(0).getId());
  assertEquals(42,(int)list.get(0).getXx());
  assertEquals(-2,(int)list.get(0).getYy());
}
