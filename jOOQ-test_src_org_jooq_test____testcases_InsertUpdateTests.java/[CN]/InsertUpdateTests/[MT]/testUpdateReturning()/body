{
switch (getDialect()) {
case ASE:
case CUBRID:
case DB2:
case DERBY:
case H2:
case HSQLDB:
case INGRES:
case MYSQL:
case ORACLE:
case SQLITE:
case SQLSERVER:
case SYBASE:
    log.info("SKIPPING","UPDATE .. RETURNING tests");
  return;
}
jOOQAbstractTest.reset=false;
Result<?> result1=create().update(TBook()).set(TBook_TITLE(),"XYZ").where(TBook_ID().eq(1)).returning(TBook_ID(),TBook_TITLE()).fetch();
assertEquals(1,result1.size());
assertEquals(1,(int)result1.get(0).getValue(TBook_ID()));
assertEquals("XYZ",result1.get(0).getValue(TBook_TITLE()));
switch (getDialect()) {
case FIREBIRD:
{
  break;
}
default :
{
Result<?> result2=create().update(TBook()).set(TBook_TITLE(),decode().value(TBook_ID()).when(1,"ABC").otherwise(TBook_TITLE())).where(TBook_ID().in(1,2)).returning(TBook_ID(),TBook_TITLE()).fetch();
assertEquals(2,result2.size());
assertSame(asList(1,2),result2.getValues(TBook_ID()));
assertSame(asList("ABC","Animal Farm"),result2.getValues(TBook_TITLE()));
}
}
}
