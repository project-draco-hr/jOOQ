{
  if (asList(ASE,CUBRID,DERBY,FIREBIRD,MARIADB,MYSQL,SQLSERVER,SQLITE,SYBASE).contains(dialect().family())) {
    log.info("SKIPPING","UPDATE with row value expression tests");
    return;
  }
  jOOQAbstractTest.reset=false;
  A author;
  assertEquals(1,create().update(TAuthor()).set(row(TAuthor_FIRST_NAME()),row(val("row1"))).where(TAuthor_ID().equal(1)).execute());
  author=getAuthor(1);
  assertEquals("row1",author.getValue(TAuthor_FIRST_NAME()));
  if (!asList(POSTGRES).contains(dialect())) {
    assertEquals(1,create().update(TAuthor()).set(row(TAuthor_FIRST_NAME()),select(val("select1"))).where(TAuthor_ID().equal(1)).execute());
    author=getAuthor(1);
    assertEquals("select1",author.getValue(TAuthor_FIRST_NAME()));
  }
  assertEquals(1,create().update(TAuthor()).set(row(TAuthor_FIRST_NAME(),TAuthor_LAST_NAME()),row(val("row2a"),val("row2b"))).where(TAuthor_ID().equal(1)).execute());
  author=getAuthor(1);
  assertEquals("row2a",author.getValue(TAuthor_FIRST_NAME()));
  assertEquals("row2b",author.getValue(TAuthor_LAST_NAME()));
  if (!asList(POSTGRES).contains(dialect())) {
    assertEquals(1,create().update(TAuthor()).set(row(TAuthor_FIRST_NAME(),TAuthor_LAST_NAME()),select(val("select2a"),val("select2b"))).where(TAuthor_ID().equal(1)).execute());
    author=getAuthor(1);
    assertEquals("select2a",author.getValue(TAuthor_FIRST_NAME()));
    assertEquals("select2b",author.getValue(TAuthor_LAST_NAME()));
  }
  assertEquals(1,create().update(TAuthor()).set(row(TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),TAuthor_YEAR_OF_BIRTH()),row(val("row3a"),val("row3b"),val(3))).where(TAuthor_ID().equal(1)).execute());
  author=getAuthor(1);
  assertEquals("row3a",author.getValue(TAuthor_FIRST_NAME()));
  assertEquals("row3b",author.getValue(TAuthor_LAST_NAME()));
  assertEquals(3,(int)author.getValue(TAuthor_YEAR_OF_BIRTH()));
  if (!asList(POSTGRES).contains(dialect())) {
    assertEquals(1,create().update(TAuthor()).set(row(TAuthor_FIRST_NAME(),TAuthor_LAST_NAME(),TAuthor_YEAR_OF_BIRTH()),select(val("select3a"),val("select3b"),val(33))).where(TAuthor_ID().equal(1)).execute());
    author=getAuthor(1);
    assertEquals("select3a",author.getValue(TAuthor_FIRST_NAME()));
    assertEquals("select3b",author.getValue(TAuthor_LAST_NAME()));
    assertEquals(33,(int)author.getValue(TAuthor_YEAR_OF_BIRTH()));
  }
}
