{
  jOOQAbstractTest.reset=false;
  Field<Integer> ID3;
  Field<Integer> ID4;
switch (dialect()) {
case ASE:
case MYSQL:
    ID3=create().select(val(3)).asField();
  ID4=create().select(val(4)).asField();
break;
default :
ID3=create().select(max(TAuthor_ID()).add(1)).from(TAuthor()).asField();
ID4=create().select(max(TAuthor_ID()).add(1)).from(TAuthor()).asField();
break;
}
create().insertInto(TAuthor(),TAuthor_ID(),TAuthor_LAST_NAME()).values(ID3,create().select(val("Hornby")).<String>asField()).execute();
A author=create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Hornby"));
assertEquals(Integer.valueOf(3),author.getValue(TAuthor_ID()));
assertEquals("Hornby",author.getValue(TAuthor_LAST_NAME()));
assertEquals(1,create().update(TAuthor()).set(TAuthor_ID(),ID4).set(TAuthor_LAST_NAME(),create().select(val("Hitchcock")).<String>asField()).where(TAuthor_ID().equal(3)).execute());
author=create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Hitchcock"));
assertEquals(Integer.valueOf(4),author.getValue(TAuthor_ID()));
assertEquals("Hitchcock",author.getValue(TAuthor_LAST_NAME()));
assertEquals(1,create().update(TAuthor()).set(TAuthor_ID(),select(inline(5))).set(TAuthor_LAST_NAME(),select(val("Hesse"))).where(TAuthor_ID().equal(4)).execute());
author=create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Hesse"));
assertEquals(Integer.valueOf(5),author.getValue(TAuthor_ID()));
assertEquals("Hesse",author.getValue(TAuthor_LAST_NAME()));
}
