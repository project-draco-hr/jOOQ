{
switch (getDialect()) {
case ASE:
case DERBY:
case H2:
case INGRES:
case POSTGRES:
case SQLITE:
    log.info("SKIPPING","ON DUPLICATE KEY UPDATE test");
  return;
}
jOOQAbstractTest.reset=false;
create().insertInto(TAuthor(),TAuthor_ID(),TAuthor_LAST_NAME()).values(3,"Koontz").onDuplicateKeyUpdate().set(TAuthor_LAST_NAME(),"Koontz").execute();
A author=create().fetchOne(TAuthor(),TAuthor_ID().equal(3));
assertEquals(Integer.valueOf(3),author.getValue(TAuthor_ID()));
assertEquals("Koontz",author.getValue(TAuthor_LAST_NAME()));
assertEquals(Integer.valueOf(3),create().select(count()).from(TAuthor()).fetchOne(0));
create().insertInto(TAuthor(),TAuthor_ID(),TAuthor_LAST_NAME()).values(3,"Rose").onDuplicateKeyUpdate().set(TAuthor_LAST_NAME(),"Christie").execute();
author=create().fetchOne(TAuthor(),TAuthor_ID().equal(3));
assertEquals(Integer.valueOf(3),author.getValue(TAuthor_ID()));
assertEquals("Christie",author.getValue(TAuthor_LAST_NAME()));
assertEquals(Integer.valueOf(3),create().select(count()).from(TAuthor()).fetchOne(0));
}
