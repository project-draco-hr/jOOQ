{
switch (dialect()) {
case DERBY:
case MARIADB:
case MYSQL:
case POSTGRES:
case SQLITE:
    log.info("SKIPPING","H2-specific MERGE syntax test");
  return;
}
jOOQAbstractTest.reset=false;
assertEquals(1,create().mergeInto(TAuthor(),TAuthor_ID(),TAuthor_LAST_NAME()).values(3,"Hesse").execute());
Result<A> authors1=create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch();
assertEquals(3,authors1.size());
assertEquals(3,(int)authors1.get(2).getValue(TAuthor_ID()));
assertEquals("Hesse",authors1.get(2).getValue(TAuthor_LAST_NAME()));
assertNull(authors1.get(2).getValue(TAuthor_FIRST_NAME()));
assertEquals(1,create().mergeInto(TAuthor(),TAuthor_ID(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME()).values(3,"Hermann","Hesse").execute());
Result<A> authors2=create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch();
assertEquals(3,authors2.size());
assertEquals(3,(int)authors2.get(2).getValue(TAuthor_ID()));
assertEquals("Hesse",authors2.get(2).getValue(TAuthor_LAST_NAME()));
assertEquals("Hermann",authors2.get(2).getValue(TAuthor_FIRST_NAME()));
assertEquals(1,create().mergeInto(TAuthor(),TAuthor_ID(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME()).key(TAuthor_LAST_NAME()).values(3,"Lukas","Hesse").execute());
Result<A> authors3=create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch();
assertEquals(3,authors3.size());
assertEquals(3,(int)authors3.get(2).getValue(TAuthor_ID()));
assertEquals("Hesse",authors3.get(2).getValue(TAuthor_LAST_NAME()));
assertEquals("Lukas",authors3.get(2).getValue(TAuthor_FIRST_NAME()));
assertEquals(2,create().mergeInto(TAuthor(),TAuthor_ID(),TAuthor_LAST_NAME()).key(TAuthor_ID()).select(select(val(3).as("a"),inline("Eder").as("b")).unionAll(select(val(4).as("a"),inline("Eder").as("b")))).execute());
Result<A> authors4=create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch();
assertEquals(4,authors4.size());
assertEquals(3,(int)authors4.get(2).getValue(TAuthor_ID()));
assertEquals("Eder",authors4.get(2).getValue(TAuthor_LAST_NAME()));
assertEquals("Lukas",authors4.get(2).getValue(TAuthor_FIRST_NAME()));
assertEquals(4,(int)authors4.get(3).getValue(TAuthor_ID()));
assertEquals("Eder",authors4.get(3).getValue(TAuthor_LAST_NAME()));
assertNull(authors4.get(3).getValue(TAuthor_FIRST_NAME()));
assertEquals(2,create().mergeInto(TAuthor(),TAuthor_ID(),TAuthor_FIRST_NAME(),TAuthor_LAST_NAME()).select(select(val(3).as("a"),inline("John").as("b"),inline("Eder").as("c")).unionAll(select(val(4).as("a"),inline("John").as("b"),inline("Eder").as("c")))).execute());
Result<A> authors5=create().selectFrom(TAuthor()).orderBy(TAuthor_ID()).fetch();
assertEquals(4,authors5.size());
assertEquals(3,(int)authors5.get(2).getValue(TAuthor_ID()));
assertEquals("Eder",authors5.get(2).getValue(TAuthor_LAST_NAME()));
assertEquals("John",authors5.get(2).getValue(TAuthor_FIRST_NAME()));
assertEquals(4,(int)authors5.get(3).getValue(TAuthor_ID()));
assertEquals("Eder",authors5.get(3).getValue(TAuthor_LAST_NAME()));
assertEquals("John",authors5.get(3).getValue(TAuthor_FIRST_NAME()));
}
