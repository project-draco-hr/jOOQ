{
  assertEquals(1,create().insertInto(table,val).values(10).execute());
  int firstId=create().select(max(id)).from(table).fetchOne(max(id));
  if (dialect() != POSTGRES) {
    assertEquals(new BigInteger("" + firstId),create().lastID());
  }
  R r1=create().selectFrom(table).fetchOne();
  assertEquals(firstId,(int)r1.getValue(id));
  assertEquals(10,(int)r1.getValue(val));
  R r2=create().insertInto(table,val).values(11).returning().fetchOne();
  if (dialect() != POSTGRES) {
    assertEquals(new BigInteger("" + (firstId + 1)),create().lastID());
    assertEquals(new BigInteger("" + (firstId + 1)),create().lastID());
  }
  assertEquals(firstId + 1,(int)r2.getValue(id));
  assertEquals(11,(int)r2.getValue(val));
  if (dialect() == CUBRID || dialect() == H2 || dialect() == DERBY) {
    log.info("SKIPPING","Multi-record INSERT .. RETURNING statement");
  }
 else {
    Result<R> r3=create().insertInto(table,val).values(12).values(13).returning(id).fetch();
    assertEquals(2,r3.size());
    assertNull(r3.getValue(0,val));
    assertNull(r3.getValue(1,val));
    assertEquals(firstId + 2,(int)r3.getValue(0,id));
    assertEquals(firstId + 3,(int)r3.getValue(1,id));
  }
}
