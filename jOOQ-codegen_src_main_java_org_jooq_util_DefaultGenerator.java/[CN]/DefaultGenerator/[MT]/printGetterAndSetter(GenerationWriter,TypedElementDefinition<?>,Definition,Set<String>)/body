{
  String columnDisambiguationSuffix="";
  String getterDisambiguationSuffix="";
  if (strategy.getJavaIdentifierUC(element).equals(strategy.getJavaIdentifierUC(type))) {
    columnDisambiguationSuffix="_";
  }
  if (reserved.contains(strategy.getJavaClassName(element))) {
    getterDisambiguationSuffix="_";
  }
  printFieldJavaDoc(out,getterDisambiguationSuffix,element);
  out.println("\tpublic void set" + strategy.getJavaClassName(element) + getterDisambiguationSuffix+ "("+ getJavaType(element.getType())+ " value) {");
  out.println("\t\tsetValue(" + strategy.getFullJavaIdentifierUC(element) + columnDisambiguationSuffix+ ", value);");
  out.println("\t}");
  printFieldJavaDoc(out,getterDisambiguationSuffix,element);
  out.println("\tpublic " + getJavaType(element.getType()) + " get"+ strategy.getJavaClassName(element)+ getterDisambiguationSuffix+ "() {");
  out.println("\t\treturn getValue(" + strategy.getFullJavaIdentifierUC(element) + columnDisambiguationSuffix+ ");");
  out.println("\t}");
  if (generateRelations() && element instanceof ColumnDefinition) {
    ColumnDefinition column=(ColumnDefinition)element;
    List<UniqueKeyDefinition> uniqueKeys=column.getUniqueKeys();
    for (    UniqueKeyDefinition uniqueKey : uniqueKeys) {
      if (out.printOnlyOnce(uniqueKey)) {
        foreignKeyLoop:         for (        ForeignKeyDefinition foreignKey : uniqueKey.getForeignKeys()) {
          if (foreignKey.getReferencedColumns().size() != foreignKey.getKeyColumns().size()) {
            log.warn("Foreign key mismatch",foreignKey.getName() + " does not match its primary key! No code is generated for this key. See trac tickets #64 and #69");
            continue foreignKeyLoop;
          }
          TableDefinition referencing=foreignKey.getKeyTable();
          printFieldJavaDoc(out,null,column);
          out.print("\tpublic ");
          out.print(List.class);
          out.print("<");
          out.print(strategy.getFullJavaClassName(referencing,"Record"));
          out.print("> fetch");
          out.print(strategy.getJavaClassName(referencing));
          out.print("List");
          if (foreignKey.countSimilarReferences() > 1) {
            out.print("By");
            out.print(strategy.getJavaClassName(foreignKey.getKeyColumns().get(0)));
          }
          out.print("() throws ");
          out.print(SQLException.class);
          out.println(" {");
          out.println("\t\treturn create()");
          out.print("\t\t\t.selectFrom(");
          out.print(strategy.getFullJavaIdentifierUC(referencing));
          out.println(")");
          String connector="\t\t\t.where(";
          for (int i=0; i < foreignKey.getReferencedColumns().size(); i++) {
            out.print(connector);
            out.print(strategy.getFullJavaIdentifierUC(foreignKey.getKeyColumns().get(i)));
            out.print(".equal(getValue");
            DataTypeDefinition foreignType=foreignKey.getKeyColumns().get(i).getType();
            DataTypeDefinition primaryType=uniqueKey.getKeyColumns().get(i).getType();
            if (!match(foreignType,primaryType)) {
              out.print("As");
              out.print(getSimpleJavaType(foreignKey.getKeyColumns().get(i).getType()));
            }
            out.print("(");
            out.print(strategy.getFullJavaIdentifierUC(uniqueKey.getKeyColumns().get(i)));
            out.println(")))");
            connector="\t\t\t.and(";
          }
          out.println("\t\t\t.fetch();");
          out.println("\t}");
        }
      }
    }
    ForeignKeyDefinition foreignKey=column.getForeignKey();
    if (foreignKey != null && out.printOnlyOnce(foreignKey)) {
      boolean skipGeneration=false;
      if (foreignKey.getReferencedColumns().size() != foreignKey.getKeyColumns().size()) {
        log.warn("Foreign key mismatch",foreignKey.getName() + " does not match its primary key! No code is generated for this key. See trac tickets #64 and #69");
        skipGeneration=true;
      }
      TableDefinition referenced=foreignKey.getReferencedTable();
      if (referenced instanceof MasterDataTableDefinition) {
        skipGeneration=true;
      }
      if (!skipGeneration) {
        printFieldJavaDoc(out,null,column);
        out.print("\tpublic ");
        out.print(strategy.getFullJavaClassName(referenced,"Record"));
        out.print(" fetch");
        out.print(strategy.getJavaClassName(referenced));
        if (foreignKey.countSimilarReferences() > 1) {
          out.print("By");
          out.print(strategy.getJavaClassName(column));
        }
        out.print("() throws ");
        out.print(SQLException.class);
        out.println(" {");
        out.println("\t\treturn create()");
        out.print("\t\t\t.selectFrom(");
        out.print(strategy.getFullJavaIdentifierUC(referenced));
        out.println(")");
        String connector="\t\t\t.where(";
        for (int i=0; i < foreignKey.getReferencedColumns().size(); i++) {
          out.print(connector);
          out.print(strategy.getFullJavaIdentifierUC(foreignKey.getReferencedColumns().get(i)));
          out.print(".equal(getValue");
          DataTypeDefinition foreignType=foreignKey.getKeyColumns().get(i).getType();
          DataTypeDefinition primaryType=foreignKey.getReferencedColumns().get(i).getType();
          if (!match(foreignType,primaryType)) {
            out.print("As");
            out.print(getSimpleJavaType(foreignKey.getReferencedColumns().get(i).getType()));
          }
          out.print("(");
          out.print(strategy.getFullJavaIdentifierUC(foreignKey.getKeyColumns().get(i)));
          out.println(")))");
          connector="\t\t\t.and(";
        }
        out.println("\t\t\t.fetchOne();");
        out.println("\t}");
      }
    }
  }
}
