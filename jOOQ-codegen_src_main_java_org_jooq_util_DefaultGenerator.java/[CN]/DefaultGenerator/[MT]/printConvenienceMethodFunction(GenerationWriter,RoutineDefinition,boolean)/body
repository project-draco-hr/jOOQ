{
  if (function.getInParameters().size() > 254) {
    log.warn("Too many parameters","Function " + function + " has more than 254 in parameters. Skipping generation of convenience method.");
    return;
  }
  out.println();
  out.println("\t/**");
  out.println("\t * Invoke " + strategy.getJavaIdentifier(function));
  out.println("\t *");
  for (  ParameterDefinition parameter : function.getInParameters()) {
    out.println("\t * @param " + strategy.getJavaMemberName(parameter));
  }
  printThrowsDataAccessException(out);
  out.println("\t */");
  out.print("\tpublic ");
  if (!instance) {
    out.print("static ");
  }
  out.print(getJavaType(function.getReturnType()));
  out.print(" ");
  out.print(strategy.getJavaMethodName(function,Mode.DEFAULT));
  out.print("(");
  String glue="";
  if (!instance) {
    out.print(Configuration.class);
    out.print(" configuration");
    glue=", ";
  }
  for (  ParameterDefinition parameter : function.getInParameters()) {
    if (instance && parameter.equals(function.getInParameters().get(0))) {
      continue;
    }
    out.print(glue);
    printNumberType(out,parameter.getType());
    out.print(" ");
    out.print(strategy.getJavaMemberName(parameter));
    glue=", ";
  }
  out.println(") {");
  out.print("\t\t");
  out.print(strategy.getFullJavaClassName(function));
  out.print(" f = new ");
  out.print(strategy.getFullJavaClassName(function));
  out.println("();");
  for (  ParameterDefinition parameter : function.getInParameters()) {
    out.print("\t\tf.");
    out.print(strategy.getJavaSetterName(parameter,Mode.DEFAULT));
    out.print("(");
    if (instance && parameter.equals(function.getInParameters().get(0))) {
      out.print("this");
    }
 else {
      out.print(strategy.getJavaMemberName(parameter));
    }
    out.println(");");
  }
  out.println();
  out.print("\t\tf.execute(");
  if (instance) {
    out.print("getConfiguration()");
  }
 else {
    out.print("configuration");
  }
  out.println(");");
  out.println("\t\treturn f.getReturnValue();");
  out.println("\t}");
}
