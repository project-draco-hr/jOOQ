{
  log.info("Generating ARRAY",getStrategy().getFileName(array,Mode.RECORD));
  final String className=getStrategy().getJavaClassName(array,Mode.RECORD);
  final String elementType=getJavaType(array.getElementType());
  final String elementTypeRef=getJavaTypeReference(database,array.getElementType());
  final List<String> interfaces=getStrategy().getJavaClassImplements(array,Mode.RECORD);
  final String arrayName=array.getOutputName();
  final String schemaId=getStrategy().getFullJavaIdentifier(schema);
  JavaWriter out=new JavaWriter(getStrategy().getFile(array,Mode.RECORD));
  printPackage(out,array,Mode.RECORD);
  printClassJavadoc(out,array);
  out.println("public class %s extends %s<%s>[[before= implements ][%s]] {",className,ArrayRecordImpl.class,elementType,interfaces);
  out.printSerial();
  out.tab(1).javadoc("Create a new <code>%s</code> record",array.getQualifiedOutputName());
  out.tab(1).println("public %s(%s configuration) {",className,Configuration.class);
  out.tab(2).println("super(%s, \"%s\", %s, configuration);",schemaId,arrayName,elementTypeRef);
  out.tab(1).println("}");
  out.tab(1).javadoc("Create a new <code>%s</code> record",array.getQualifiedOutputName());
  out.tab(1).println("public %s(%s configuration, %s... array) {",className,Configuration.class,elementType);
  out.tab(2).println("this(configuration);");
  out.tab(2).println("set(array);");
  out.tab(1).println("}");
  out.tab(1).javadoc("Create a new <code>%s</code> record",array.getQualifiedOutputName());
  out.tab(1).println("public %s(%s configuration, %s<? extends %s> list) {",className,Configuration.class,List.class,elementType);
  out.tab(2).println("this(configuration);");
  out.tab(2).println("setList(list);");
  out.tab(1).println("}");
  out.println("}");
  out.close();
}
