{
  log.info("Generating routine",strategy.getFileName(routine));
  GenerationWriter out=new GenerationWriter(strategy.getFile(routine));
  printHeader(out,routine);
  printClassJavadoc(out,routine);
  out.print("public class ");
  out.print(strategy.getJavaClassName(routine));
  out.print(" extends ");
  out.print(AbstractRoutine.class);
  out.print("<");
  if (routine.getReturnValue() == null) {
    out.print(Void.class);
  }
 else {
    out.print(getJavaType(routine.getReturnType()));
  }
  out.print(">");
  printImplements(out,routine,Mode.DEFAULT);
  out.println(" {");
  out.printSerial();
  out.println();
  for (  ParameterDefinition parameter : routine.getAllParameters()) {
    printParameter(out,parameter,routine);
  }
  out.println();
  printJavadoc(out,"Create a new routine call instance");
  out.println("\tpublic " + strategy.getJavaClassName(routine) + "() {");
  out.print("\t\tsuper(");
  out.print("\"");
  out.print(routine.getName());
  out.print("\", ");
  out.print(strategy.getFullJavaIdentifier(schema));
  if (routine.getPackage() != null) {
    out.print(", ");
    out.print(strategy.getFullJavaIdentifier(routine.getPackage()));
  }
  if (routine.getReturnValue() != null) {
    out.print(", ");
    out.print(getJavaTypeReference(database,routine.getReturnType()));
  }
  out.println(");");
  if (routine.getAllParameters().size() > 0) {
    out.println();
  }
  for (  ParameterDefinition parameter : routine.getAllParameters()) {
    out.print("\t\t");
    if (parameter.equals(routine.getReturnValue())) {
      out.println("setReturnParameter(" + strategy.getJavaIdentifier(parameter) + ");");
    }
 else     if (routine.getInParameters().contains(parameter)) {
      if (routine.getOutParameters().contains(parameter)) {
        out.println("addInOutParameter(" + strategy.getJavaIdentifier(parameter) + ");");
      }
 else {
        out.println("addInParameter(" + strategy.getJavaIdentifier(parameter) + ");");
      }
    }
 else {
      out.println("addOutParameter(" + strategy.getJavaIdentifier(parameter) + ");");
    }
  }
  if (routine.getOverload() != null) {
    out.println("\t\tsetOverloaded(true);");
  }
  out.println("\t}");
  for (  ParameterDefinition parameter : routine.getInParameters()) {
    out.println();
    out.println("\t/**");
    out.println("\t * Set the <code>" + parameter.getOutputName() + "</code> parameter to the routine");
    out.println("\t */");
    out.print("\tpublic void ");
    out.print(strategy.getJavaSetterName(parameter,Mode.DEFAULT));
    out.print("(");
    printNumberType(out,parameter.getType());
    out.println(" value) {");
    out.print("\t\tset");
    if (parameter.getType().isGenericNumberType()) {
      out.print("Number");
    }
 else {
      out.print("Value");
    }
    out.print("(");
    out.print(strategy.getJavaIdentifier(parameter));
    out.println(", value);");
    out.println("\t}");
    if (routine.isSQLUsable()) {
      out.println();
      out.println("\t/**");
      out.println("\t * Set the <code>" + parameter.getOutputName() + "</code> parameter to the function");
      out.println("\t * <p>");
      out.print("\t * Use this method only, if the function is called as a {@link ");
      out.print(Field.class);
      out.print("} in a {@link ");
      out.print(Select.class);
      out.println("} statement!");
      out.println("\t */");
      out.print("\tpublic void ");
      out.print(strategy.getJavaSetterName(parameter,Mode.DEFAULT));
      out.print("(");
      out.print(Field.class);
      out.print("<");
      printExtendsNumberType(out,parameter.getType());
      out.println("> field) {");
      out.print("\t\tset");
      if (parameter.getType().isGenericNumberType()) {
        out.print("Number");
      }
 else {
        out.print("Field");
      }
      out.print("(");
      out.print(strategy.getJavaIdentifier(parameter));
      out.println(", field);");
      out.println("\t}");
    }
  }
  for (  ParameterDefinition parameter : routine.getAllParameters()) {
    boolean isReturnValue=parameter.equals(routine.getReturnValue());
    boolean isOutParameter=routine.getOutParameters().contains(parameter);
    if (isOutParameter && !isReturnValue) {
      out.println();
      out.print("\tpublic ");
      out.print(getJavaType(parameter.getType()));
      out.print(" ");
      out.print(strategy.getJavaGetterName(parameter,Mode.DEFAULT));
      out.println("() {");
      out.print("\t\treturn getValue(");
      out.print(strategy.getJavaIdentifier(parameter));
      out.println(");");
      out.println("\t}");
    }
  }
  out.println("}");
  out.close();
}
