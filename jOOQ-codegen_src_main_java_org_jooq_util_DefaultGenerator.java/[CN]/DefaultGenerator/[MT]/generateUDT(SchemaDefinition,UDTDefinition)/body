{
  log.info("Generating UDT ",getStrategy().getFileName(udt));
  final String className=getStrategy().getJavaClassName(udt);
  final String recordType=getStrategy().getFullJavaClassName(udt,Mode.RECORD);
  final List<String> interfaces=getStrategy().getJavaClassImplements(udt,Mode.DEFAULT);
  final String schemaId=getStrategy().getFullJavaIdentifier(schema);
  JavaWriter out=new JavaWriter(getStrategy().getFile(udt));
  printPackage(out,udt);
  printClassJavadoc(out,udt);
  if (udt.getRoutines().size() > 0) {
    interfaces.add(org.jooq.Package.class.getName());
  }
  out.println("public class %s extends %s<%s>[[before= implements ][%s]] {",className,UDTImpl.class,recordType,interfaces);
  out.printSerial();
  printSingletonInstance(out,udt);
  printRecordTypeMethod(out,udt);
  for (  AttributeDefinition attribute : udt.getAttributes()) {
    printUDTColumn(out,attribute,udt);
  }
  for (  RoutineDefinition routine : udt.getRoutines()) {
    try {
      if (!routine.isSQLUsable()) {
        printConvenienceMethodProcedure(out,routine,false);
      }
 else {
        if (!routine.isAggregate()) {
          printConvenienceMethodFunction(out,routine,false);
        }
        printConvenienceMethodFunctionAsField(out,routine,false);
        printConvenienceMethodFunctionAsField(out,routine,true);
      }
    }
 catch (    Exception e) {
      log.error("Error while generating routine " + routine,e);
    }
  }
  out.tab(1).javadoc(NO_FURTHER_INSTANCES_ALLOWED);
  out.tab(1).println("private %s() {",className);
  out.tab(2).println("super(\"%s\"[[before=, ][%s]]);",udt.getOutputName(),list(schemaId));
  out.println();
  out.tab(2).println("// Initialise data type");
  out.tab(2).println("getDataType();");
  out.tab(1).println("}");
  out.println("}");
  out.close();
}
