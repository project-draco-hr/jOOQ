{
  String tType="Void";
  String pType=strategy.getFullJavaClassName(table,Mode.POJO);
  UniqueKeyDefinition key=table.getMainUniqueKey();
  ColumnDefinition keyColumn=null;
  if (key != null) {
    List<ColumnDefinition> columns=key.getKeyColumns();
    if (columns.size() == 1) {
      keyColumn=columns.get(0);
      tType=getJavaType(keyColumn.getType());
    }
  }
  if (keyColumn == null) {
    log.info("Skipping DAO generation",strategy.getFileName(table,Mode.DAO));
    return;
  }
 else {
    log.info("Generating DAO",strategy.getFileName(table,Mode.DAO));
  }
  GenerationWriter out=new GenerationWriter(strategy.getFile(table,Mode.DAO));
  printHeader(out,table,Mode.DAO);
  printClassJavadoc(out,table);
  out.print("public class ");
  out.print(strategy.getJavaClassName(table,Mode.DAO));
  out.print(" extends ");
  out.print(DAOImpl.class);
  out.print("<");
  out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
  out.print(", ");
  out.print(pType);
  out.print(", ");
  out.print(tType);
  out.println("> {");
  printJavadoc(out,"Create a new " + strategy.getJavaClassName(table,Mode.DAO) + " without any factory");
  out.print("\tpublic ");
  out.print(strategy.getJavaClassName(table,Mode.DAO));
  out.println("() {");
  out.print("\t\tsuper(");
  out.print(strategy.getFullJavaIdentifier(table));
  out.print(", ");
  out.print(strategy.getFullJavaClassName(table,Mode.POJO));
  out.println(".class);");
  out.println("\t}");
  printJavadoc(out,"Create a new " + strategy.getJavaClassName(table,Mode.DAO) + " with an attached factory");
  out.print("\tpublic ");
  out.print(strategy.getJavaClassName(table,Mode.DAO));
  out.print("(");
  out.print(Executor.class);
  out.println(" factory) {");
  out.print("\t\tsuper(");
  out.print(strategy.getFullJavaIdentifier(table));
  out.print(", ");
  out.print(strategy.getFullJavaClassName(table,Mode.POJO));
  out.println(".class, factory);");
  out.println("\t}");
  out.println();
  printOverride(out);
  out.print("\tprotected ");
  out.print(tType);
  out.print(" getId(");
  out.print(strategy.getFullJavaClassName(table,Mode.POJO));
  out.println(" object) {");
  out.print("\t\treturn object.");
  out.print(strategy.getJavaGetterName(keyColumn,Mode.POJO));
  out.println("();");
  out.println("\t}");
  for (  ColumnDefinition column : table.getColumns()) {
    printJavadoc(out,"Fetch records that have <code>" + column.getOutputName() + " IN (values)</code>");
    out.print("\tpublic ");
    out.print(List.class);
    out.print("<");
    out.print(strategy.getFullJavaClassName(table,Mode.POJO));
    out.print("> fetchBy");
    out.print(strategy.getJavaClassName(column,Mode.POJO));
    out.print("(");
    out.print(getJavaType(column.getType()));
    out.println("... values) {");
    out.print("\t\treturn fetch(");
    out.print(strategy.getFullJavaIdentifier(column));
    out.println(", values);");
    out.println("\t}");
    ukLoop:     for (    UniqueKeyDefinition uk : column.getUniqueKeys()) {
      if (uk.getKeyColumns().size() == 1 && uk.getKeyColumns().get(0).equals(column)) {
        printJavadoc(out,"Fetch a unique that has <code>" + column.getOutputName() + " = value</code>");
        out.print("\tpublic ");
        out.print(strategy.getFullJavaClassName(table,Mode.POJO));
        out.print(" fetchOneBy");
        out.print(strategy.getJavaClassName(column,Mode.POJO));
        out.print("(");
        out.print(getJavaType(column.getType()));
        out.println(" value) {");
        out.print("\t\treturn fetchOne(");
        out.print(strategy.getFullJavaIdentifier(column));
        out.println(", value);");
        out.println("\t}");
        break ukLoop;
      }
    }
  }
  out.println("}");
  out.close();
}
