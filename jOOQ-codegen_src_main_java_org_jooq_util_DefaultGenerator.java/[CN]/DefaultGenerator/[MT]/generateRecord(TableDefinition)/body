{
  log.info("Generating record",getStrategy().getFileName(table,Mode.RECORD));
  final String className=getStrategy().getJavaClassName(table,Mode.RECORD);
  final String tableIdentifier=getStrategy().getFullJavaIdentifier(table);
  final String recordType=getStrategy().getFullJavaClassName(table,Mode.RECORD);
  final List<String> interfaces=getStrategy().getJavaClassImplements(table,Mode.RECORD);
  JavaWriter out=new JavaWriter(getStrategy().getFile(table,Mode.RECORD));
  printPackage(out,table,Mode.RECORD);
  printClassJavadoc(out,table);
  printTableJPAAnnotation(out,table);
  Class<?> baseClass;
  if (generateRelations() && table.getMainUniqueKey() != null) {
    baseClass=UpdatableRecordImpl.class;
  }
 else {
    baseClass=TableRecordImpl.class;
  }
  int degree=table.getColumns().size();
  String rowType=null;
  String rowTypeRecord=null;
  if (degree <= Constants.MAX_ROW_DEGREE) {
    rowType="<";
    String separator="";
    for (    ColumnDefinition column : table.getColumns()) {
      rowType+=separator;
      rowType+=getJavaType(column.getType());
      separator=", ";
    }
    rowType+=">";
    rowTypeRecord=Record.class.getName() + degree + rowType;
    interfaces.add(rowTypeRecord);
  }
  if (generateInterfaces()) {
    interfaces.add(getStrategy().getFullJavaClassName(table,Mode.INTERFACE));
  }
  out.println("public class %s extends %s<%s>[[before= implements ][%s]] {",className,baseClass,recordType,interfaces);
  out.printSerial();
  for (  ColumnDefinition column : table.getColumns()) {
    printGetterAndSetter(out,column);
  }
  out.tab(1).javadoc("Create a detached %s",className);
  out.tab(1).println("public %s() {",className);
  out.tab(2).println("super(%s);",tableIdentifier);
  out.tab(1).println("}");
  if (degree <= Constants.MAX_ROW_DEGREE) {
    out.tab(1).header("Record%s type implementation",degree);
    out.tab(1).overrideInherit();
    out.tab(1).println("public %s%s%s fieldsRow() {",Row.class,degree,rowType);
    out.tab(2).println("return %s.row([[field%s()]]);",Factory.class,range(1,degree));
    out.tab(1).println("}");
    out.tab(1).overrideInherit();
    out.tab(1).println("public %s%s%s valuesRow() {",Row.class,degree,rowType);
    out.tab(2).println("return %s.row([[value%s()]]);",Factory.class,range(1,degree));
    out.tab(1).println("}");
    for (int i=1; i <= degree; i++) {
      ColumnDefinition column=table.getColumn(i - 1);
      final String colType=getJavaType(column.getType());
      final String colIdentifier=getStrategy().getFullJavaIdentifier(column);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s<%s> field%s() {",Field.class,colType,i);
      out.tab(2).println("return %s;",colIdentifier);
      out.tab(1).println("}");
    }
    for (int i=1; i <= degree; i++) {
      ColumnDefinition column=table.getColumn(i - 1);
      final String colType=getJavaType(column.getType());
      final String colGetter=getStrategy().getJavaGetterName(column,Mode.RECORD);
      out.tab(1).overrideInherit();
      out.tab(1).println("public %s value%s() {",colType,i);
      out.tab(2).println("return %s();",colGetter);
      out.tab(1).println("}");
    }
  }
  out.println("}");
  out.close();
}
