{
  log.info("Generating schema",strategy.getFileName(schema));
  log.info("----------------------------------------------------------");
  outS=new GenerationWriter(strategy.getFile(schema));
  printHeader(outS,schema);
  printClassJavadoc(outS,schema);
  outS.print("public class ");
  outS.print(strategy.getJavaClassName(schema));
  outS.print(" extends ");
  outS.print(SchemaImpl.class);
  printImplements(outS,schema,Mode.DEFAULT);
  outS.println(" {");
  outS.printSerial();
  outS.println();
  outS.println("\t/**");
  outS.println("\t * The singleton instance of " + schema.getQualifiedOutputName());
  outS.println("\t */");
  outS.println("\tpublic static final " + strategy.getJavaClassName(schema) + " "+ strategy.getJavaIdentifier(schema)+ " = new "+ strategy.getJavaClassName(schema)+ "();");
  outS.println();
  printNoFurtherInstancesAllowedJavadoc(outS);
  outS.println("\tprivate " + strategy.getJavaClassName(schema) + "() {");
  outS.println("\t\tsuper(\"" + schema.getOutputName() + "\");");
  outS.println("\t}");
  outS.printInitialisationStatementsPlaceholder();
  if (generateDeprecated()) {
    log.info("Generating factory",strategy.getFileName(schema,Mode.FACTORY));
    outF=new GenerationWriter(strategy.getFile(schema,Mode.FACTORY));
    printHeader(outF,schema);
    printClassJavadoc(outF,"@deprecated - [#1866] - 2.6.0 - Schema-specific factories will no longer be generated in the future. Do not reuse.");
    outF.print("public class ");
    outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
    outF.print(" extends ");
    outF.print(database.getDialect().getFactory());
    printImplements(outF,schema,Mode.FACTORY);
    outF.println(" {");
    outF.printSerial();
    outF.println();
    outF.println("\t/**");
    outF.println("\t * Create a factory with a connection");
    outF.println("\t *");
    outF.println("\t * @param connection The connection to use with objects created from this factory");
    outF.println("\t */");
    outF.print("\tpublic ");
    outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
    outF.print("(");
    outF.print(Connection.class);
    outF.println(" connection) {");
    outF.println("\t\tsuper(connection);");
    outF.println();
    outF.println("\t\tinitDefaultSchema();");
    outF.println("\t}");
    outF.println();
    outF.println("\t/**");
    outF.println("\t * Create a factory with a data source");
    outF.println("\t *");
    outF.println("\t * @param dataSource The data source to use with objects created from this factory");
    outF.println("\t */");
    outF.print("\tpublic ");
    outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
    outF.print("(");
    outF.print(DataSource.class);
    outF.println(" dataSource) {");
    outF.println("\t\tsuper(dataSource);");
    outF.println();
    outF.println("\t\tinitDefaultSchema();");
    outF.println("\t}");
    if (generateDeprecated()) {
      outF.println();
      outF.println("\t/**");
      outF.println("\t * Create a factory with a connection and a schema mapping");
      outF.println("\t * ");
      outF.print("\t * @deprecated - 2.0.5 - Use {@link #");
      outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
      outF.print("(");
      outF.print(Connection.class);
      outF.print(", ");
      outF.print(Settings.class);
      outF.println(")} instead");
      outF.println("\t */");
      outF.println("\t@Deprecated");
      outF.print("\tpublic ");
      outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
      outF.print("(");
      outF.print(Connection.class);
      outF.println(" connection, org.jooq.SchemaMapping mapping) {");
      outF.println("\t\tsuper(connection, mapping);");
      outF.println();
      outF.println("\t\tinitDefaultSchema();");
      outF.println("\t}");
    }
    outF.println();
    outF.println("\t/**");
    outF.println("\t * Create a factory with a connection and some settings");
    outF.println("\t *");
    outF.println("\t * @param connection The connection to use with objects created from this factory");
    outF.println("\t * @param settings The settings to apply to objects created from this factory");
    outF.println("\t */");
    outF.print("\tpublic ");
    outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
    outF.print("(");
    outF.print(Connection.class);
    outF.print(" connection, ");
    outF.print(Settings.class);
    outF.println(" settings) {");
    outF.println("\t\tsuper(connection, settings);");
    outF.println();
    outF.println("\t\tinitDefaultSchema();");
    outF.println("\t}");
    outF.println();
    outF.println("\t/**");
    outF.println("\t * Create a factory with a data source and some settings");
    outF.println("\t *");
    outF.println("\t * @param dataSource The data source to use with objects created from this factory");
    outF.println("\t * @param settings The settings to apply to objects created from this factory");
    outF.println("\t */");
    outF.print("\tpublic ");
    outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
    outF.print("(");
    outF.print(DataSource.class);
    outF.print(" dataSource, ");
    outF.print(Settings.class);
    outF.println(" settings) {");
    outF.println("\t\tsuper(dataSource, settings);");
    outF.println();
    outF.println("\t\tinitDefaultSchema();");
    outF.println("\t}");
    outF.println();
    outF.println("\t/**");
    outF.println("\t * Initialise the render mapping's default schema.");
    outF.println("\t * <p>");
    outF.println("\t * For convenience, this schema-specific factory should override any pre-existing setting");
    outF.println("\t */");
    outF.println("\tprivate final void initDefaultSchema() {");
    outF.print("\t\t");
    outF.print(SettingsTools.class);
    outF.print(".getRenderMapping(getSettings()).setDefaultSchema(");
    outF.print(strategy.getFullJavaIdentifier(schema));
    outF.println(".getName());");
    outF.println("\t}");
    watch.splitInfo("Factory generated");
  }
}
