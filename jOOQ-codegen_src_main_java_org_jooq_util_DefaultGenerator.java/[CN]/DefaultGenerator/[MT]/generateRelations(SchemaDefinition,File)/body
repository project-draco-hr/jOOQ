{
  log.info("Generating Keys");
  GenerationWriter out=new GenerationWriter(new File(targetSchemaDir,"Keys.java"));
  printHeader(out,schema);
  printClassJavadoc(out,"A class modelling foreign key relationships between tables of the <code>" + schema.getOutputName() + "</code> schema");
  out.println("public class Keys {");
  out.println();
  out.println("\t// IDENTITY definitions");
  final int INITIALISER_SIZE=500;
  List<IdentityDefinition> allIdentities=new ArrayList<IdentityDefinition>();
  List<UniqueKeyDefinition> allUniqueKeys=new ArrayList<UniqueKeyDefinition>();
  List<ForeignKeyDefinition> allForeignKeys=new ArrayList<ForeignKeyDefinition>();
  for (  TableDefinition table : database.getTables(schema)) {
    try {
      IdentityDefinition identity=table.getIdentity();
      if (identity != null) {
        out.print("\tpublic static final ");
        out.print(Identity.class);
        out.print("<");
        out.print(strategy.getFullJavaClassName(identity.getColumn().getContainer(),Mode.RECORD));
        out.print(", ");
        out.print(getJavaType(identity.getColumn().getType()));
        out.print("> IDENTITY_");
        out.print(strategy.getJavaIdentifier(identity.getColumn().getContainer()));
        out.print(" = Identities");
        out.print(allIdentities.size() / INITIALISER_SIZE);
        out.print(".IDENTITY_");
        out.print(strategy.getJavaIdentifier(identity.getColumn().getContainer()));
        out.println(";");
        allIdentities.add(identity);
      }
    }
 catch (    Exception e) {
      log.error("Error while generating table " + table,e);
    }
  }
  out.println();
  out.println("\t// UNIQUE and PRIMARY KEY definitions");
  for (  TableDefinition table : database.getTables(schema)) {
    try {
      List<UniqueKeyDefinition> uniqueKeys=table.getUniqueKeys();
      for (      UniqueKeyDefinition uniqueKey : uniqueKeys) {
        out.print("\tpublic static final ");
        out.print(UniqueKey.class);
        out.print("<");
        out.print(strategy.getFullJavaClassName(uniqueKey.getTable(),Mode.RECORD));
        out.print("> ");
        out.print(strategy.getJavaIdentifier(uniqueKey));
        out.print(" = UniqueKeys");
        out.print(allUniqueKeys.size() / INITIALISER_SIZE);
        out.print(".");
        out.print(strategy.getJavaIdentifier(uniqueKey));
        out.println(";");
        allUniqueKeys.add(uniqueKey);
      }
    }
 catch (    Exception e) {
      log.error("Error while generating table " + table,e);
    }
  }
  out.println();
  out.println("\t// FOREIGN KEY definitions");
  for (  TableDefinition table : database.getTables(schema)) {
    try {
      List<ForeignKeyDefinition> foreignKeys=table.getForeignKeys();
      for (      ForeignKeyDefinition foreignKey : foreignKeys) {
        if (foreignKey.getReferencedTable() instanceof MasterDataTableDefinition) {
          continue;
        }
        out.print("\tpublic static final ");
        out.print(ForeignKey.class);
        out.print("<");
        out.print(strategy.getFullJavaClassName(foreignKey.getKeyTable(),Mode.RECORD));
        out.print(", ");
        out.print(strategy.getFullJavaClassName(foreignKey.getReferencedTable(),Mode.RECORD));
        out.print("> ");
        out.print(strategy.getJavaIdentifier(foreignKey));
        out.print(" = ForeignKeys");
        out.print(allForeignKeys.size() / INITIALISER_SIZE);
        out.print(".");
        out.print(strategy.getJavaIdentifier(foreignKey));
        out.println(";");
        allForeignKeys.add(foreignKey);
      }
    }
 catch (    Exception e) {
      log.error("Error while generating reference " + table,e);
    }
  }
  printPrivateConstructor(out,"Keys");
  int identityCounter=0;
  int uniqueKeyCounter=0;
  int foreignKeyCounter=0;
  for (  IdentityDefinition identity : allIdentities) {
    generateIdentity(out,INITIALISER_SIZE,identityCounter,identity);
    identityCounter++;
  }
  if (identityCounter > 0) {
    out.println("\t}");
  }
  for (  UniqueKeyDefinition uniqueKey : allUniqueKeys) {
    generateUniqueKey(out,INITIALISER_SIZE,uniqueKeyCounter,uniqueKey);
    uniqueKeyCounter++;
  }
  if (uniqueKeyCounter > 0) {
    out.println("\t}");
  }
  for (  ForeignKeyDefinition foreignKey : allForeignKeys) {
    generateForeignKey(out,INITIALISER_SIZE,foreignKeyCounter,foreignKey);
    foreignKeyCounter++;
  }
  if (foreignKeyCounter > 0) {
    out.println("\t}");
  }
  out.println("}");
  out.close();
  watch.splitInfo("Keys generated");
}
