{
  if (foreignKey.getReferencedColumns().size() != foreignKey.getKeyColumns().size()) {
    log.warn("Foreign key mismatch",foreignKey.getName() + " does not match its primary key! No code is generated for this key. See trac tickets #64 and #69");
    return;
  }
  TableDefinition referencing=foreignKey.getKeyTable();
  StringBuilder fetchMethodName=new StringBuilder();
  fetchMethodName.append("fetch");
  fetchMethodName.append(getStrategy().getJavaClassName(referencing));
  fetchMethodName.append("List");
  if (foreignKey.countSimilarReferences() > 1) {
    fetchMethodName.append("By");
    fetchMethodName.append(getStrategy().getJavaClassName(foreignKey.getKeyColumns().get(0)));
  }
  if (fetchMethodNames.contains(fetchMethodName.toString())) {
    log.warn("Duplicate foreign key",foreignKey.getName() + " has the same properties as another foreign key! No code is generated for this key. See trac ticket #1270");
    return;
  }
 else {
    fetchMethodNames.add(fetchMethodName.toString());
  }
  printFieldJavaDoc(out,column);
  out.print("\tpublic ");
  out.print(Result.class);
  out.print("<");
  out.print(getStrategy().getFullJavaClassName(referencing,Mode.RECORD));
  out.print("> ");
  out.print(fetchMethodName.toString());
  out.println("() {");
  out.println("\t\treturn create()");
  out.print("\t\t\t.selectFrom(");
  out.print(getStrategy().getFullJavaIdentifier(referencing));
  out.println(")");
  String connector="\t\t\t.where(";
  for (int i=0; i < foreignKey.getReferencedColumns().size(); i++) {
    out.print(connector);
    out.print(getStrategy().getFullJavaIdentifier(foreignKey.getKeyColumns().get(i)));
    out.print(".equal(getValue(");
    out.print(getStrategy().getFullJavaIdentifier(uniqueKey.getKeyColumns().get(i)));
    DataTypeDefinition foreignType=foreignKey.getKeyColumns().get(i).getType();
    DataTypeDefinition primaryType=uniqueKey.getKeyColumns().get(i).getType();
    if (!match(foreignType,primaryType)) {
      out.print(", ");
      out.print(getSimpleJavaType(foreignKey.getKeyColumns().get(i).getType()));
      out.print(".class");
    }
    out.println(")))");
    connector="\t\t\t.and(";
  }
  out.println("\t\t\t.fetch();");
  out.println("\t}");
}
