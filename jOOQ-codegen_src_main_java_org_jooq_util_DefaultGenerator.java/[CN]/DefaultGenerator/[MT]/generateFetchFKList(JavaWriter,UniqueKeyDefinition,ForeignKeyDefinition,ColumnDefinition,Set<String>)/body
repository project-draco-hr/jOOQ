{
  if (foreignKey.getReferencedColumns().size() != foreignKey.getKeyColumns().size()) {
    log.warn("Foreign key mismatch",foreignKey.getName() + " does not match its primary key! No code is generated for this key. See trac tickets #64 and #69");
    return;
  }
  final TableDefinition referencing=foreignKey.getKeyTable();
  final String referencingType=getStrategy().getFullJavaClassName(referencing,Mode.RECORD);
  final String referencingId=getStrategy().getFullJavaIdentifier(referencing);
  final StringBuilder method=new StringBuilder();
  method.append("fetch");
  method.append(getStrategy().getJavaClassName(referencing));
  method.append("List");
  if (foreignKey.countSimilarReferences() > 1) {
    method.append("By");
    method.append(getStrategy().getJavaClassName(foreignKey.getKeyColumns().get(0)));
  }
  if (fetchMethodNames.contains(method.toString())) {
    log.warn("Duplicate foreign key",foreignKey.getName() + " has the same properties as another foreign key! No code is generated for this key. See trac ticket #1270");
    return;
  }
 else {
    fetchMethodNames.add(method.toString());
  }
  printFieldJavaDoc(out,column);
  out.tab(1).println("public %s<%s> %s() {",Result.class,referencingType,method);
  out.tab(2).println("return create()");
  out.tab(3).println(".selectFrom(%s)",referencingId);
  String connector="where";
  for (int i=0; i < foreignKey.getReferencedColumns().size(); i++) {
    final String fkId=getStrategy().getFullJavaIdentifier(foreignKey.getKeyColumns().get(i));
    final String ukId=getStrategy().getFullJavaIdentifier(uniqueKey.getKeyColumns().get(i));
    DataTypeDefinition foreignType=foreignKey.getKeyColumns().get(i).getType();
    DataTypeDefinition primaryType=uniqueKey.getKeyColumns().get(i).getType();
    List<String> conversion=list(!match(foreignType,primaryType) ? getSimpleJavaType(foreignKey.getKeyColumns().get(i).getType()) : null);
    out.tab(3).println(".%s(%s.equal(getValue(%s[[before=, ][after=.class][%s]])))",connector,fkId,ukId,conversion);
    connector="and";
  }
  out.tab(3).println(".fetch();");
  out.tab(1).println("}");
}
