{
  File targetSchemaDir=strategy.getFile(schema).getParentFile();
  GenerationWriter outS=null;
  GenerationWriter outF=null;
  if (!schema.isDefaultSchema()) {
    log.info("Generating schema",strategy.getFileName(schema));
    log.info("----------------------------------------------------------");
    outS=new GenerationWriter(strategy.getFile(schema));
    printHeader(outS,schema);
    printClassJavadoc(outS,schema);
    outS.print("public class ");
    outS.print(strategy.getJavaClassName(schema));
    outS.print(" extends ");
    outS.print(SchemaImpl.class);
    printImplements(outS,schema,Mode.DEFAULT);
    outS.println(" {");
    outS.printSerial();
    outS.println();
    outS.println("\t/**");
    outS.println("\t * The singleton instance of " + schema.getQualifiedOutputName());
    outS.println("\t */");
    outS.println("\tpublic static final " + strategy.getJavaClassName(schema) + " "+ strategy.getJavaIdentifier(schema)+ " = new "+ strategy.getJavaClassName(schema)+ "();");
    outS.println();
    printNoFurtherInstancesAllowedJavadoc(outS);
    outS.println("\tprivate " + strategy.getJavaClassName(schema) + "() {");
    outS.println("\t\tsuper(\"" + schema.getOutputName() + "\");");
    outS.println("\t}");
    outS.printInitialisationStatementsPlaceholder();
    log.info("Generating factory",strategy.getFileName(schema,Mode.FACTORY));
    outF=new GenerationWriter(strategy.getFile(schema,Mode.FACTORY));
    printHeader(outF,schema);
    printClassJavadoc(outF,schema);
    outF.print("public class ");
    outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
    outF.print(" extends ");
    outF.print(database.getDialect().getFactory());
    printImplements(outF,schema,Mode.FACTORY);
    outF.println(" {");
    outF.printSerial();
    outF.println();
    outF.println("\t/**");
    outF.println("\t * Create a factory with a connection");
    outF.println("\t *");
    outF.println("\t * @param connection The connection to use with objects created from this factory");
    outF.println("\t */");
    outF.print("\tpublic ");
    outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
    outF.print("(");
    outF.print(Connection.class);
    outF.println(" connection) {");
    outF.println("\t\tsuper(connection);");
    outF.println();
    outF.println("\t\tinitDefaultSchema();");
    outF.println("\t}");
    if (generateDeprecated()) {
      outF.println();
      outF.println("\t/**");
      outF.println("\t * Create a factory with a connection and a schema mapping");
      outF.println("\t * ");
      outF.print("\t * @deprecated - 2.0.5 - Use {@link #");
      outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
      outF.print("(");
      outF.print(Connection.class);
      outF.print(", ");
      outF.print(Settings.class);
      outF.println(")} instead");
      outF.println("\t */");
      outF.println("\t@Deprecated");
      outF.print("\tpublic ");
      outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
      outF.print("(");
      outF.print(Connection.class);
      outF.println(" connection, org.jooq.SchemaMapping mapping) {");
      outF.println("\t\tsuper(connection, mapping);");
      outF.println();
      outF.println("\t\tinitDefaultSchema();");
      outF.println("\t}");
    }
    outF.println();
    outF.println("\t/**");
    outF.println("\t * Create a factory with a connection and some settings");
    outF.println("\t *");
    outF.println("\t * @param connection The connection to use with objects created from this factory");
    outF.println("\t * @param settings The settings to apply to objects created from this factory");
    outF.println("\t */");
    outF.print("\tpublic ");
    outF.print(strategy.getJavaClassName(schema,Mode.FACTORY));
    outF.print("(");
    outF.print(Connection.class);
    outF.print(" connection, ");
    outF.print(Settings.class);
    outF.println(" settings) {");
    outF.println("\t\tsuper(connection, settings);");
    outF.println();
    outF.println("\t\tinitDefaultSchema();");
    outF.println("\t}");
    outF.println();
    outF.println("\t/**");
    outF.println("\t * Initialise the render mapping's default schema.");
    outF.println("\t * <p>");
    outF.println("\t * For convenience, this schema-specific factory should override any pre-existing setting");
    outF.println("\t */");
    outF.println("\tprivate final void initDefaultSchema() {");
    outF.print("\t\t");
    outF.print(SettingsTools.class);
    outF.print(".getRenderMapping(getSettings()).setDefaultSchema(");
    outF.print(strategy.getFullJavaIdentifier(schema));
    outF.println(".getName());");
    outF.println("\t}");
    watch.splitInfo("Schema generated");
  }
  if (database.getSequences(schema).size() > 0) {
    log.info("Generating sequences");
    GenerationWriter out=new GenerationWriter(new File(targetSchemaDir,"Sequences.java"));
    printHeader(out,schema);
    printClassJavadoc(out,"Convenience access to all sequences in " + schema.getOutputName());
    out.println("public final class Sequences {");
    for (    SequenceDefinition sequence : database.getSequences(schema)) {
      out.println();
      out.println("\t/**");
      out.println("\t * The sequence " + sequence.getQualifiedOutputName());
      out.println("\t */");
      out.print("\tpublic static final ");
      out.print(Sequence.class);
      out.print("<");
      out.print(getJavaType(sequence.getType()));
      out.print(">");
      out.print(" ");
      out.print(strategy.getJavaIdentifier(sequence));
      out.print(" = new ");
      out.print(SequenceImpl.class);
      out.print("<");
      out.print(getJavaType(sequence.getType()));
      out.print(">");
      out.print("(\"");
      out.print(sequence.getOutputName());
      out.print("\"");
      if (!schema.isDefaultSchema()) {
        out.print(", ");
        out.print(strategy.getFullJavaIdentifier(schema));
      }
 else {
        out.print(", null");
      }
      out.print(", ");
      out.print(getJavaTypeReference(sequence.getDatabase(),sequence.getType()));
      out.println(");");
    }
    printPrivateConstructor(out,"Sequences");
    out.println("}");
    out.close();
    registerInSchema(outS,database.getSequences(schema),Sequence.class,true);
    watch.splitInfo("Sequences generated");
  }
  if (database.getMasterDataTables(schema).size() > 0) {
    log.info("Generating master data");
    for (    MasterDataTableDefinition table : database.getMasterDataTables(schema)) {
      try {
        log.info("Generating table",strategy.getFileName(table));
        GenerationWriter out=new GenerationWriter(strategy.getFile(table));
        printHeader(out,table);
        printClassJavadoc(out,table);
        ColumnDefinition pk=table.getPrimaryKeyColumn();
        ColumnDefinition l=table.getLiteralColumn();
        ColumnDefinition d=table.getDescriptionColumn();
        Result<Record> data=table.getData();
        out.print("public enum ");
        out.print(strategy.getJavaClassName(table));
        printImplements(out,table,Mode.ENUM,MasterDataType.class.getName() + "<" + getJavaType(pk.getType())+ ">");
        out.println(" {");
        Set<ColumnDefinition> columns=new LinkedHashSet<ColumnDefinition>(Arrays.asList(pk,l,d));
        for (        Record record : data) {
          String literal=record.getValueAsString(l.getName());
          String description=record.getValueAsString(d.getName());
          if (!StringUtils.isEmpty(description)) {
            out.println();
            out.println("\t/**");
            out.println("\t * " + description);
            out.println("\t */");
          }
          out.print("\t");
          out.print(GenerationUtil.convertToJavaIdentifier(literal));
          out.print("(");
          String separator="";
          for (          ColumnDefinition column : columns) {
            out.print(separator);
            out.printNewJavaObject(getJavaType(column.getType()),record.getValue(column.getName()));
            separator=", ";
          }
          out.println("),");
        }
        out.println("\t;");
        out.println();
        for (        ColumnDefinition column : columns) {
          out.print("\tprivate final ");
          out.print(getJavaType(column.getType()));
          out.print(" ");
          out.println(strategy.getJavaMemberName(column) + ";");
        }
        out.println();
        out.print("\tprivate " + strategy.getJavaClassName(table) + "(");
        String separator="";
        for (        ColumnDefinition column : columns) {
          out.print(separator);
          out.print(getJavaType(column.getType()));
          out.print(" ");
          out.print(strategy.getJavaMemberName(column));
          separator=", ";
        }
        out.println(") {");
        for (        ColumnDefinition column : columns) {
          out.print("\t\tthis.");
          out.print(strategy.getJavaMemberName(column));
          out.print(" = ");
          out.print(strategy.getJavaMemberName(column));
          out.println(";");
        }
        out.println("\t}");
        out.println();
        printOverride(out);
        out.print("\tpublic ");
        out.print(getJavaType(pk.getType()));
        out.println(" getPrimaryKey() {");
        out.println("\t\treturn " + strategy.getJavaMemberName(pk) + ";");
        out.println("\t}");
        for (        ColumnDefinition column : columns) {
          printFieldJavaDoc(out,column);
          out.print("\tpublic final ");
          out.print(getJavaType(column.getType()));
          out.print(" ");
          out.print(strategy.getJavaGetterName(column,Mode.DEFAULT));
          out.println("() {");
          out.print("\t\treturn ");
          out.print(strategy.getJavaMemberName(column));
          out.println(";");
          out.println("\t}");
        }
        out.println("}");
        out.close();
      }
 catch (      Exception e) {
        log.error("Exception while generating master data table " + table,e);
      }
    }
    watch.splitInfo("Master data generated");
  }
  if (database.getTables(schema).size() > 0) {
    log.info("Generating tables");
    for (    TableDefinition table : database.getTables(schema)) {
      try {
        log.info("Generating table",strategy.getFileName(table));
        GenerationWriter out=new GenerationWriter(strategy.getFile(table));
        printHeader(out,table);
        printClassJavadoc(out,table);
        Class<?> baseClass;
        if (generateRelations() && table.getMainUniqueKey() != null) {
          baseClass=UpdatableTableImpl.class;
        }
 else {
          baseClass=TableImpl.class;
        }
        out.print("public class ");
        out.print(strategy.getJavaClassName(table));
        out.print(" extends ");
        out.print(baseClass);
        out.print("<");
        out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
        out.print(">");
        printImplements(out,table,Mode.RECORD);
        out.println(" {");
        out.printSerial();
        printSingletonInstance(table,out);
        printRecordTypeMethod(table,out);
        for (        ColumnDefinition column : table.getColumns()) {
          printTableColumn(out,column,table);
        }
        out.println();
        if (generateInstanceFields()) {
          out.print("\tpublic ");
        }
 else {
          printNoFurtherInstancesAllowedJavadoc(out);
          out.print("\tprivate ");
        }
        out.println(strategy.getJavaClassName(table) + "() {");
        if (!schema.isDefaultSchema()) {
          out.println("\t\tsuper(\"" + table.getOutputName() + "\", "+ strategy.getFullJavaIdentifier(schema)+ ");");
        }
 else {
          out.println("\t\tsuper(\"" + table.getOutputName() + "\");");
        }
        out.println("\t}");
        if (generateInstanceFields()) {
          out.println();
          out.print("\tpublic ");
          out.print(strategy.getJavaClassName(table));
          out.print("(");
          out.print(String.class);
          out.println(" alias) {");
          out.print("\t\tsuper(alias, ");
          out.print(strategy.getFullJavaIdentifier(schema));
          out.print(", ");
          out.print(strategy.getFullJavaIdentifier(table));
          out.println(");");
          out.println("\t}");
        }
        if (generateRelations()) {
          ColumnDefinition identity=table.getIdentity();
          if (identity != null) {
            out.println();
            out.println("\t@Override");
            out.print("\tpublic ");
            out.print(Identity.class);
            out.print("<");
            out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
            out.print(", ");
            out.print(getJavaType(table.getIdentity().getType()));
            out.println("> getIdentity() {");
            out.print("\t\treturn ");
            out.print(strategy.getJavaPackageName(schema));
            out.print(".Keys.IDENTITY_");
            out.print(strategy.getJavaIdentifier(identity.getContainer()));
            out.println(";");
            out.println("\t}");
          }
          UniqueKeyDefinition mainKey=table.getMainUniqueKey();
          if (mainKey != null) {
            out.println();
            out.println("\t@Override");
            out.print("\tpublic ");
            out.print(UniqueKey.class);
            out.print("<");
            out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
            out.println("> getMainKey() {");
            out.print("\t\treturn ");
            out.print(strategy.getJavaPackageName(schema));
            out.print(".Keys.");
            out.print(strategy.getJavaIdentifier(mainKey));
            out.println(";");
            out.println("\t}");
          }
          List<UniqueKeyDefinition> uniqueKeys=table.getUniqueKeys();
          if (uniqueKeys.size() > 0) {
            out.println();
            out.println("\t@Override");
            out.println("\t@SuppressWarnings(\"unchecked\")");
            out.print("\tpublic ");
            out.print(List.class);
            out.print("<");
            out.print(UniqueKey.class);
            out.print("<");
            out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
            out.println(">> getKeys() {");
            out.print("\t\treturn ");
            out.print(Arrays.class);
            out.print(".<");
            out.print(UniqueKey.class);
            out.print("<");
            out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
            out.print(">>asList(");
            String separator="";
            for (            UniqueKeyDefinition uniqueKey : uniqueKeys) {
              out.print(separator);
              out.print(strategy.getJavaPackageName(schema));
              out.print(".Keys.");
              out.print(strategy.getJavaIdentifier(uniqueKey));
              separator=", ";
            }
            out.println(");");
            out.println("\t}");
          }
          List<ForeignKeyDefinition> foreignKeys=table.getForeignKeys();
          if (foreignKeys.size() > 0) {
            out.println();
            out.println("\t@Override");
            out.println("\t@SuppressWarnings(\"unchecked\")");
            out.print("\tpublic ");
            out.print(List.class);
            out.print("<");
            out.print(ForeignKey.class);
            out.print("<");
            out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
            out.println(", ?>> getReferences() {");
            out.print("\t\treturn ");
            out.print(Arrays.class);
            out.print(".<");
            out.print(ForeignKey.class);
            out.print("<");
            out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
            out.print(", ?>>asList(");
            String separator="";
            for (            ForeignKeyDefinition foreignKey : foreignKeys) {
              TableDefinition referencedTable=foreignKey.getReferencedTable();
              if (referencedTable instanceof MasterDataTableDefinition) {
                continue;
              }
              out.print(separator);
              out.print(strategy.getJavaPackageName(schema));
              out.print(".Keys.");
              out.print(strategy.getJavaIdentifier(foreignKey));
              separator=", ";
            }
            out.println(");");
            out.println("\t}");
          }
        }
        if (generateInstanceFields()) {
          out.println();
          out.println("\t@Override");
          out.print("\tpublic ");
          out.print(strategy.getFullJavaClassName(table));
          out.print(" as(");
          out.print(String.class);
          out.println(" alias) {");
          out.print("\t\treturn new ");
          out.print(strategy.getFullJavaClassName(table));
          out.println("(alias);");
          out.println("\t}");
        }
        out.printStaticInitialisationStatementsPlaceholder();
        out.println("}");
        out.close();
      }
 catch (      Exception e) {
        log.error("Error while generating table " + table,e);
      }
    }
    registerInSchema(outS,database.getTables(schema),Table.class,true);
    watch.splitInfo("Tables generated");
  }
  if (generatePojos() && database.getTables(schema).size() > 0) {
    log.info("Generating table POJOs");
    for (    TableDefinition table : database.getTables(schema)) {
      try {
        log.info("Generating table POJO",strategy.getFileName(table,Mode.POJO));
        GenerationWriter out=new GenerationWriter(strategy.getFile(table,Mode.POJO));
        printHeader(out,table,Mode.POJO);
        printClassJavadoc(out,table);
        printTableJPAAnnotation(out,table);
        out.print("public class ");
        out.print(strategy.getJavaClassName(table,Mode.POJO));
        printExtends(out,table,Mode.POJO);
        printImplements(out,table,Mode.POJO);
        out.print(" {");
        out.println();
        out.printSerial();
        out.println();
        int maxLength=0;
        for (        ColumnDefinition column : table.getColumns()) {
          maxLength=Math.max(maxLength,getJavaType(column.getType()).length());
        }
        for (        ColumnDefinition column : table.getColumns()) {
          printColumnValidationAnnotation(out,column);
          out.print("\tprivate ");
          out.print(StringUtils.rightPad(getJavaType(column.getType()),maxLength));
          out.print(" ");
          out.print(convertToJavaIdentifier(strategy.getJavaMemberName(column,Mode.POJO)));
          out.println(";");
        }
        for (        ColumnDefinition column : table.getColumns()) {
          out.println();
          printColumnJPAAnnotation(out,column);
          out.print("\tpublic ");
          out.print(getJavaType(column.getType()));
          out.print(" ");
          out.print(strategy.getJavaGetterName(column,Mode.POJO));
          out.println("() {");
          out.print("\t\treturn this.");
          out.print(convertToJavaIdentifier(strategy.getJavaMemberName(column,Mode.POJO)));
          out.println(";");
          out.println("\t}");
          out.println();
          out.print("\tpublic void ");
          out.print(strategy.getJavaSetterName(column,Mode.POJO));
          out.print("(");
          out.print(getJavaType(column.getType()));
          out.print(" ");
          out.print(convertToJavaIdentifier(strategy.getJavaMemberName(column,Mode.POJO)));
          out.println(") {");
          out.print("\t\tthis.");
          out.print(convertToJavaIdentifier(strategy.getJavaMemberName(column,Mode.POJO)));
          out.print(" = ");
          out.print(convertToJavaIdentifier(strategy.getJavaMemberName(column,Mode.POJO)));
          out.println(";");
          out.println("\t}");
        }
        out.println("}");
        out.close();
      }
 catch (      Exception e) {
        log.error("Error while generating table POJO " + table,e);
      }
    }
    watch.splitInfo("Table POJOs generated");
  }
  if (generateDaos() && database.getTables(schema).size() > 0) {
    log.info("Generating DAOs");
    for (    TableDefinition table : database.getTables(schema)) {
      try {
        String tType="Void";
        String pType=strategy.getFullJavaClassName(table,Mode.POJO);
        UniqueKeyDefinition key=table.getMainUniqueKey();
        ColumnDefinition keyColumn=null;
        if (key != null) {
          List<ColumnDefinition> columns=key.getKeyColumns();
          if (columns.size() == 1) {
            keyColumn=columns.get(0);
            tType=getJavaType(keyColumn.getType());
          }
        }
        if (keyColumn == null) {
          log.info("Skipping DAO generation",strategy.getFileName(table,Mode.DAO));
          continue;
        }
 else {
          log.info("Generating DAO",strategy.getFileName(table,Mode.DAO));
        }
        GenerationWriter out=new GenerationWriter(strategy.getFile(table,Mode.DAO));
        printHeader(out,table,Mode.DAO);
        printClassJavadoc(out,table);
        out.print("public class ");
        out.print(strategy.getJavaClassName(table,Mode.DAO));
        out.print(" extends ");
        out.print(DAOImpl.class);
        out.print("<");
        out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
        out.print(", ");
        out.print(pType);
        out.print(", ");
        out.print(tType);
        out.println("> {");
        out.println();
        printJavadoc(out,"Create a new " + strategy.getJavaClassName(table,Mode.DAO) + " without any factory");
        out.print("\tpublic ");
        out.print(strategy.getJavaClassName(table,Mode.DAO));
        out.println("() {");
        out.print("\t\tsuper(");
        out.print(strategy.getFullJavaIdentifier(table));
        out.print(", ");
        out.print(strategy.getFullJavaClassName(table,Mode.POJO));
        out.println(".class);");
        out.println("\t}");
        out.println();
        printJavadoc(out,"Create a new " + strategy.getJavaClassName(table,Mode.DAO) + " with an attached factory");
        out.print("\tpublic ");
        out.print(strategy.getJavaClassName(table,Mode.DAO));
        out.print("(");
        out.print(Factory.class);
        out.println(" factory) {");
        out.print("\t\tsuper(");
        out.print(strategy.getFullJavaIdentifier(table));
        out.print(", ");
        out.print(strategy.getFullJavaClassName(table,Mode.POJO));
        out.println(".class, factory);");
        out.println("\t}");
        out.println();
        printOverride(out);
        out.print("\tprotected ");
        out.print(tType);
        out.print(" getId(");
        out.print(strategy.getFullJavaClassName(table,Mode.POJO));
        out.println(" object) {");
        out.print("\t\treturn object.");
        out.print(strategy.getJavaGetterName(keyColumn,Mode.POJO));
        out.println("();");
        out.println("\t}");
        out.println("}");
        out.close();
      }
 catch (      Exception e) {
        log.error("Error while generating table DAO " + table,e);
      }
    }
    watch.splitInfo("Table DAOs generated");
  }
  if (database.getTables(schema).size() > 0) {
    log.info("Generating table references");
    GenerationWriter out=new GenerationWriter(new File(targetSchemaDir,"Tables.java"));
    printHeader(out,schema);
    printClassJavadoc(out,"Convenience access to all tables in " + schema.getOutputName());
    out.println("public final class Tables {");
    for (    TableDefinition table : database.getTables(schema)) {
      out.println();
      out.println("\t/**");
      if (!StringUtils.isBlank(table.getComment())) {
        out.println("\t * " + table.getComment());
      }
 else {
        out.println("\t * The table " + table.getQualifiedOutputName());
      }
      out.println("\t */");
      out.print("\tpublic static ");
      out.print(strategy.getFullJavaClassName(table));
      out.print(" ");
      out.print(strategy.getJavaIdentifier(table));
      out.print(" = ");
      out.print(strategy.getFullJavaIdentifier(table));
      out.println(";");
    }
    printPrivateConstructor(out,"Tables");
    out.println("}");
    out.close();
    watch.splitInfo("Table references generated");
  }
  if (generateRelations() && database.getTables(schema).size() > 0) {
    log.info("Generating Keys");
    GenerationWriter out=new GenerationWriter(new File(targetSchemaDir,"Keys.java"));
    printHeader(out,schema);
    printClassJavadoc(out,"A class modelling foreign key relationships between tables of the " + schema.getOutputName() + " schema");
    out.suppressWarnings("unchecked");
    out.print("public class Keys extends ");
    out.print(AbstractKeys.class);
    out.println(" {");
    out.println();
    out.println("\t// IDENTITY definitions");
    for (    TableDefinition table : database.getTables(schema)) {
      try {
        ColumnDefinition identity=table.getIdentity();
        if (identity != null) {
          out.print("\tpublic static final ");
          out.print(Identity.class);
          out.print("<");
          out.print(strategy.getFullJavaClassName(identity.getContainer(),Mode.RECORD));
          out.print(", ");
          out.print(getJavaType(identity.getType()));
          out.print("> IDENTITY_");
          out.print(strategy.getJavaIdentifier(identity.getContainer()));
          out.print(" = createIdentity(");
          out.print(strategy.getFullJavaIdentifier(identity.getContainer()));
          out.print(", ");
          out.print(strategy.getFullJavaIdentifier(identity));
          out.println(");");
        }
      }
 catch (      Exception e) {
        log.error("Error while generating table " + table,e);
      }
    }
    out.println();
    out.println("\t// UNIQUE and PRIMARY KEY definitions");
    for (    TableDefinition table : database.getTables(schema)) {
      try {
        List<UniqueKeyDefinition> uniqueKeys=table.getUniqueKeys();
        if (uniqueKeys.size() > 0) {
          for (          UniqueKeyDefinition uniqueKey : uniqueKeys) {
            out.print("\tpublic static final ");
            out.print(UniqueKey.class);
            out.print("<");
            out.print(strategy.getFullJavaClassName(uniqueKey.getTable(),Mode.RECORD));
            out.print("> ");
            out.print(strategy.getJavaIdentifier(uniqueKey));
            out.print(" = createUniqueKey(");
            out.print(strategy.getFullJavaIdentifier(uniqueKey.getTable()));
            out.print(", ");
            String separator="";
            for (            ColumnDefinition column : uniqueKey.getKeyColumns()) {
              out.print(separator);
              out.print(strategy.getFullJavaIdentifier(column));
              separator=", ";
            }
            out.println(");");
          }
        }
      }
 catch (      Exception e) {
        log.error("Error while generating table " + table,e);
      }
    }
    out.println();
    out.println("\t// FOREIGN KEY definitions");
    for (    TableDefinition table : database.getTables(schema)) {
      try {
        List<ForeignKeyDefinition> foreignKeys=table.getForeignKeys();
        if (foreignKeys.size() > 0) {
          for (          ForeignKeyDefinition foreignKey : foreignKeys) {
            if (foreignKey.getReferencedTable() instanceof MasterDataTableDefinition) {
              continue;
            }
            out.print("\tpublic static final ");
            out.print(ForeignKey.class);
            out.print("<");
            out.print(strategy.getFullJavaClassName(foreignKey.getKeyTable(),Mode.RECORD));
            out.print(", ");
            out.print(strategy.getFullJavaClassName(foreignKey.getReferencedTable(),Mode.RECORD));
            out.print("> ");
            out.print(strategy.getJavaIdentifier(foreignKey));
            out.print(" = createForeignKey(");
            if (!foreignKey.getSchema().equals(foreignKey.getReferencedKey().getSchema())) {
              out.print(strategy.getJavaPackageName(foreignKey.getReferencedKey().getSchema()));
              out.print(".Keys.");
            }
            out.print(strategy.getJavaIdentifier(foreignKey.getReferencedKey()));
            out.print(", ");
            out.print(strategy.getFullJavaIdentifier(foreignKey.getKeyTable()));
            out.print(", ");
            String separator="";
            for (            ColumnDefinition column : foreignKey.getKeyColumns()) {
              out.print(separator);
              out.print(strategy.getFullJavaIdentifier(column));
              separator=", ";
            }
            out.println(");");
          }
        }
      }
 catch (      Exception e) {
        log.error("Error while generating reference " + table,e);
      }
    }
    printPrivateConstructor(out,"Keys");
    out.println("}");
    out.close();
    watch.splitInfo("Keys generated");
  }
  if (generateRecords() && database.getTables(schema).size() > 0) {
    log.info("Generating records");
    for (    TableDefinition table : database.getTables(schema)) {
      try {
        log.info("Generating record",strategy.getFileName(table,Mode.RECORD));
        GenerationWriter out=new GenerationWriter(strategy.getFile(table,Mode.RECORD));
        printHeader(out,table,Mode.RECORD);
        printClassJavadoc(out,table);
        printTableJPAAnnotation(out,table);
        Class<?> baseClass;
        if (generateRelations() && table.getMainUniqueKey() != null) {
          baseClass=UpdatableRecordImpl.class;
        }
 else {
          baseClass=TableRecordImpl.class;
        }
        out.print("public class ");
        out.print(strategy.getJavaClassName(table,Mode.RECORD));
        out.print(" extends ");
        out.print(baseClass);
        out.print("<");
        out.print(strategy.getFullJavaClassName(table,Mode.RECORD));
        out.print(">");
        printImplements(out,table,Mode.RECORD);
        out.println(" {");
        out.printSerial();
        for (        ColumnDefinition column : table.getColumns()) {
          printGetterAndSetter(out,column);
        }
        out.println();
        out.println("\t/**");
        out.println("\t * Create a detached " + strategy.getJavaClassName(table,Mode.RECORD));
        out.println("\t */");
        out.println("\tpublic " + strategy.getJavaClassName(table,Mode.RECORD) + "() {");
        out.print("\t\tsuper(");
        out.print(strategy.getFullJavaIdentifier(table));
        out.println(");");
        out.println("\t}");
        out.println("}");
        out.close();
      }
 catch (      Exception e) {
        log.error("Error while generating table record " + table,e);
      }
    }
    watch.splitInfo("Table records generated");
  }
  if (database.getUDTs(schema).size() > 0) {
    log.info("Generating UDTs");
    for (    UDTDefinition udt : database.getUDTs(schema)) {
      try {
        log.info("Generating UDT ",strategy.getFileName(udt));
        GenerationWriter out=new GenerationWriter(strategy.getFile(udt));
        printHeader(out,udt);
        printClassJavadoc(out,udt);
        out.print("public class ");
        out.print(strategy.getJavaClassName(udt));
        out.print(" extends ");
        out.print(UDTImpl.class);
        out.print("<");
        out.print(strategy.getFullJavaClassName(udt,Mode.RECORD));
        out.print(">");
        if (udt.getRoutines().size() > 0) {
          printImplements(out,udt,Mode.DEFAULT,org.jooq.Package.class.getName());
        }
 else {
          printImplements(out,udt,Mode.DEFAULT);
        }
        out.println(" {");
        out.printSerial();
        printSingletonInstance(udt,out);
        printRecordTypeMethod(udt,out);
        for (        AttributeDefinition attribute : udt.getAttributes()) {
          printUDTColumn(out,attribute,udt);
        }
        for (        RoutineDefinition routine : udt.getRoutines()) {
          try {
            if (!routine.isSQLUsable()) {
              printConvenienceMethodProcedure(out,routine,false);
            }
 else {
              printConvenienceMethodFunction(out,routine,false);
              printConvenienceMethodFunctionAsField(out,routine,false);
              printConvenienceMethodFunctionAsField(out,routine,true);
            }
          }
 catch (          Exception e) {
            log.error("Error while generating routine " + routine,e);
          }
        }
        out.println();
        printNoFurtherInstancesAllowedJavadoc(out);
        out.println("\tprivate " + strategy.getJavaClassName(udt) + "() {");
        if (!schema.isDefaultSchema()) {
          out.println("\t\tsuper(\"" + udt.getOutputName() + "\", "+ strategy.getFullJavaIdentifier(schema)+ ");");
        }
 else {
          out.println("\t\tsuper(\"" + udt.getOutputName() + "\");");
        }
        out.println();
        out.println("\t\t// Initialise data type");
        out.println("\t\tgetDataType();");
        out.println("\t}");
        out.println("}");
        out.close();
      }
 catch (      Exception e) {
        log.error("Error while generating udt " + udt,e);
      }
    }
    registerInSchema(outS,database.getUDTs(schema),UDT.class,true);
    watch.splitInfo("UDTs generated");
  }
  if (database.getUDTs(schema).size() > 0) {
    log.info("Generating UDT records");
    for (    UDTDefinition udt : database.getUDTs(schema)) {
      try {
        log.info("Generating UDT record",strategy.getFileName(udt,Mode.RECORD));
        GenerationWriter out=new GenerationWriter(strategy.getFile(udt,Mode.RECORD));
        printHeader(out,udt,Mode.RECORD);
        printClassJavadoc(out,udt);
        out.print("public class ");
        out.print(strategy.getJavaClassName(udt,Mode.RECORD));
        out.print(" extends ");
        out.print(UDTRecordImpl.class);
        out.print("<");
        out.print(strategy.getFullJavaClassName(udt,Mode.RECORD));
        out.print(">");
        printImplements(out,udt,Mode.RECORD);
        out.println(" {");
        out.printSerial();
        out.println();
        for (        AttributeDefinition attribute : udt.getAttributes()) {
          printGetterAndSetter(out,attribute);
        }
        for (        RoutineDefinition routine : udt.getRoutines()) {
          try {
            if (!routine.isSQLUsable()) {
              printConvenienceMethodProcedure(out,routine,true);
            }
 else {
              printConvenienceMethodFunction(out,routine,true);
            }
          }
 catch (          Exception e) {
            log.error("Error while generating routine " + routine,e);
          }
        }
        out.println();
        out.println("\tpublic " + strategy.getJavaClassName(udt,Mode.RECORD) + "() {");
        out.print("\t\tsuper(");
        out.print(strategy.getFullJavaIdentifier(udt));
        out.println(");");
        out.println("\t}");
        out.println("}");
        out.close();
      }
 catch (      Exception e) {
        log.error("Error while generating UDT record " + udt,e);
      }
    }
    watch.splitInfo("UDT records generated");
  }
  if (database.getUDTs(schema).size() > 0) {
    for (    UDTDefinition udt : database.getUDTs(schema)) {
      if (udt.getRoutines().size() > 0) {
        try {
          log.info("Generating member routines");
          for (          RoutineDefinition routine : udt.getRoutines()) {
            try {
              printRoutine(database,schema,routine);
            }
 catch (            Exception e) {
              log.error("Error while generating member routines " + routine,e);
            }
          }
        }
 catch (        Exception e) {
          log.error("Error while generating UDT " + udt,e);
        }
        watch.splitInfo("Member procedures routines");
      }
    }
  }
  if (database.getUDTs(schema).size() > 0) {
    log.info("Generating UDT references");
    GenerationWriter out=new GenerationWriter(new File(targetSchemaDir,"UDTs.java"));
    printHeader(out,schema);
    printClassJavadoc(out,"Convenience access to all UDTs in " + schema.getOutputName());
    out.println("public final class UDTs {");
    for (    UDTDefinition udt : database.getUDTs(schema)) {
      out.println();
      out.println("\t/**");
      out.println("\t * The type " + udt.getQualifiedOutputName());
      out.println("\t */");
      out.print("\tpublic static ");
      out.print(strategy.getFullJavaClassName(udt));
      out.print(" ");
      out.print(strategy.getJavaIdentifier(udt));
      out.print(" = ");
      out.print(strategy.getFullJavaIdentifier(udt));
      out.println(";");
    }
    printPrivateConstructor(out,"UDTs");
    out.println("}");
    out.close();
    watch.splitInfo("UDT references generated");
  }
  if (database.getArrays(schema).size() > 0) {
    log.info("Generating ARRAYs");
    for (    ArrayDefinition array : database.getArrays(schema)) {
      try {
        log.info("Generating ARRAY",strategy.getFileName(array,Mode.RECORD));
        GenerationWriter out=new GenerationWriter(strategy.getFile(array,Mode.RECORD));
        printHeader(out,array,Mode.RECORD);
        printClassJavadoc(out,array);
        out.print("public class ");
        out.print(strategy.getJavaClassName(array,Mode.RECORD));
        out.print(" extends ");
        out.print(ArrayRecordImpl.class);
        out.print("<");
        out.print(getJavaType(array.getElementType()));
        out.print(">");
        printImplements(out,array,Mode.RECORD);
        out.println(" {");
        out.printSerial();
        out.println();
        out.print("\tpublic ");
        out.print(strategy.getJavaClassName(array,Mode.RECORD));
        out.print("(");
        out.print(Configuration.class);
        out.println(" configuration) {");
        out.print("\t\tsuper(");
        out.print(strategy.getFullJavaIdentifier(schema));
        out.print(", \"");
        out.print(array.getOutputName());
        out.print("\", ");
        out.print(getJavaTypeReference(database,array.getElementType()));
        out.println(", configuration);");
        out.println("\t}");
        out.println();
        out.print("\tpublic ");
        out.print(strategy.getJavaClassName(array,Mode.RECORD));
        out.print("(");
        out.print(Configuration.class);
        out.print(" configuration, ");
        out.print(getJavaType(array.getElementType()));
        out.print("... array");
        out.println(") {");
        out.println("\t\tthis(configuration);");
        out.println("\t\tset(array);");
        out.println("\t}");
        out.println();
        out.print("\tpublic ");
        out.print(strategy.getJavaClassName(array,Mode.RECORD));
        out.print("(");
        out.print(Configuration.class);
        out.print(" configuration, ");
        out.print(List.class);
        out.print("<? extends ");
        out.print(getJavaType(array.getElementType()));
        out.print("> list");
        out.println(") {");
        out.println("\t\tthis(configuration);");
        out.println("\t\tsetList(list);");
        out.println("\t}");
        out.println("}");
        out.close();
      }
 catch (      Exception e) {
        log.error("Error while generating ARRAY record " + array,e);
      }
    }
    watch.splitInfo("ARRAYs generated");
  }
  if (database.getEnums(schema).size() > 0) {
    log.info("Generating ENUMs");
    for (    EnumDefinition e : database.getEnums(schema)) {
      try {
        log.info("Generating ENUM",strategy.getFileName(e,Mode.ENUM));
        GenerationWriter out=new GenerationWriter(strategy.getFile(e,Mode.ENUM));
        printHeader(out,e);
        printClassJavadoc(out,e);
        out.print("public enum ");
        out.print(strategy.getJavaClassName(e,Mode.ENUM));
        printImplements(out,e,Mode.ENUM,EnumType.class.getName());
        out.print(" {");
        out.println();
        for (        String literal : e.getLiterals()) {
          out.println("\t" + GenerationUtil.convertToJavaIdentifier(literal) + "(\""+ literal+ "\"),");
          out.println();
        }
        out.println("\t;");
        out.println();
        out.println("\tprivate final java.lang.String literal;");
        out.println();
        out.println("\tprivate " + strategy.getJavaClassName(e,Mode.ENUM) + "(java.lang.String literal) {");
        out.println("\t\tthis.literal = literal;");
        out.println("\t}");
        out.println();
        out.println("\t@Override");
        out.println("\tpublic java.lang.String getName() {");
        if (e.isSynthetic()) {
          out.println("\t\treturn null;");
        }
 else {
          out.println("\t\treturn \"" + e.getName() + "\";");
        }
        out.println("\t}");
        out.println();
        out.println("\t@Override");
        out.println("\tpublic java.lang.String getLiteral() {");
        out.println("\t\treturn literal;");
        out.println("\t}");
        out.println("}");
        out.close();
      }
 catch (      Exception ex) {
        log.error("Error while generating enum " + e,ex);
      }
    }
    watch.splitInfo("Enums generated");
  }
  if (database.getRoutines(schema).size() > 0) {
    log.info("Generating routines");
    GenerationWriter outR=new GenerationWriter(new File(targetSchemaDir,"Routines.java"));
    printHeader(outR,schema);
    printClassJavadoc(outR,"Convenience access to all stored procedures and functions in " + schema.getOutputName());
    outR.println("public final class Routines {");
    for (    RoutineDefinition routine : database.getRoutines(schema)) {
      try {
        printRoutine(database,schema,routine);
        if (!routine.isSQLUsable()) {
          printConvenienceMethodProcedure(outR,routine,false);
        }
 else {
          printConvenienceMethodFunction(outR,routine,false);
          printConvenienceMethodFunctionAsField(outR,routine,false);
          printConvenienceMethodFunctionAsField(outR,routine,true);
        }
      }
 catch (      Exception e) {
        log.error("Error while generating routine " + routine,e);
      }
    }
    printPrivateConstructor(outR,"Routines");
    outR.println("}");
    outR.close();
    watch.splitInfo("Routines generated");
  }
  if (database.getPackages(schema).size() > 0) {
    log.info("Generating packages");
    for (    PackageDefinition pkg : database.getPackages(schema)) {
      try {
        log.info("Generating package",pkg);
        for (        RoutineDefinition routine : pkg.getRoutines()) {
          try {
            printRoutine(database,schema,routine);
          }
 catch (          Exception e) {
            log.error("Error while generating routine " + routine,e);
          }
        }
        GenerationWriter outPkg=new GenerationWriter(strategy.getFile(pkg));
        printHeader(outPkg,pkg);
        printClassJavadoc(outPkg,"Convenience access to all stored procedures and functions in " + pkg.getName());
        outPkg.print("public final class ");
        outPkg.print(strategy.getJavaClassName(pkg));
        outPkg.print(" extends ");
        outPkg.print(PackageImpl.class);
        printImplements(outPkg,pkg,Mode.DEFAULT);
        outPkg.println(" {");
        outPkg.printSerial();
        printSingletonInstance(pkg,outPkg);
        for (        RoutineDefinition routine : pkg.getRoutines()) {
          try {
            if (!routine.isSQLUsable()) {
              printConvenienceMethodProcedure(outPkg,routine,false);
            }
 else {
              printConvenienceMethodFunction(outPkg,routine,false);
              printConvenienceMethodFunctionAsField(outPkg,routine,false);
              printConvenienceMethodFunctionAsField(outPkg,routine,true);
            }
          }
 catch (          Exception e) {
            log.error("Error while generating routine " + routine,e);
          }
        }
        printNoFurtherInstancesAllowedJavadoc(outPkg);
        outPkg.println("\tprivate " + strategy.getJavaClassName(pkg) + "() {");
        outPkg.print("\t\tsuper(\"");
        outPkg.print(pkg.getOutputName());
        outPkg.print("\", ");
        outPkg.print(strategy.getFullJavaIdentifier(schema));
        outPkg.println(");");
        outPkg.println("\t}");
        outPkg.println("}");
        outPkg.close();
      }
 catch (      Exception e) {
        log.error("Error while generating package " + pkg,e);
      }
    }
    watch.splitInfo("Packages generated");
  }
  if (outS != null) {
    outS.println("}");
    outS.close();
  }
  if (outF != null) {
    outF.println("}");
    outF.close();
  }
  watch.splitInfo("GENERATION FINISHED!");
}
