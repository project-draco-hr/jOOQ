{
switch (dialect()) {
case DERBY:
case FIREBIRD:
case H2:
case HSQLDB:
case POSTGRES:
case SQLITE:
    log.info("SKIPPING","Group by CUBE / ROLLUP tests");
  return;
}
SelectOrderByStep<Record2<Integer,Integer>> step=create().select(TBook_ID(),TBook_AUTHOR_ID()).from(TBook()).groupBy(rollup(TBook_ID(),TBook_AUTHOR_ID()));
if (!asList(MARIADB,MYSQL).contains(dialect())) {
step.orderBy(TBook_ID().asc().nullsLast(),TBook_AUTHOR_ID().asc().nullsLast());
}
Result<Record2<Integer,Integer>> result=step.fetch();
assertEquals(Arrays.asList(1,1,2,2,3,3,4,4,null),result.getValues(0));
assertEquals(Arrays.asList(1,null,1,null,2,null,2,null,null),result.getValues(1));
if (asList(MARIADB,MYSQL).contains(dialect())) {
log.info("SKIPPING","CUBE and GROUPING SETS tests");
return;
}
}
