{
  jOOQAbstractTest.reset=false;
  jOOQAbstractTest.connection.setAutoCommit(false);
  Field<Integer> count=count();
  Loader<A> loader=createForEmptyFile();
  assertEquals(0,loader.processed());
  assertEquals(0,loader.errors().size());
  assertEquals(0,loader.stored());
  assertEquals(0,loader.ignored());
  assertEquals(2,(int)create().select(count).from(TAuthor()).fetchOne(count));
  loader=createLoaderAbortingOnConstraintViolationOnLAST_NAME();
  resetLoaderConnection();
  assertEquals(1,loader.processed());
  assertEquals(1,loader.errors().size());
  assertNotNull(loader.errors().get(0));
  assertEquals(0,loader.stored());
  assertEquals(1,loader.ignored());
  assertEquals(2,(int)create().select(count).from(TAuthor()).fetchOne(count));
  loader=createLoaderIgnoringConstraintViolationOnLAST_NAME();
  resetLoaderConnection();
  assertEquals(2,loader.processed());
  assertEquals(2,loader.errors().size());
  assertNotNull(loader.errors().get(0));
  assertNotNull(loader.errors().get(1));
  assertEquals(0,loader.stored());
  assertEquals(2,loader.ignored());
  assertEquals(2,(int)create().select(count).from(TAuthor()).fetchOne(count));
  loader=createLoaderAbortingOnDuplicateRecords();
  resetLoaderConnection();
  assertEquals(1,loader.processed());
  assertEquals(1,loader.errors().size());
  assertNotNull(loader.errors().get(0));
  assertEquals(0,loader.stored());
  assertEquals(1,loader.ignored());
  assertEquals(2,(int)create().select(count).from(TAuthor()).fetchOne(count));
  loader=createLoaderIgnoringDuplicateRecords();
  assertEquals(2,loader.processed());
  assertEquals(0,loader.errors().size());
  assertEquals(2,loader.ignored());
  assertEquals(2,(int)create().select(count).from(TAuthor()).fetchOne(count));
  loader=createLoaderWithDifferentNulls();
  assertEquals(2,loader.processed());
  assertEquals(2,loader.stored());
  assertEquals(0,loader.ignored());
  assertEquals(0,loader.errors().size());
  boolean oracle=false;
  assertEquals(2,(int)create().select(count).from(TAuthor()).where(TAuthor_ID().in(3,4)).and(TAuthor_LAST_NAME().in("Hesse","Frisch")).and(oracle ? TAuthor_FIRST_NAME().isNull() : TAuthor_FIRST_NAME().equal("")).fetchOne(count));
  assertEquals(2,create().delete(TAuthor()).where(TAuthor_ID().in(3,4)).execute());
  loader=createLoaderButDontLoadAllColumns();
  assertEquals(2,loader.processed());
  assertEquals(2,loader.stored());
  assertEquals(0,loader.ignored());
  assertEquals(0,loader.errors().size());
  Result<A> result=create().selectFrom(TAuthor()).where(TAuthor_ID().in(5,6)).and(TAuthor_LAST_NAME().in("Hesse","Frisch")).orderBy(TAuthor_ID()).fetch();
  assertEquals(2,result.size());
  assertEquals(5,(int)result.getValue(0,TAuthor_ID()));
  assertEquals(6,(int)result.getValue(1,TAuthor_ID()));
  assertEquals("Hesse",result.getValue(0,TAuthor_LAST_NAME()));
  assertEquals("Frisch",result.getValue(1,TAuthor_LAST_NAME()));
  assertNull(result.getValue(0,TAuthor_FIRST_NAME()));
  assertEquals(oracle ? null : "",result.getValue(1,TAuthor_FIRST_NAME()));
  assertEquals(2,create().delete(TAuthor()).where(TAuthor_ID().in(5,6)).execute());
switch (dialect()) {
case DERBY:
case FIREBIRD:
case H2:
case POSTGRES:
case SQLITE:
    log.info("SKIPPING","Duplicate record insertion");
  break;
default :
{
  loader=createLoaderUpdatingDuplicateRecords();
  assertEquals(2,loader.processed());
  assertEquals(2,loader.stored());
  assertEquals(0,loader.ignored());
  assertEquals(0,loader.errors().size());
  result=create().selectFrom(TAuthor()).where(TAuthor_LAST_NAME().in("Hesse","Frisch")).orderBy(TAuthor_ID()).fetch();
  assertEquals(2,result.size());
  assertEquals(1,(int)result.getValue(0,TAuthor_ID()));
  assertEquals(7,(int)result.getValue(1,TAuthor_ID()));
  assertEquals("Hesse",result.getValue(0,TAuthor_LAST_NAME()));
  assertEquals("Frisch",result.getValue(1,TAuthor_LAST_NAME()));
  assertEquals("George",result.getValue(0,TAuthor_FIRST_NAME()));
  assertEquals(null,result.getValue(1,TAuthor_FIRST_NAME()));
  assertEquals(1,create().delete(TAuthor()).where(TAuthor_ID().in(7)).execute());
}
}
resetLoaderConnection();
loader=createLoaderWithRollbackOnDuplicateKeys();
assertEquals(2,loader.processed());
assertEquals(0,loader.stored());
assertEquals(1,loader.ignored());
assertEquals(1,loader.errors().size());
assertEquals(1,loader.errors().get(0).rowIndex());
assertEquals(Arrays.asList("1","Max","Frisch"),Arrays.asList(loader.errors().get(0).row()));
result=create().selectFrom(TAuthor()).where(TAuthor_ID().in(8)).orderBy(TAuthor_ID()).fetch();
assertEquals(0,result.size());
loader=createLoaderCommittingAndIgnoringDuplicates();
assertEquals(3,loader.processed());
assertEquals(1,loader.stored());
assertEquals(2,loader.ignored());
assertEquals(0,loader.errors().size());
result=create().selectFrom(TAuthor()).where(TAuthor_ID().in(1,2,8)).orderBy(TAuthor_ID()).fetch();
assertEquals(3,result.size());
assertEquals(8,(int)result.getValue(2,TAuthor_ID()));
assertNull(result.getValue(2,TAuthor_FIRST_NAME()));
assertEquals("Hesse",result.getValue(2,TAuthor_LAST_NAME()));
assertEquals("Coelho",result.getValue(1,TAuthor_LAST_NAME()));
}
