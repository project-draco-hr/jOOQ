{
  for (  org.jooq.util.xml.jaxb.Schema xs : meta.getSchemata()) {
    InformationSchemaCatalog catalog=new InformationSchemaCatalog(xs.getCatalogName());
    if (!catalogs.contains(catalog))     catalogs.add(catalog);
    InformationSchemaSchema is=new InformationSchemaSchema(xs.getSchemaName(),catalog);
    schemas.add(is);
    schemasByName.put(xs.getSchemaName(),is);
  }
  for (  org.jooq.util.xml.jaxb.Table xt : meta.getTables()) {
    InformationSchemaTable it=new InformationSchemaTable(xt.getTableName(),schemasByName.get(xt.getTableSchema()));
    tables.add(it);
    tablesByName.put(xt.getTableName(),it);
  }
  for (  org.jooq.util.xml.jaxb.Sequence xs : meta.getSequences()) {
    String typeName=xs.getDataType();
    int length=xs.getCharacterMaximumLength() == null ? 0 : xs.getCharacterMaximumLength();
    int precision=xs.getNumericPrecision() == null ? 0 : xs.getNumericPrecision();
    int scale=xs.getNumericScale() == null ? 0 : xs.getNumericScale();
    boolean nullable=true;
    @SuppressWarnings({"rawtypes","unchecked"}) InformationSchemaSequence is=new InformationSchemaSequence(xs.getSequenceName(),schemasByName.get(xs.getSequenceSchema()),type(typeName,length,precision,scale,nullable));
    sequences.add(is);
  }
  List<Column> columns=new ArrayList<Column>(meta.getColumns());
  Collections.sort(columns,new Comparator<Column>(){
    @Override public int compare(    Column o1,    Column o2){
      Integer p1=o1.getOrdinalPosition();
      Integer p2=o2.getOrdinalPosition();
      if (p1 == p2)       return 0;
      if (p1 == null)       return -1;
      if (p2 == null)       return 1;
      return p1.compareTo(p2);
    }
  }
);
  for (  Column xc : columns) {
    String typeName=xc.getDataType();
    int length=xc.getCharacterMaximumLength() == null ? 0 : xc.getCharacterMaximumLength();
    int precision=xc.getNumericPrecision() == null ? 0 : xc.getNumericPrecision();
    int scale=xc.getNumericScale() == null ? 0 : xc.getNumericScale();
    boolean nullable=xc.isIsNullable() == null ? true : xc.isIsNullable();
    AbstractTable.createField(xc.getColumnName(),type(typeName,length,precision,scale,nullable),tablesByName.get(xc.getTableName()));
  }
  for (  Schema s : schemas) {
    Catalog c=s.getCatalog();
    List<Schema> list=schemasPerCatalog.get(c);
    if (list == null) {
      list=new ArrayList<Schema>();
      schemasPerCatalog.put(c,list);
    }
    list.add(s);
  }
  for (  Table<?> t : tables) {
    Schema s=t.getSchema();
    List<Table<?>> list=tablesPerSchema.get(s);
    if (list == null) {
      list=new ArrayList<Table<?>>();
      tablesPerSchema.put(s,list);
    }
    list.add(t);
  }
  for (  Sequence<?> q : sequences) {
    Schema s=q.getSchema();
    List<Sequence<?>> list=sequencesPerSchema.get(s);
    if (list == null) {
      list=new ArrayList<Sequence<?>>();
      sequencesPerSchema.put(s,list);
    }
    list.add(q);
  }
}
