{
switch (getDialect()) {
case ASE:
case DERBY:
case H2:
case HSQLDB:
case INGRES:
case MYSQL:
case POSTGRES:
case SQLITE:
    log.info("SKIPPING","Group by CUBE / ROLLUP tests");
  return;
}
Result<Record> result;
result=create().select(TBook_ID(),TBook_AUTHOR_ID(),grouping(TBook_ID()),groupingId(TBook_ID(),TBook_AUTHOR_ID())).from(TBook()).groupBy(cube(TBook_ID(),TBook_AUTHOR_ID())).orderBy(TBook_ID().asc().nullsFirst(),TBook_AUTHOR_ID().asc().nullsFirst()).fetch();
assertEquals(11,result.size());
assertEquals(Arrays.asList(null,null,null,1,1,2,2,3,3,4,4),result.getValues(0));
assertEquals(Arrays.asList(null,1,2,null,1,null,1,null,2,null,2),result.getValues(1));
assertEquals(Arrays.asList(1,1,1,0,0,0,0,0,0,0,0),result.getValues(2));
assertEquals(Arrays.asList(3,2,2,1,0,1,0,1,0,1,0),result.getValues(3));
result=create().select(TBook_ID(),TBook_AUTHOR_ID(),grouping(TBook_ID()),groupingId(TBook_ID(),TBook_AUTHOR_ID())).from(TBook()).groupBy(rollup(TBook_ID(),TBook_AUTHOR_ID())).orderBy(TBook_ID().asc().nullsFirst(),TBook_AUTHOR_ID().asc().nullsFirst()).fetch();
assertEquals(9,result.size());
assertEquals(Arrays.asList(null,1,1,2,2,3,3,4,4),result.getValues(0));
assertEquals(Arrays.asList(null,null,1,null,1,null,2,null,2),result.getValues(1));
assertEquals(Arrays.asList(1,0,0,0,0,0,0,0,0),result.getValues(2));
assertEquals(Arrays.asList(3,1,0,1,0,1,0,1,0),result.getValues(3));
}
