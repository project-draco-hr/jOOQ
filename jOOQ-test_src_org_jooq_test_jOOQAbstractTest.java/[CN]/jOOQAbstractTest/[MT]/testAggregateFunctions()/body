{
  Field<BigDecimal> median=TBook_ID().median();
switch (getDialect()) {
case ASE:
case DERBY:
case H2:
case INGRES:
case MYSQL:
case SQLITE:
case SQLSERVER:
case POSTGRES:
case DB2:
    median=TBook_ID().avg();
  break;
}
Result<Record> result=create().select(TBook_AUTHOR_ID(),create().count(),TBook_ID().count(),TBook_AUTHOR_ID().countDistinct(),TBook_ID().sum(),TBook_ID().avg(),TBook_ID().min(),TBook_ID().max(),median).from(TBook()).groupBy(TBook_AUTHOR_ID()).orderBy(TBook_AUTHOR_ID()).fetch();
assertEquals(2,(int)result.getValueAsInteger(0,1));
assertEquals(2,(int)result.getValueAsInteger(0,2));
assertEquals(1,(int)result.getValueAsInteger(0,3));
assertEquals(3d,result.getValueAsDouble(0,4));
assertEquals(1,(int)result.getValueAsInteger(0,6));
assertEquals(2,(int)result.getValueAsInteger(0,7));
assertEquals(2,(int)result.getValueAsInteger(1,1));
assertEquals(2,(int)result.getValueAsInteger(1,2));
assertEquals(1,(int)result.getValueAsInteger(1,3));
assertEquals(7d,result.getValueAsDouble(1,4));
assertEquals(3,(int)result.getValueAsInteger(1,6));
assertEquals(4,(int)result.getValueAsInteger(1,7));
assertTrue(Arrays.asList(1.0,1.5,2.0).contains(result.getValueAsDouble(0,5)));
assertTrue(Arrays.asList(1.0,1.5,2.0).contains(result.getValueAsDouble(0,8)));
assertTrue(Arrays.asList(3.0,3.5,4.0).contains(result.getValueAsDouble(1,5)));
assertTrue(Arrays.asList(3.0,3.5,4.0).contains(result.getValueAsDouble(1,8)));
switch (getDialect()) {
case DERBY:
case SQLITE:
log.info("SKIPPING","Statistical aggregate functions");
break;
default :
{
result=create().select(TBook_AUTHOR_ID(),TBook_ID().stddevPop(),TBook_ID().stddevSamp(),TBook_ID().varPop(),TBook_ID().varSamp()).from(TBook()).groupBy(TBook_AUTHOR_ID()).orderBy(TBook_AUTHOR_ID()).fetch();
assertEquals(0.5,result.getValueAsDouble(0,1));
assertEquals(0.25,result.getValueAsDouble(0,3));
assertEquals(0.5,result.getValueAsDouble(1,1));
assertEquals(0.25,result.getValueAsDouble(1,3));
if (getDialect() != SQLDialect.DB2) {
assertEquals("0.707",result.getValueAsString(0,2).substring(0,5));
assertEquals(0.5,result.getValueAsDouble(0,4));
assertEquals("0.707",result.getValueAsString(1,2).substring(0,5));
assertEquals(0.5,result.getValueAsDouble(1,4));
}
}
}
result=create().select(TBook_AUTHOR_ID(),TBook_ID().max(),TBook_ID().max()).from(TBook()).groupBy(TBook_AUTHOR_ID()).orderBy(TBook_AUTHOR_ID()).fetch();
assertEquals(2,(int)result.getValueAsInteger(0,1));
assertEquals(2,(int)result.getValueAsInteger(0,2));
assertEquals(4,(int)result.getValueAsInteger(1,1));
assertEquals(4,(int)result.getValueAsInteger(1,2));
}
