{
  if (!supportsReferences()) {
    log.info("SKIPPING","master data test");
    return;
  }
  reset=false;
  B book=create().fetchOne(TBook(),TBook_TITLE().equal("1984"));
  Enum<?> value=(Enum<?>)book.getValue(TBook_LANGUAGE_ID());
  assertEquals(Integer.valueOf(1),((MasterDataType<?>)value).getPrimaryKey());
  assertEquals("en",value.name());
  book.setValue((Field)TBook_LANGUAGE_ID(),Enum.valueOf(value.getClass(),"de"));
  book.store();
  book=create().fetchOne(TBook(),TBook_TITLE().equal("1984"));
  value=(Enum<?>)book.getValue(TBook_LANGUAGE_ID());
  assertEquals(Integer.valueOf(2),((MasterDataType<?>)value).getPrimaryKey());
  assertEquals("de",value.name());
  T658 master=create().fetchOne(T658());
  assertNotNull(master);
  assertEquals("A",invoke(master.getValue(0),"getPrimaryKey").toString().trim());
  assertEquals("A",invoke(master.getValue(0),"getId").toString().trim());
  assertEquals(1,invoke(master.getValue(1),"getPrimaryKey"));
  assertEquals(1,invoke(master.getValue(1),"getId"));
  assertEquals(1L,invoke(master.getValue(2),"getPrimaryKey"));
  assertEquals(1L,invoke(master.getValue(2),"getId"));
  assertEquals("B",invoke(master.getValue(3),"getPrimaryKey").toString().trim());
  assertEquals("B",invoke(master.getValue(3),"getId").toString().trim());
  assertEquals("B",invoke(master.getValue(3),"getCd").toString().trim());
  assertEquals(2,invoke(master.getValue(4),"getPrimaryKey"));
  assertEquals(2,invoke(master.getValue(4),"getId"));
  assertEquals(2,invoke(master.getValue(4),"getCd"));
  assertEquals(2L,invoke(master.getValue(5),"getPrimaryKey"));
  assertEquals(2L,invoke(master.getValue(5),"getId"));
  assertEquals(2L,invoke(master.getValue(5),"getCd"));
}
