{
  assertEquals("abc",create().select(val("abc").trim()).fetchOne(0));
  assertEquals("abc",create().select(val("abc  ").trim()).fetchOne(0));
  assertEquals("abc",create().select(val("  abc").trim()).fetchOne(0));
  assertEquals("abc",create().select(val("  abc  ").trim()).fetchOne(0));
  assertEquals("abc",create().select(val("a").concat("b","c")).fetchOne(0));
  assertEquals("George Orwell",create().select(TAuthor_FIRST_NAME().concat(" ").concat(TAuthor_LAST_NAME())).from(TAuthor()).where(TAuthor_FIRST_NAME().equal("George")).fetchOne(0));
  if (getDialect() != SQLDialect.DERBY) {
    assertEquals("1ab45",create().select(val(1).concat("ab","45")).fetchOne(0));
    assertEquals("1ab45",create().select(val(1).concat(val("ab"),val(45))).fetchOne(0));
  }
 else {
    log.info("SKIPPING","Concatenation with numbers");
  }
  SelectQuery q=create().selectQuery();
  Field<String> constant=val("abc");
switch (getDialect()) {
case DERBY:
    log.info("SKIPPING","replace function test");
  break;
default :
{
  Field<String> x=constant.replace("b","x");
  Field<String> y=constant.replace("b","y");
  Field<String> z=constant.replace("b");
  Record record=create().select(x,y,z).fetchOne();
  assertEquals("axc",record.getValue(x));
  assertEquals("ayc",record.getValue(y));
  assertEquals("ac",record.getValue(z));
}
}
Field<Integer> length=constant.length();
Field<Integer> charLength=constant.charLength();
Field<Integer> bitLength=constant.bitLength();
Field<Integer> octetLength=constant.octetLength();
q.addSelect(length,charLength,bitLength,octetLength);
q.execute();
Record record=q.getResult().get(0);
assertEquals(Integer.valueOf(3),record.getValue(length));
assertEquals(Integer.valueOf(3),record.getValue(charLength));
switch (getDialect()) {
case HSQLDB:
case H2:
assertEquals(Integer.valueOf(48),record.getValue(bitLength));
assertEquals(Integer.valueOf(6),record.getValue(octetLength));
break;
default :
assertEquals(Integer.valueOf(24),record.getValue(bitLength));
assertEquals(Integer.valueOf(3),record.getValue(octetLength));
break;
}
switch (getDialect()) {
case DERBY:
case SQLITE:
log.info("SKIPPING","RPAD and LPAD functions");
break;
default :
{
Record result=create().select(val("aa").rpad(4),val("aa").rpad(4,'-'),val("aa").lpad(4),val("aa").lpad(4,'-')).fetchOne();
assertEquals("aa  ",result.getValue(0));
assertEquals("aa--",result.getValue(1));
assertEquals("  aa",result.getValue(2));
assertEquals("--aa",result.getValue(3));
break;
}
}
Record result=create().select(val("abcde").substring(1),val("abcde").substring(1,2),val("abcde").substring(3),val("abcde").substring(3,2)).fetchOne();
assertEquals("abcde",result.getValue(0));
assertEquals("ab",result.getValue(1));
assertEquals("cde",result.getValue(2));
assertEquals("cd",result.getValue(3));
result=create().select(TAuthor_FIRST_NAME().substring(2),TAuthor_FIRST_NAME().substring(2,2)).from(TAuthor()).where(TAuthor_ID().equal(1)).fetchOne();
assertEquals("eorge",result.getValue(TAuthor_FIRST_NAME().substring(2)));
assertEquals("eo",result.getValue(TAuthor_FIRST_NAME().substring(2,2)));
switch (getDialect()) {
case DERBY:
case SQLITE:
log.info("SKIPPING","REPEAT function");
break;
default :
{
result=create().select(val("a").repeat(1),val("ab").repeat(2),val("abc").repeat(3)).fetchOne();
assertEquals("a",result.getValue(0));
assertEquals("abab",result.getValue(1));
assertEquals("abcabcabc",result.getValue(2));
break;
}
}
}
