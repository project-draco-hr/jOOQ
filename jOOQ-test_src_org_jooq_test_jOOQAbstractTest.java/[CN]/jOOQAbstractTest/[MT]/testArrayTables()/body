{
  if (TArrays_NUMBER_R() != null) {
    Result<Record> result;
    ArrayRecord<Integer> array=newNUMBER_R();
    result=create().select().from(create().table(array)).fetch();
    assertEquals(0,result.size());
    assertEquals(1,result.getFields().size());
    array.set((Integer)null);
    result=create().select().from(create().table(array)).fetch();
    assertEquals(1,result.size());
    assertEquals(1,result.getFields().size());
    assertEquals(null,result.getValue(0,0));
    array.set((Integer)null,1);
    result=create().select().from(create().table(array)).fetch();
    assertEquals(2,result.size());
    assertEquals(1,result.getFields().size());
    assertEquals(null,result.getValue(0,0));
    assertEquals("1","" + result.getValue(1,0));
    array.set((Integer)null,1,2);
    result=create().select().from(create().table(array)).fetch();
    assertEquals(3,result.size());
    assertEquals(1,result.getFields().size());
    assertEquals(null,result.getValue(0,0));
    assertEquals("1","" + result.getValue(1,0));
    assertEquals("2","" + result.getValue(2,0));
    array.set(2,3);
    Table<?> table=create().table(array);
    result=create().select(TBook_ID(),TBook_TITLE()).from(TBook()).join(table).on(table.getField(0).cast(Integer.class).equal(TBook_ID())).fetch();
    assertEquals(2,result.size());
    assertEquals(Integer.valueOf(2),result.getValue(0,TBook_ID()));
    assertEquals(Integer.valueOf(3),result.getValue(1,TBook_ID()));
    assertEquals("Animal Farm",result.getValue(0,TBook_TITLE()));
    assertEquals("O Alquimista",result.getValue(1,TBook_TITLE()));
    result=create().select(TBook_ID(),TBook_TITLE()).from(TBook()).join(table.as("t")).on(table.as("t").getField(0).cast(Integer.class).equal(TBook_ID())).fetch();
    assertEquals(2,result.size());
    assertEquals(Integer.valueOf(2),result.getValue(0,TBook_ID()));
    assertEquals(Integer.valueOf(3),result.getValue(1,TBook_ID()));
    assertEquals("Animal Farm",result.getValue(0,TBook_TITLE()));
    assertEquals("O Alquimista",result.getValue(1,TBook_TITLE()));
    result=create().select().from(create().table(FArrays1Field_R(null))).fetch();
    assertEquals(0,result.size());
    assertEquals(1,result.getFields().size());
    array=newNUMBER_R();
    result=create().select().from(create().table(FArrays1Field_R(val(array)))).fetch();
    assertEquals(0,result.size());
    assertEquals(1,result.getFields().size());
    array.set(null,1);
    result=create().select().from(create().table(FArrays1Field_R(val(array)))).fetch();
    assertEquals(2,result.size());
    assertEquals(1,result.getFields().size());
    assertEquals(null,result.getValue(0,0));
    assertEquals("1","" + result.getValue(1,0));
    array.set(null,1,null,2);
    result=create().select().from(create().table(FArrays1Field_R(val(array)))).fetch();
    assertEquals(4,result.size());
    assertEquals(1,result.getFields().size());
    assertEquals(null,result.getValue(0,0));
    assertEquals("1","" + result.getValue(1,0));
    assertEquals(null,result.getValue(2,0));
    assertEquals("2","" + result.getValue(3,0));
  }
 else   if (TArrays_NUMBER() != null) {
    Result<Record> result;
    Integer[] array=new Integer[0];
    result=create().select().from(create().table(new Integer[0])).fetch();
    assertEquals(0,result.size());
    assertEquals(1,result.getFields().size());
    array=new Integer[]{null};
    result=create().select().from(create().table(array)).fetch();
    assertEquals(1,result.size());
    assertEquals(1,result.getFields().size());
    assertEquals(null,result.getValue(0,0));
    array=new Integer[]{null,1};
    result=create().select().from(create().table(array)).fetch();
    assertEquals(2,result.size());
    assertEquals(1,result.getFields().size());
    assertEquals(null,result.getValue(0,0));
    assertEquals(1,result.getValue(1,0));
    array=new Integer[]{null,1,2};
    result=create().select().from(create().table(array)).fetch();
    assertEquals(3,result.size());
    assertEquals(1,result.getFields().size());
    assertEquals(null,result.getValue(0,0));
    assertEquals(1,result.getValue(1,0));
    assertEquals(2,result.getValue(2,0));
    array=new Integer[]{2,3};
    Table<?> table=create().table(array);
    result=create().select(TBook_ID(),TBook_TITLE()).from(TBook()).join(table).on(table.getField(0).cast(Integer.class).equal(TBook_ID())).fetch();
    assertEquals(2,result.size());
    assertEquals(Integer.valueOf(2),result.getValue(0,TBook_ID()));
    assertEquals(Integer.valueOf(3),result.getValue(1,TBook_ID()));
    assertEquals("Animal Farm",result.getValue(0,TBook_TITLE()));
    assertEquals("O Alquimista",result.getValue(1,TBook_TITLE()));
switch (getDialect()) {
case HSQLDB:
case POSTGRES:
      log.info("SKIPPING","Aliasing of ARRAY TABLE tests");
    break;
default :
  result=create().select(TBook_ID(),TBook_TITLE()).from(TBook()).join(table.as("t")).on(table.as("t").getField(0).cast(Integer.class).equal(TBook_ID())).fetch();
assertEquals(2,result.size());
assertEquals(Integer.valueOf(2),result.getValue(0,TBook_ID()));
assertEquals(Integer.valueOf(3),result.getValue(1,TBook_ID()));
assertEquals("Animal Farm",result.getValue(0,TBook_TITLE()));
assertEquals("O Alquimista",result.getValue(1,TBook_TITLE()));
break;
}
result=create().select().from(create().table(FArrays1Field(null))).fetch();
assertEquals(0,result.size());
assertEquals(1,result.getFields().size());
array=new Integer[0];
result=create().select().from(create().table(FArrays1Field(val(array)))).fetch();
assertEquals(0,result.size());
assertEquals(1,result.getFields().size());
array=new Integer[]{null,1};
result=create().select().from(create().table(FArrays1Field(val(array)))).fetch();
assertEquals(2,result.size());
assertEquals(1,result.getFields().size());
assertEquals(null,result.getValue(0,0));
assertEquals("1","" + result.getValue(1,0));
array=new Integer[]{null,1,null,2};
result=create().select().from(create().table(FArrays1Field(val(array)))).fetch();
assertEquals(4,result.size());
assertEquals(1,result.getFields().size());
assertEquals(null,result.getValue(0,0));
assertEquals("1","" + result.getValue(1,0));
assertEquals(null,result.getValue(2,0));
assertEquals("2","" + result.getValue(3,0));
}
 else {
log.info("SKIPPING","ARRAY TABLE tests");
}
}
