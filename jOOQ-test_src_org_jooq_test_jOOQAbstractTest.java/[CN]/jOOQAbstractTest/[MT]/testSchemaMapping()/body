{
switch (getDialect()) {
case SQLITE:
    log.info("SKIPPING","SchemaMapping tests");
  return;
}
SchemaMapping mapping=new SchemaMapping();
mapping.add(TAuthor(),TAuthor());
mapping.add(TBook(),TBook().getName());
mapping.add(TAuthor().getSchema(),TAuthor().getSchema().getName());
Select<Record> query=create(mapping).select(TBook_TITLE()).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).orderBy(TBook_ID().asc());
Result<Record> result=query.fetch();
assertEquals("1984",result.getValue(0,TBook_TITLE()));
assertEquals("Animal Farm",result.getValue(1,TBook_TITLE()));
assertEquals("O Alquimista",result.getValue(2,TBook_TITLE()));
assertEquals("Brida",result.getValue(3,TBook_TITLE()));
String sql=query.getSQL();
log.info("Executing",sql);
assertEquals(result,create().fetch(sql,query.getBindValues().toArray()));
switch (getDialect()) {
case ASE:
case DB2:
case DERBY:
case H2:
case HSQLDB:
case INGRES:
case ORACLE:
case POSTGRES:
case SQLITE:
case SQLSERVER:
case SYBASE:
log.info("SKIPPING","Schema mapping test");
return;
case MYSQL:
if (getClass() == jOOQMySQLTestSchemaRewrite.class) {
log.info("SKIPPING","Schema mapping test");
return;
}
}
mapping=new SchemaMapping();
mapping.add(TAuthor().getSchema(),TAuthor().getSchema().getName() + "2");
Select<Record> q=create(mapping).select(TBook_TITLE()).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).orderBy(TBook_ID().asc());
assertTrue(create(mapping).render(q).contains(TAuthor().getSchema().getName() + "2"));
assertTrue(q.getSQL().contains(TAuthor().getSchema().getName() + "2"));
assertEquals(create(mapping).render(q),q.getSQL());
result=q.fetch();
assertEquals("1984",result.getValue(0,TBook_TITLE()));
assertEquals("Animal Farm",result.getValue(1,TBook_TITLE()));
assertEquals("O Alquimista",result.getValue(2,TBook_TITLE()));
assertEquals("Brida",result.getValue(3,TBook_TITLE()));
mapping=new SchemaMapping();
mapping.add(TAuthor(),VAuthor());
mapping.add(TBook(),VBook().getName());
mapping.add(TAuthor().getSchema(),TAuthor().getSchema().getName() + "2");
q=create(mapping).select(TBook_TITLE()).from(TAuthor()).join(TBook()).on(TAuthor_ID().equal(TBook_AUTHOR_ID())).orderBy(TBook_ID().asc());
assertTrue(create(mapping).render(q).contains(VAuthor().getName()));
assertTrue(create(mapping).render(q).contains(VBook().getName()));
assertTrue(create(mapping).render(q).contains("test2"));
assertFalse(create(mapping).render(q).contains(TAuthor().getName()));
assertFalse(create(mapping).render(q).contains(TBook().getName()));
result=q.fetch();
assertEquals("1984",result.getValue(0,TBook_TITLE()));
assertEquals("Animal Farm",result.getValue(1,TBook_TITLE()));
assertEquals("O Alquimista",result.getValue(2,TBook_TITLE()));
assertEquals("Brida",result.getValue(3,TBook_TITLE()));
}
