{
  reset=false;
  List<A> select=create().fetch(TAuthor());
  assertEquals(2,select.size());
  select=create().fetch(TAuthor(),TAuthor_FIRST_NAME().equal("Paulo"));
  assertEquals(1,select.size());
  assertEquals("Paulo",select.get(0).getValue(TAuthor_FIRST_NAME()));
  try {
    create().fetchOne(TAuthor());
    fail();
  }
 catch (  Exception expected) {
  }
  A selectOne=create().fetchOne(TAuthor(),TAuthor_FIRST_NAME().equal("Paulo"));
  assertEquals("Paulo",selectOne.getValue(TAuthor_FIRST_NAME()));
  A author=create().newRecord(TAuthor());
  author.setValue(TAuthor_ID(),15);
  author.setValue(TAuthor_LAST_NAME(),"K??stner");
  assertEquals(1,create().executeInsert(TAuthor(),author));
  author.refresh();
  assertEquals(Integer.valueOf(15),author.getValue(TAuthor_ID()));
  assertEquals("K??stner",author.getValue(TAuthor_LAST_NAME()));
  assertEquals(0,create().executeUpdate(TAuthor(),author,TAuthor_ID().equal(15)));
  author.setValue(TAuthor_FIRST_NAME(),"Erich");
  assertEquals(1,create().executeUpdate(TAuthor(),author,TAuthor_ID().equal(15)));
  author=create().fetchOne(TAuthor(),TAuthor_FIRST_NAME().equal("Erich"));
  assertEquals(Integer.valueOf(15),author.getValue(TAuthor_ID()));
  assertEquals("Erich",author.getValue(TAuthor_FIRST_NAME()));
  assertEquals("K??stner",author.getValue(TAuthor_LAST_NAME()));
  create().executeDelete(TAuthor(),TAuthor_LAST_NAME().equal("K??stner"));
  assertEquals(null,create().fetchOne(TAuthor(),TAuthor_FIRST_NAME().equal("Erich")));
}
