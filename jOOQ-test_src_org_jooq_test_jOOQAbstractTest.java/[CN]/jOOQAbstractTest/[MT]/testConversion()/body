{
  assertEquals(null,SQLDataType.TINYINT.convert(null));
  assertEquals(null,SQLDataType.SMALLINT.convert(null));
  assertEquals(null,SQLDataType.INTEGER.convert(null));
  assertEquals(null,SQLDataType.BIGINT.convert(null));
  assertEquals(null,SQLDataType.REAL.convert(null));
  assertEquals(null,SQLDataType.DOUBLE.convert(null));
  assertEquals(null,SQLDataType.DECIMAL_INTEGER.convert(null));
  assertEquals(null,SQLDataType.NUMERIC.convert(null));
  assertEquals(null,SQLDataType.BOOLEAN.convert(null));
  assertEquals(null,SQLDataType.VARCHAR.convert(null));
  assertEquals(null,SQLDataType.DATE.convert(null));
  assertEquals(null,SQLDataType.TIME.convert(null));
  assertEquals(null,SQLDataType.TIMESTAMP.convert(null));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert('1'));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert('1'));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert('1'));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert('1'));
  assertEquals(Float.valueOf("1"),SQLDataType.REAL.convert('1'));
  assertEquals(Double.valueOf("1"),SQLDataType.DOUBLE.convert('1'));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert('1'));
  assertEquals(new BigDecimal("1"),SQLDataType.NUMERIC.convert('1'));
  assertEquals(Boolean.TRUE,SQLDataType.BOOLEAN.convert('1'));
  assertEquals("1",SQLDataType.VARCHAR.convert('1'));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert("1"));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert("1"));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert("1"));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert("1"));
  assertEquals(Float.valueOf("1"),SQLDataType.REAL.convert("1"));
  assertEquals(Double.valueOf("1"),SQLDataType.DOUBLE.convert("1"));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert("1"));
  assertEquals(new BigDecimal("1"),SQLDataType.NUMERIC.convert("1"));
  assertEquals(Boolean.TRUE,SQLDataType.BOOLEAN.convert("1"));
  assertEquals("1",SQLDataType.VARCHAR.convert("1"));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert("  1"));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert("  1"));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert("  1"));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert("  1"));
  assertEquals(Float.valueOf("1"),SQLDataType.REAL.convert("  1"));
  assertEquals(Double.valueOf("1"),SQLDataType.DOUBLE.convert("  1"));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert("  1"));
  assertEquals(new BigDecimal("1"),SQLDataType.NUMERIC.convert("  1"));
  assertEquals(Boolean.TRUE,SQLDataType.BOOLEAN.convert("  1"));
  assertEquals("  1",SQLDataType.VARCHAR.convert("  1"));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert((byte)1));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert((byte)1));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert((byte)1));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert((byte)1));
  assertEquals(Float.valueOf("1"),SQLDataType.REAL.convert((byte)1));
  assertEquals(Double.valueOf("1"),SQLDataType.DOUBLE.convert((byte)1));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert((byte)1));
  assertEquals(new BigDecimal("1"),SQLDataType.NUMERIC.convert((byte)1));
  assertEquals(Boolean.TRUE,SQLDataType.BOOLEAN.convert((byte)1));
  assertEquals("1",SQLDataType.VARCHAR.convert((byte)1));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert((short)1));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert((short)1));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert((short)1));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert((short)1));
  assertEquals(Float.valueOf("1"),SQLDataType.REAL.convert((short)1));
  assertEquals(Double.valueOf("1"),SQLDataType.DOUBLE.convert((short)1));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert((short)1));
  assertEquals(new BigDecimal("1"),SQLDataType.NUMERIC.convert((short)1));
  assertEquals(Boolean.TRUE,SQLDataType.BOOLEAN.convert((short)1));
  assertEquals("1",SQLDataType.VARCHAR.convert((short)1));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert(1));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert(1));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert(1));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert(1));
  assertEquals(Float.valueOf("1"),SQLDataType.REAL.convert(1));
  assertEquals(Double.valueOf("1"),SQLDataType.DOUBLE.convert(1));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert(1));
  assertEquals(new BigDecimal("1"),SQLDataType.NUMERIC.convert(1));
  assertEquals(Boolean.TRUE,SQLDataType.BOOLEAN.convert(1));
  assertEquals("1",SQLDataType.VARCHAR.convert(1));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert((long)1));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert((long)1));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert((long)1));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert((long)1));
  assertEquals(Float.valueOf("1"),SQLDataType.REAL.convert((long)1));
  assertEquals(Double.valueOf("1"),SQLDataType.DOUBLE.convert((long)1));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert((long)1));
  assertEquals(new BigDecimal("1"),SQLDataType.NUMERIC.convert((long)1));
  assertEquals(Boolean.TRUE,SQLDataType.BOOLEAN.convert((long)1));
  assertEquals("1",SQLDataType.VARCHAR.convert((long)1));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert(1.1f));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert(1.1f));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert(1.1f));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert(1.1f));
  assertEquals(Float.valueOf("1.1"),SQLDataType.REAL.convert(1.1f));
  assertEquals(Double.valueOf("1.1"),SQLDataType.DOUBLE.convert(1.1f));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert(1.1f));
  assertEquals(new BigDecimal("1.1"),SQLDataType.NUMERIC.convert(1.1f));
  assertEquals(null,SQLDataType.BOOLEAN.convert(1.1f));
  assertEquals("1.1",SQLDataType.VARCHAR.convert(1.1f));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert(1.1));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert(1.1));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert(1.1));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert(1.1));
  assertEquals(Float.valueOf("1.1"),SQLDataType.REAL.convert(1.1));
  assertEquals(Double.valueOf("1.1"),SQLDataType.DOUBLE.convert(1.1));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert(1.1));
  assertEquals(new BigDecimal("1.1"),SQLDataType.NUMERIC.convert(1.1));
  assertEquals(null,SQLDataType.BOOLEAN.convert(1.1));
  assertEquals("1.1",SQLDataType.VARCHAR.convert(1.1));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert(new BigInteger("1")));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert(new BigInteger("1")));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert(new BigInteger("1")));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert(new BigInteger("1")));
  assertEquals(Float.valueOf("1"),SQLDataType.REAL.convert(new BigInteger("1")));
  assertEquals(Double.valueOf("1"),SQLDataType.DOUBLE.convert(new BigInteger("1")));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert(new BigInteger("1")));
  assertEquals(new BigDecimal("1"),SQLDataType.NUMERIC.convert(new BigInteger("1")));
  assertEquals(Boolean.TRUE,SQLDataType.BOOLEAN.convert(new BigInteger("1")));
  assertEquals("1",SQLDataType.VARCHAR.convert(new BigInteger("1")));
  assertEquals(Byte.valueOf("1"),SQLDataType.TINYINT.convert(new BigDecimal("1.1")));
  assertEquals(Short.valueOf("1"),SQLDataType.SMALLINT.convert(new BigDecimal("1.1")));
  assertEquals(Integer.valueOf("1"),SQLDataType.INTEGER.convert(new BigDecimal("1.1")));
  assertEquals(Long.valueOf("1"),SQLDataType.BIGINT.convert(new BigDecimal("1.1")));
  assertEquals(Float.valueOf("1.1"),SQLDataType.REAL.convert(new BigDecimal("1.1")));
  assertEquals(Double.valueOf("1.1"),SQLDataType.DOUBLE.convert(new BigDecimal("1.1")));
  assertEquals(new BigInteger("1"),SQLDataType.DECIMAL_INTEGER.convert(new BigDecimal("1.1")));
  assertEquals(new BigDecimal("1.1"),SQLDataType.NUMERIC.convert(new BigDecimal("1.1")));
  assertEquals(null,SQLDataType.BOOLEAN.convert(new BigDecimal("1.1")));
  assertEquals("1.1",SQLDataType.VARCHAR.convert(new BigDecimal("1.1")));
  assertEquals(new Date(1),SQLDataType.DATE.convert(new Date(1)));
  assertEquals(new Time(1),SQLDataType.TIME.convert(new Date(1)));
  assertEquals(new Timestamp(1),SQLDataType.TIMESTAMP.convert(new Date(1)));
  assertEquals(new Date(1),SQLDataType.DATE.convert(new Time(1)));
  assertEquals(new Time(1),SQLDataType.TIME.convert(new Time(1)));
  assertEquals(new Timestamp(1),SQLDataType.TIMESTAMP.convert(new Time(1)));
  assertEquals(new Date(1),SQLDataType.DATE.convert(new Timestamp(1)));
  assertEquals(new Time(1),SQLDataType.TIME.convert(new Timestamp(1)));
  assertEquals(new Timestamp(1),SQLDataType.TIMESTAMP.convert(new Timestamp(1)));
  assertEquals(new Date(1),SQLDataType.DATE.convert(1L));
  assertEquals(new Time(1),SQLDataType.TIME.convert(1L));
  assertEquals(new Timestamp(1),SQLDataType.TIMESTAMP.convert(1L));
  A author1=create().newRecord(TAuthor());
  assertEquals(Byte.valueOf("0"),author1.getValue(TAuthor_ID(),byte.class));
  assertEquals(Short.valueOf("0"),author1.getValue(TAuthor_ID(),short.class));
  assertEquals(Integer.valueOf("0"),author1.getValue(TAuthor_ID(),int.class));
  assertEquals(Long.valueOf("0"),author1.getValue(TAuthor_ID(),long.class));
  assertEquals(Float.valueOf("0"),author1.getValue(TAuthor_ID(),float.class));
  assertEquals(Double.valueOf("0"),author1.getValue(TAuthor_ID(),double.class));
  assertEquals(Boolean.FALSE,author1.getValue(TAuthor_ID(),boolean.class));
  assertEquals(Character.valueOf((char)0),author1.getValue(TAuthor_ID(),char.class));
  author1.setValue(TAuthor_ID(),1);
  assertEquals(Byte.valueOf("1"),author1.getValue(TAuthor_ID(),byte.class));
  assertEquals(Short.valueOf("1"),author1.getValue(TAuthor_ID(),short.class));
  assertEquals(Integer.valueOf("1"),author1.getValue(TAuthor_ID(),int.class));
  assertEquals(Long.valueOf("1"),author1.getValue(TAuthor_ID(),long.class));
  assertEquals(Float.valueOf("1"),author1.getValue(TAuthor_ID(),float.class));
  assertEquals(Double.valueOf("1"),author1.getValue(TAuthor_ID(),double.class));
  assertEquals(Boolean.TRUE,author1.getValue(TAuthor_ID(),boolean.class));
  assertEquals(Character.valueOf('1'),author1.getValue(TAuthor_ID(),char.class));
  A author2=create().newRecord(TAuthor());
  author2.setValue(TAuthor_DATE_OF_BIRTH(),new Date(1));
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(1);
  assertEquals(new Date(1),author2.getValue(TAuthor_DATE_OF_BIRTH(),Date.class));
  assertEquals(new Time(1),author2.getValue(TAuthor_DATE_OF_BIRTH(),Time.class));
  assertEquals(new Timestamp(1),author2.getValue(TAuthor_DATE_OF_BIRTH(),Timestamp.class));
  assertEquals(new java.util.Date(1),author2.getValue(TAuthor_DATE_OF_BIRTH(),java.util.Date.class));
  assertEquals(calendar,author2.getValue(TAuthor_DATE_OF_BIRTH(),Calendar.class));
  assertEquals(Long.valueOf(1),author2.getValue(TAuthor_DATE_OF_BIRTH(),Long.class));
  assertEquals(Long.valueOf(1),author2.getValue(TAuthor_DATE_OF_BIRTH(),long.class));
  author2.setValue(TAuthor_ID(),1);
  author2.setValue(TAuthor_LAST_NAME(),"a");
  assertEquals(Character.valueOf('1'),author2.getValue(TAuthor_ID(),Character.class));
  assertEquals(Character.valueOf('1'),author2.getValue(TAuthor_ID(),char.class));
  assertEquals(Character.valueOf('a'),author2.getValue(TAuthor_LAST_NAME(),Character.class));
  assertEquals(Character.valueOf('a'),author2.getValue(TAuthor_LAST_NAME(),char.class));
  assertEquals(null,author2.getValue(TAuthor_FIRST_NAME(),Character.class));
  assertEquals(Character.valueOf((char)0),author2.getValue(TAuthor_FIRST_NAME(),char.class));
  author2.setValue(TAuthor_ID(),12);
  author2.setValue(TAuthor_LAST_NAME(),"ab");
  try {
    author2.getValue(TAuthor_ID(),Character.class);
    fail();
  }
 catch (  DataTypeException expected) {
  }
  try {
    author2.getValue(TAuthor_ID(),char.class);
    fail();
  }
 catch (  DataTypeException expected) {
  }
  try {
    author2.getValue(TAuthor_LAST_NAME(),Character.class);
    fail();
  }
 catch (  DataTypeException expected) {
  }
  try {
    author2.getValue(TAuthor_LAST_NAME(),char.class);
    fail();
  }
 catch (  DataTypeException expected) {
  }
}
