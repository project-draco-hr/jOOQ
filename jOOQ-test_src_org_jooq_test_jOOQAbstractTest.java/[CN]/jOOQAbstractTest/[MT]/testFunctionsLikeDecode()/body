{
  Field<String> sNull=create().castNull(String.class);
  Field<Integer> iNull=create().castNull(Integer.class);
  assertEquals("1",create().select(val("1").nullif("2")).fetchOne(0));
  assertEquals(null,create().select(val("1").nullif("1")).fetchOne(0));
  assertEquals("1","" + create().select(val(1).nullif(2)).fetchOne(0));
  assertEquals(null,create().select(val(1).nullif(1)).fetchOne(0));
  assertEquals(null,create().select(sNull.nvl(sNull)).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.nvl(1)).fetchOne(0));
  assertEquals("1",create().select(sNull.nvl("1")).fetchOne(0));
  assertEquals(Integer.valueOf(2),create().select(val(2).nvl(1)).fetchOne(0));
  assertEquals("2",create().select(val("2").nvl("1")).fetchOne(0));
  assertTrue(("" + create().select(TBook_CONTENT_TEXT().nvl("abc")).from(TBook()).where(TBook_ID().equal(1)).fetchOne(0)).startsWith("To know and"));
  assertEquals("abc",create().select(TBook_CONTENT_TEXT().nvl("abc")).from(TBook()).where(TBook_ID().equal(2)).fetchOne(0));
  assertEquals(null,create().select(sNull.nvl2(sNull,sNull)).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.nvl2(2,1)).fetchOne(0));
  assertEquals("1",create().select(sNull.nvl2("2","1")).fetchOne(0));
  assertEquals(Integer.valueOf(2),create().select(val(2).nvl2(2,1)).fetchOne(0));
  assertEquals("2",create().select(val("2").nvl2("2","1")).fetchOne(0));
  assertEquals("abc",create().select(TBook_CONTENT_TEXT().nvl2("abc","xyz")).from(TBook()).where(TBook_ID().equal(1)).fetchOne(0));
  assertEquals("xyz",create().select(TBook_CONTENT_TEXT().nvl2("abc","xyz")).from(TBook()).where(TBook_ID().equal(2)).fetchOne(0));
  assertEquals(null,create().select(sNull.coalesce(sNull)).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.coalesce(1)).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.coalesce(iNull,val(1))).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.coalesce(iNull,iNull,val(1))).fetchOne(0));
  assertEquals("1",create().select(sNull.coalesce("1")).fetchOne(0));
  assertEquals("1",create().select(sNull.coalesce(sNull,val("1"))).fetchOne(0));
  assertEquals("1",create().select(sNull.coalesce(sNull,sNull,val("1"))).fetchOne(0));
  assertEquals(Integer.valueOf(2),create().select(val(2).coalesce(1)).fetchOne(0));
  assertEquals(Integer.valueOf(2),create().select(val(2).coalesce(1,1)).fetchOne(0));
  assertEquals(Integer.valueOf(2),create().select(val(2).coalesce(1,1,1)).fetchOne(0));
  assertEquals("2",create().select(val("2").coalesce("1")).fetchOne(0));
  assertEquals("2",create().select(val("2").coalesce("1","1")).fetchOne(0));
  assertEquals("2",create().select(val("2").coalesce("1","1","1")).fetchOne(0));
  assertTrue(("" + create().select(TBook_CONTENT_TEXT().cast(String.class).coalesce(sNull,val("abc"))).from(TBook()).where(TBook_ID().equal(1)).fetchOne(0)).startsWith("To know and"));
  assertEquals("abc",create().select(TBook_CONTENT_TEXT().cast(String.class).coalesce(sNull,val("abc"))).from(TBook()).where(TBook_ID().equal(2)).fetchOne(0));
  assertEquals(null,create().select(sNull.decode(sNull,sNull)).fetchOne(0));
  assertEquals(null,create().select(iNull.decode(2,1)).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.decode(2,1,1)).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.decode(iNull,val(1))).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.decode(iNull,val(1),val(2))).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.decode(val(2),val(2),iNull,val(1))).fetchOne(0));
  assertEquals(Integer.valueOf(1),create().select(iNull.decode(val(2),val(2),iNull,val(1),val(3))).fetchOne(0));
  assertEquals(null,create().select(sNull.decode("2","1")).fetchOne(0));
  assertEquals("1",create().select(sNull.decode("2","1","1")).fetchOne(0));
  assertEquals("1",create().select(sNull.decode(sNull,val("1"))).fetchOne(0));
  assertEquals("1",create().select(sNull.decode(sNull,val("1"),val("2"))).fetchOne(0));
  assertEquals("1",create().select(sNull.decode(val("2"),val("2"),sNull,val("1"))).fetchOne(0));
  assertEquals("1",create().select(sNull.decode(val("2"),val("2"),sNull,val("1"),val("3"))).fetchOne(0));
  Field<Integer> lang=TBook_LANGUAGE_ID().cast(Integer.class);
  Result<Record> result=create().select(lang.decode(1,"EN"),lang.decode(1,"EN","Other"),lang.decode(1,"EN",2,"DE"),lang.decode(1,"EN",2,"DE","Other")).from(TBook()).orderBy(TBook_ID()).fetch();
  assertEquals("EN",result.getValue(0,0));
  assertEquals("EN",result.getValue(1,0));
  assertEquals(null,result.getValue(2,0));
  assertEquals(null,result.getValue(3,0));
  assertEquals("EN",result.getValue(0,1));
  assertEquals("EN",result.getValue(1,1));
  assertEquals("Other",result.getValue(2,1));
  assertEquals("Other",result.getValue(3,1));
  assertEquals("EN",result.getValue(0,2));
  assertEquals("EN",result.getValue(1,2));
  assertEquals(null,result.getValue(2,2));
  assertEquals("DE",result.getValue(3,2));
  assertEquals("EN",result.getValue(0,3));
  assertEquals("EN",result.getValue(1,3));
  assertEquals("Other",result.getValue(2,3));
  assertEquals("DE",result.getValue(3,3));
}
