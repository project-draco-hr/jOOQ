{
  if (TTriggers() == null) {
    log.info("SKIPPING","INSERT RETURNING tests");
    return;
  }
  InsertQuery<T> query;
  int ID=0;
  query=create().insertQuery(TTriggers());
  query.addValue(TTriggers_COUNTER(),0);
  assertEquals(1,query.execute());
  assertNull(query.getReturned());
  assertEquals(1,create().selectFrom(TTriggers()).fetch().size());
  assertEquals(++ID,(int)create().selectFrom(TTriggers()).fetchOne(TTriggers_ID()));
  assertEquals(2 * ID,(int)create().selectFrom(TTriggers()).fetchOne(TTriggers_COUNTER()));
  query=create().insertQuery(TTriggers());
  query.addValue(TTriggers_COUNTER(),0);
  query.setReturning();
  assertEquals(1,query.execute());
  assertNotNull(query.getReturned());
  assertEquals(++ID,(int)query.getReturned().getValue(TTriggers_ID()));
  assertEquals(2 * ID,(int)query.getReturned().getValue(TTriggers_COUNTER()));
  query=create().insertQuery(TTriggers());
  query.addValue(TTriggers_COUNTER(),0);
  query.setReturning(TTriggers_ID());
  assertEquals(1,query.execute());
  assertNotNull(query.getReturned());
  assertEquals(++ID,(int)query.getReturned().getValue(TTriggers_ID()));
  assertNull(query.getReturned().getValue(TTriggers_COUNTER()));
  query.getReturned().refresh();
  assertEquals(2 * ID,(int)query.getReturned().getValue(TTriggers_COUNTER()));
  TableRecord<T> returned=(TableRecord<T>)create().insertInto(TTriggers(),TTriggers_COUNTER()).values(0).returning().fetchOne();
  assertNotNull(returned);
  assertEquals(++ID,(int)returned.getValue(TTriggers_ID()));
  assertEquals(2 * ID,(int)returned.getValue(TTriggers_COUNTER()));
  returned=(TableRecord<T>)create().insertInto(TTriggers(),TTriggers_COUNTER()).values(0).returning(TTriggers_ID()).fetchOne();
  assertNotNull(returned);
  assertEquals(++ID,(int)returned.getValue(TTriggers_ID()));
  assertNull(returned.getValue(TTriggers_COUNTER()));
  returned.refreshUsing(TTriggers_ID());
  assertEquals(2 * ID,(int)returned.getValue(TTriggers_COUNTER()));
  T triggered=create().newRecord(TTriggers());
  triggered.setValue(TTriggers_COUNTER(),0);
  assertEquals(1,triggered.store());
  assertEquals(++ID,(int)triggered.getValue(TTriggers_ID()));
  assertEquals(0,(int)triggered.getValue(TTriggers_COUNTER()));
  triggered.refresh();
  assertEquals(2 * ID,(int)triggered.getValue(TTriggers_COUNTER()));
}
