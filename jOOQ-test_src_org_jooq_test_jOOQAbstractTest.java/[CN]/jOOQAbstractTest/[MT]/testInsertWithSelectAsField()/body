{
  reset=false;
  Field<Integer> ID3;
  Field<Integer> ID4;
switch (getDialect()) {
case MYSQL:
    ID3=create().select(val(3)).asField();
  ID4=create().select(val(4)).asField();
break;
default :
ID3=create().select(TAuthor_ID().max().add(1)).from(TAuthor()).asField();
ID4=create().select(TAuthor_ID().max().add(1)).from(TAuthor()).asField();
break;
}
create().insertInto(TAuthor(),TAuthor_ID(),TAuthor_LAST_NAME()).values(ID3,create().select(val("Hornby")).asField()).execute();
A author=create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Hornby"));
assertEquals(Integer.valueOf(3),author.getValue(TAuthor_ID()));
assertEquals("Hornby",author.getValue(TAuthor_LAST_NAME()));
create().update(TAuthor()).set(TAuthor_ID(),ID4).set(TAuthor_LAST_NAME(),create().select(val("Hitchcock")).<String>asField()).where(TAuthor_ID().equal(3)).execute();
author=create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Hitchcock"));
assertEquals(Integer.valueOf(4),author.getValue(TAuthor_ID()));
assertEquals("Hitchcock",author.getValue(TAuthor_LAST_NAME()));
}
