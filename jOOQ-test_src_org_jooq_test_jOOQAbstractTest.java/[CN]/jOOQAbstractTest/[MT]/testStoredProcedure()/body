{
  if (cProcedures() == null) {
    log.info("SKIPPING","procedure test");
    return;
  }
  reset=false;
  if (supportsOUTParameters()) {
    assertEquals("0","" + invoke(cProcedures(),"pAuthorExists",create(),null,DUMMY_OUT_INT));
    assertEquals("1","" + invoke(cProcedures(),"pAuthorExists",create(),"Paulo",DUMMY_OUT_INT));
    assertEquals("0","" + invoke(cProcedures(),"pAuthorExists",create(),"Shakespeare",DUMMY_OUT_INT));
  }
 else {
    log.info("SKIPPING","procedure test for OUT parameters");
  }
  assertEquals(null,create().fetchOne(TAuthor(),TAuthor_FIRST_NAME().equal("William")));
  invoke(cProcedures(),"pCreateAuthor",create());
  assertEquals("Shakespeare",create().fetchOne(TAuthor(),TAuthor_FIRST_NAME().equal("William")).getValue(TAuthor_LAST_NAME()));
  assertEquals(null,create().fetchOne(TAuthor(),TAuthor_FIRST_NAME().equal("Hermann")));
  invoke(cProcedures(),"pCreateAuthorByName",create(),"Hermann","Hesse");
  assertEquals("Hesse",create().fetchOne(TAuthor(),TAuthor_FIRST_NAME().equal("Hermann")).getValue(TAuthor_LAST_NAME()));
  assertEquals(null,create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Kaestner")));
  invoke(cProcedures(),"pCreateAuthorByName",create(),null,"Kaestner");
  assertEquals("Kaestner",create().fetchOne(TAuthor(),TAuthor_LAST_NAME().equal("Kaestner")).getValue(TAuthor_LAST_NAME()));
  if (supportsOUTParameters()) {
    if (getDialect() != SQLDialect.MYSQL) {
      Object p391a=invoke(cProcedures(),"p391",create(),null,null,DUMMY_OUT_INT,DUMMY_OUT_INT,null,null);
      assertEquals(null,invoke(p391a,"getIo1"));
      assertEquals(null,invoke(p391a,"getO1"));
      assertEquals(null,invoke(p391a,"getIo2"));
      assertEquals(null,invoke(p391a,"getO2"));
    }
    if (getDialect() != SQLDialect.SYBASE) {
      Object p391b=invoke(cProcedures(),"p391",create(),null,2,DUMMY_OUT_INT,DUMMY_OUT_INT,3,null);
      assertEquals(null,invoke(p391b,"getIo1"));
      assertEquals("2","" + invoke(p391b,"getO1"));
      assertEquals(null,invoke(p391b,"getIo2"));
      assertEquals("3","" + invoke(p391b,"getO2"));
      Object p391c=invoke(cProcedures(),"p391",create(),1,2,DUMMY_OUT_INT,DUMMY_OUT_INT,3,4);
      assertEquals("1","" + invoke(p391c,"getIo1"));
      assertEquals("2","" + invoke(p391c,"getO1"));
      assertEquals("4","" + invoke(p391c,"getIo2"));
      assertEquals("3","" + invoke(p391c,"getO2"));
    }
  }
switch (getDialect()) {
case ORACLE:
    Object result1a=invoke(cProcedures(),"f378",create(),null,null);
  assertEquals(null,invoke(result1a,"getIo"));
assertEquals(null,invoke(result1a,"getO"));
assertEquals(null,invoke(result1a,"getReturnValue"));
Object result2a=invoke(cProcedures(),"f378",create(),null,2);
assertEquals(null,invoke(result2a,"getIo"));
assertEquals("2","" + invoke(result2a,"getO"));
assertEquals(null,invoke(result2a,"getReturnValue"));
Object result3a=invoke(cProcedures(),"f378",create(),1,2);
assertEquals("1","" + invoke(result3a,"getIo"));
assertEquals("2","" + invoke(result3a,"getO"));
assertEquals("3","" + invoke(result3a,"getReturnValue"));
Object result1b=invoke(cLibrary(),"pkgF378",create(),null,null);
assertEquals(null,invoke(result1b,"getIo"));
assertEquals(null,invoke(result1b,"getO"));
assertEquals(null,invoke(result1b,"getReturnValue"));
Object result2b=invoke(cLibrary(),"pkgF378",create(),null,2);
assertEquals(null,invoke(result2b,"getIo"));
assertEquals("2","" + invoke(result2b,"getO"));
assertEquals(null,invoke(result2b,"getReturnValue"));
Object result3b=invoke(cLibrary(),"pkgF378",create(),1,2);
assertEquals("1","" + invoke(result3b,"getIo"));
assertEquals("2","" + invoke(result3b,"getO"));
assertEquals("3","" + invoke(result3b,"getReturnValue"));
break;
}
}
