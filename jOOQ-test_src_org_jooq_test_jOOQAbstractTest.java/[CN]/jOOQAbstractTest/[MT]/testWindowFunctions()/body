{
switch (getDialect()) {
case ASE:
case DERBY:
case H2:
case HSQLDB:
case INGRES:
case MYSQL:
case SQLITE:
    log.info("SKIPPING","Window function tests");
  return;
}
int column=0;
Result<Record> result=create().select(TBook_ID(),rowNumberOver().partitionByOne().orderBy(TBook_ID().desc()),rowNumberOver().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(3),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(1),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column=0;
result=create().select(TBook_ID(),countOver(),countOver().partitionBy(TBook_AUTHOR_ID())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(4),result.getValue(1,column));
assertEquals(Integer.valueOf(4),result.getValue(2,column));
assertEquals(Integer.valueOf(4),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(2),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(2),result.getValue(3,column));
column=0;
result=create().select(TBook_ID(),rankOver().orderBy(TBook_ID().desc()),rankOver().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc()),denseRankOver().orderBy(TBook_ID().desc()),denseRankOver().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(3),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(1),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(3),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(1),result.getValue(1,column));
assertEquals(Integer.valueOf(2),result.getValue(2,column));
assertEquals(Integer.valueOf(1),result.getValue(3,column));
switch (getDialect()) {
case DB2:
case SQLSERVER:
log.info("SKIPPING","PERCENT_RANK() and CUME_DIST() window function tests");
break;
default :
{
column=0;
result=create().select(TBook_ID(),percentRankOver().orderBy(TBook_ID().desc()),percentRankOver().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc()),cumeDistOver().orderBy(TBook_ID().desc()),cumeDistOver().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().desc())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals("1",result.getValueAsString(0,column));
assertEquals("0.6",result.getValueAsString(1,column).substring(0,3));
assertEquals("0.3",result.getValueAsString(2,column).substring(0,3));
assertEquals("0",result.getValueAsString(3,column));
column++;
assertEquals("1",result.getValueAsString(0,column));
assertEquals("0",result.getValueAsString(1,column));
assertEquals("1",result.getValueAsString(2,column));
assertEquals("0",result.getValueAsString(3,column));
column++;
assertEquals("1",result.getValueAsString(0,column));
assertEquals("0.75",result.getValueAsString(1,column));
assertEquals("0.5",result.getValueAsString(2,column));
assertEquals("0.25",result.getValueAsString(3,column));
column++;
assertEquals("1",result.getValueAsString(0,column));
assertEquals("0.5",result.getValueAsString(1,column));
assertEquals("1",result.getValueAsString(2,column));
assertEquals("0.5",result.getValueAsString(3,column));
break;
}
}
column=0;
result=create().select(TBook_ID(),TBook_ID().maxOver().partitionByOne(),TBook_ID().maxOver().partitionBy(TBook_AUTHOR_ID())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(4),result.getValue(0,column));
assertEquals(Integer.valueOf(4),result.getValue(1,column));
assertEquals(Integer.valueOf(4),result.getValue(2,column));
assertEquals(Integer.valueOf(4),result.getValue(3,column));
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(2),result.getValue(1,column));
assertEquals(Integer.valueOf(4),result.getValue(2,column));
assertEquals(Integer.valueOf(4),result.getValue(3,column));
column=0;
result=create().select(TBook_ID(),TBook_ID().stddevPopOver().partitionByOne(),TBook_ID().stddevSampOver().partitionByOne(),TBook_ID().varPopOver().partitionByOne(),TBook_ID().varSampOver().partitionByOne(),TBook_ID().stddevPopOver().partitionBy(TBook_AUTHOR_ID()),TBook_ID().stddevSampOver().partitionBy(TBook_AUTHOR_ID()),TBook_ID().varPopOver().partitionBy(TBook_AUTHOR_ID()),TBook_ID().varSampOver().partitionBy(TBook_AUTHOR_ID())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
assertEquals("1.118",result.getValueAsString(0,1).substring(0,5));
assertEquals(1.25,result.getValueAsDouble(0,3));
assertEquals(0.5,result.getValueAsDouble(0,5));
assertEquals(0.25,result.getValueAsDouble(0,7));
if (getDialect() != SQLDialect.DB2) {
assertEquals("1.290",result.getValueAsString(0,2).substring(0,5));
assertEquals("1.666",result.getValueAsString(0,4).substring(0,5));
assertEquals("0.707",result.getValueAsString(0,6).substring(0,5));
assertEquals(0.5,result.getValueAsDouble(0,8));
}
column=0;
if (getDialect() == SQLDialect.SQLSERVER) {
log.info("SKIPPING","ROWS UNBOUNDED PRECEDING and similar tests");
return;
}
result=create().select(TBook_ID(),TBook_ID().sumOver().partitionByOne(),TBook_ID().sumOver().partitionBy(TBook_AUTHOR_ID()),TBook_ID().sumOver().orderBy(TBook_ID().asc()).rowsBetweenUnboundedPreceding().andPreceding(1)).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(new BigDecimal("10"),result.getValue(0,column));
assertEquals(new BigDecimal("10"),result.getValue(1,column));
assertEquals(new BigDecimal("10"),result.getValue(2,column));
assertEquals(new BigDecimal("10"),result.getValue(3,column));
column++;
assertEquals(new BigDecimal("3"),result.getValue(0,column));
assertEquals(new BigDecimal("3"),result.getValue(1,column));
assertEquals(new BigDecimal("7"),result.getValue(2,column));
assertEquals(new BigDecimal("7"),result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(new BigDecimal("1"),result.getValue(1,column));
assertEquals(new BigDecimal("3"),result.getValue(2,column));
assertEquals(new BigDecimal("6"),result.getValue(3,column));
column=0;
result=create().select(TBook_ID(),TBook_ID().firstValue().over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_PUBLISHED_IN().asc()).rowsBetweenUnboundedPreceding().andUnboundedFollowing()).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(2),result.getValue(1,column));
assertEquals(Integer.valueOf(3),result.getValue(2,column));
assertEquals(Integer.valueOf(3),result.getValue(3,column));
switch (getDialect()) {
case POSTGRES:
log.info("SKIPPING","FIRST_VALUE(... IGNORE NULLS) window function test");
break;
default :
{
column=0;
result=create().select(TBook_ID(),TBook_ID().firstValue().ignoreNulls().over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_PUBLISHED_IN().asc()).rowsBetweenUnboundedPreceding().andUnboundedFollowing()).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(Integer.valueOf(2),result.getValue(0,column));
assertEquals(Integer.valueOf(2),result.getValue(1,column));
assertEquals(Integer.valueOf(3),result.getValue(2,column));
assertEquals(Integer.valueOf(3),result.getValue(3,column));
break;
}
}
switch (getDialect()) {
case SYBASE:
log.info("SKIPPING","LEAD/LAG tests");
break;
default :
{
column=0;
result=create().select(TBook_ID(),TBook_ID().lead().over().partitionByOne().orderBy(TBook_ID().asc()),TBook_ID().lead().over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),TBook_ID().lead(2).over().partitionByOne().orderBy(TBook_ID().asc()),TBook_ID().lead(2).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),TBook_ID().lead(2,55).over().partitionByOne().orderBy(TBook_ID().asc()),TBook_ID().lead(2,55).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),TBook_ID().lag().over().partitionByOne().orderBy(TBook_ID().asc()),TBook_ID().lag().over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),TBook_ID().lag(2).over().partitionByOne().orderBy(TBook_ID().asc()),TBook_ID().lag(2).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc()),TBook_ID().lag(2,val(55)).over().partitionByOne().orderBy(TBook_ID().asc()),TBook_ID().lag(2,val(55)).over().partitionBy(TBook_AUTHOR_ID()).orderBy(TBook_ID().asc())).from(TBook()).orderBy(TBook_ID().asc()).fetch();
column++;
assertEquals(2,result.getValue(0,column));
assertEquals(3,result.getValue(1,column));
assertEquals(4,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(2,result.getValue(0,column));
assertEquals(null,result.getValue(1,column));
assertEquals(4,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(3,result.getValue(0,column));
assertEquals(4,result.getValue(1,column));
assertEquals(null,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(null,result.getValue(1,column));
assertEquals(null,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(3,result.getValue(0,column));
assertEquals(4,result.getValue(1,column));
assertEquals(55,result.getValue(2,column));
assertEquals(55,result.getValue(3,column));
column++;
assertEquals(55,result.getValue(0,column));
assertEquals(55,result.getValue(1,column));
assertEquals(55,result.getValue(2,column));
assertEquals(55,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(1,result.getValue(1,column));
assertEquals(2,result.getValue(2,column));
assertEquals(3,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(1,result.getValue(1,column));
assertEquals(null,result.getValue(2,column));
assertEquals(3,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(null,result.getValue(1,column));
assertEquals(1,result.getValue(2,column));
assertEquals(2,result.getValue(3,column));
column++;
assertEquals(null,result.getValue(0,column));
assertEquals(null,result.getValue(1,column));
assertEquals(null,result.getValue(2,column));
assertEquals(null,result.getValue(3,column));
column++;
assertEquals(55,result.getValue(0,column));
assertEquals(55,result.getValue(1,column));
assertEquals(1,result.getValue(2,column));
assertEquals(2,result.getValue(3,column));
column++;
assertEquals(55,result.getValue(0,column));
assertEquals(55,result.getValue(1,column));
assertEquals(55,result.getValue(2,column));
assertEquals(55,result.getValue(3,column));
break;
}
}
}
