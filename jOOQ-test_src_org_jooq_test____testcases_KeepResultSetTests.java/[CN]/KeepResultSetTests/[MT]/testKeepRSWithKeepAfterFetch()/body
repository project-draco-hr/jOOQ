{
switch (dialect()) {
case SQLITE:
    log.info("SKIPPING","KeepResultSet tests");
  return;
}
DSLContext create=create(new NoSelectAfterRefreshListener());
Result<B> b2=create.selectFrom(TBook()).keepResultSet(KEEP_AFTER_FETCH).fetch();
B r=b2.get(0);
assertNotNull(b2.resultSet());
assertNotNull(r.resultSet());
testFailUpdateRow(b2.resultSet());
testModifiedBook1(r);
B dbBook=getBook(1);
assertEquals(BOOK_TITLES.get(0),dbBook.getValue(TBook_TITLE()));
assertEquals(BOOK_AUTHOR_IDS.get(0),dbBook.getValue(TBook_AUTHOR_ID()));
r.refresh(TBook_TITLE());
assertEquals(BOOK_TITLES.get(0),r.getValue(TBook_TITLE()));
assertEquals(15,(int)r.getValue(TBook_AUTHOR_ID()));
assertTrue(r.changed());
assertFalse(r.original().equals(r));
r.refresh();
testOriginalBook1(r);
b2.close();
assertNull(b2.resultSet());
testModifiedBook1(r);
r.attach(create().configuration());
r.refresh();
testOriginalBook1(r);
r.attach(create.configuration());
testModifiedBook1(r);
r.refresh();
testOriginalBook1(r);
r.close();
Cursor<Record> c1=create.select().from(TBook().getName()).keepResultSet(KEEP_AFTER_FETCH).fetchLazy();
assertFalse(c1.closesAfterFetch());
while (c1.hasNext()) {
Result<Record> result=c1.fetch(1);
assertNotNull(result.get(0).resultSet());
assertNotNull(result.resultSet());
assertNotNull(c1.resultSet());
}
assertNotNull(c1.resultSet());
c1.close();
assertNull(c1.resultSet());
}
