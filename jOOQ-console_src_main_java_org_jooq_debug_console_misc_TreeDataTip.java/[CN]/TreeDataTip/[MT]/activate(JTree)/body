{
  MouseInputListener dataTipListener=new MouseInputAdapter(){
    @Override public void mouseEntered(    MouseEvent e){
      showTip(e.getPoint());
    }
    @Override public void mouseMoved(    MouseEvent e){
      showTip(e.getPoint());
    }
    @Override public void mouseExited(    MouseEvent e){
      hideTip();
    }
    @Override public void mousePressed(    MouseEvent e){
      hideTip();
    }
    private Popup popup;
    private int currentRow=-1;
    private void hideTip(){
      if (popup != null) {
        popup.hide();
        popup=null;
      }
    }
    private void showTip(    Point mousePosition){
      int row=tree.getRowForLocation(mousePosition.x,mousePosition.y);
      if (row != currentRow) {
        hideTip();
        currentRow=row;
        if (row >= 0) {
          TreePath treePath=tree.getPathForRow(row);
          TreeCellRenderer renderer=tree.getCellRenderer();
          boolean isSelected=false;
          boolean isExpanded=tree.isExpanded(treePath);
          boolean hasFocus=false;
          Object item=treePath.getLastPathComponent();
          boolean isLeaf=tree.getModel().isLeaf(item);
          final JComponent rendererComponent=(JComponent)renderer.getTreeCellRendererComponent(tree,item,isSelected,isExpanded,isLeaf,row,hasFocus);
          rendererComponent.setFont(tree.getFont());
          Rectangle visRect=tree.getVisibleRect();
          Rectangle cellBounds=tree.getPathBounds(treePath);
          Rectangle visibleCellRectangle=cellBounds.intersection(visRect);
          if (!visibleCellRectangle.contains(mousePosition)) {
            return;
          }
          Dimension rendCompDim=rendererComponent.getMinimumSize();
          Rectangle rendCompBounds=new Rectangle(cellBounds.getLocation(),rendCompDim);
          visRect.x-=1000;
          visRect.width+=1000;
          visRect.y-=1000;
          visRect.height+=2000;
          rendCompBounds.height=1;
          if (cellBounds.contains(rendCompBounds) && visRect.contains(rendCompBounds)) {
            return;
          }
          Dimension preferredSize=rendererComponent.getPreferredSize();
          Point tipPosition=cellBounds.getLocation();
          int width=Math.max(cellBounds.width,preferredSize.width);
          int height=cellBounds.height;
          Dimension tipDimension=new Dimension(width,height);
          final Color backgroundColor=tree.getBackground();
class DataTipComponent extends JToolTip {
            private CellRendererPane rendererPane=new CellRendererPane();
            private boolean isHeavyWeight;
            public DataTipComponent(){
              add(rendererPane);
              setFocusable(false);
              setBorder(null);
              enableEvents(AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK | AWTEvent.MOUSE_WHEEL_EVENT_MASK);
            }
            @Override public void updateUI(){
            }
            @Override public boolean contains(            int x,            int y){
              return isHeavyWeight;
            }
            @SuppressWarnings("hiding") @Override public void paintComponent(            Graphics g){
              g.setColor(backgroundColor);
              int width=getWidth();
              int height=getHeight();
              g.fillRect(0,0,width,height);
              g.setColor(Color.black);
              g.drawRect(0,0,width - 1,height - 1);
              g.setClip(1,1,width - 2,height - 2);
              int row=currentRow;
              TreePath treePath=tree.getPathForRow(row);
              boolean isSelected=false;
              boolean isExpanded=tree.isExpanded(treePath);
              boolean hasFocus=false;
              Object item=treePath.getLastPathComponent();
              boolean isLeaf=tree.getModel().isLeaf(item);
              TreeCellRenderer renderer=tree.getCellRenderer();
              JComponent rendererComponent=(JComponent)renderer.getTreeCellRendererComponent(tree,item,isSelected,isExpanded,isLeaf,row,hasFocus);
              rendererComponent.setFont(tree.getFont());
              rendererPane.paintComponent(g,rendererComponent,this,1,1,width - 1,height - 1);
            }
            public void setHeavyWeight(            boolean isHeavyWeight){
              this.isHeavyWeight=isHeavyWeight;
            }
          }
          DataTipComponent dataTipComponent=new DataTipComponent();
          Dimension tipDimensionClipped=new Dimension(tipDimension.width,tipDimension.height);
          Window windowAncestor=SwingUtilities.getWindowAncestor(tree);
          GraphicsConfiguration gc=windowAncestor.getGraphicsConfiguration();
          Rectangle screenBounds=gc.getBounds();
          Point tipScreenPosition=new Point(tipPosition.x,tipPosition.y);
          SwingUtilities.convertPointToScreen(tipScreenPosition,tree);
          Point tipPositionClipped=new Point();
          tipPositionClipped.x=Math.max(tipScreenPosition.x - 1,screenBounds.x);
          tipPositionClipped.y=Math.max(tipScreenPosition.y - 1,screenBounds.y);
          tipDimensionClipped.width=Math.min(screenBounds.x + screenBounds.width - tipPositionClipped.x,tipDimensionClipped.width + 2);
          tipDimensionClipped.height=Math.min(screenBounds.y + screenBounds.height - tipPositionClipped.y,tipDimensionClipped.height + 2);
          SwingUtilities.convertPointFromScreen(tipPositionClipped,tree);
          dataTipComponent.setPreferredSize(tipDimensionClipped);
          SwingUtilities.convertPointToScreen(tipPosition,tree);
          PopupFactory popupFactory=PopupFactory.getSharedInstance();
          popup=popupFactory.getPopup(tree,dataTipComponent,tipPosition.x - 1,tipPosition.y - 1);
          popup.show();
          Window componentWindow=SwingUtilities.windowForComponent(tree);
          Window tipWindow=SwingUtilities.windowForComponent(dataTipComponent);
          boolean isHeavyWeight=tipWindow != null && tipWindow != componentWindow;
          dataTipComponent.setHeavyWeight(isHeavyWeight);
        }
      }
    }
  }
;
  tree.addMouseListener(dataTipListener);
  tree.addMouseMotionListener(dataTipListener);
}
