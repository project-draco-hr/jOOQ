{
  CallableStatement stmt=(CallableStatement)ctx.statement();
  if (type == Blob.class) {
    return (T)stmt.getBlob(index);
  }
 else   if (type == Boolean.class) {
    return (T)wasNull(stmt,Boolean.valueOf(stmt.getBoolean(index)));
  }
 else   if (type == BigInteger.class) {
    BigDecimal result=stmt.getBigDecimal(index);
    return (T)(result == null ? null : result.toBigInteger());
  }
 else   if (type == BigDecimal.class) {
    return (T)stmt.getBigDecimal(index);
  }
 else   if (type == Byte.class) {
    return (T)wasNull(stmt,Byte.valueOf(stmt.getByte(index)));
  }
 else   if (type == byte[].class) {
    return (T)stmt.getBytes(index);
  }
 else   if (type == Clob.class) {
    return (T)stmt.getClob(index);
  }
 else   if (type == Date.class) {
    return (T)stmt.getDate(index);
  }
 else   if (type == Double.class) {
    return (T)wasNull(stmt,Double.valueOf(stmt.getDouble(index)));
  }
 else   if (type == Float.class) {
    return (T)wasNull(stmt,Float.valueOf(stmt.getFloat(index)));
  }
 else   if (type == Integer.class) {
    return (T)wasNull(stmt,Integer.valueOf(stmt.getInt(index)));
  }
 else   if (type == Long.class) {
    return (T)wasNull(stmt,Long.valueOf(stmt.getLong(index)));
  }
 else   if (type == Short.class) {
    return (T)wasNull(stmt,Short.valueOf(stmt.getShort(index)));
  }
 else   if (type == String.class) {
    return (T)stmt.getString(index);
  }
 else   if (type == Time.class) {
    return (T)stmt.getTime(index);
  }
 else   if (type == Timestamp.class) {
    return (T)stmt.getTimestamp(index);
  }
 else   if (type == YearToMonth.class) {
    if (ctx.configuration().getDialect() == POSTGRES) {
      Object object=stmt.getObject(index);
      return (T)(object == null ? null : PostgresUtils.toYearToMonth(object));
    }
 else {
      String string=stmt.getString(index);
      return (T)(string == null ? null : YearToMonth.valueOf(string));
    }
  }
 else   if (type == DayToSecond.class) {
    if (ctx.configuration().getDialect() == POSTGRES) {
      Object object=stmt.getObject(index);
      return (T)(object == null ? null : PostgresUtils.toDayToSecond(object));
    }
 else {
      String string=stmt.getString(index);
      return (T)(string == null ? null : DayToSecond.valueOf(string));
    }
  }
 else   if (type == UByte.class) {
    String string=stmt.getString(index);
    return (T)(string == null ? null : UByte.valueOf(string));
  }
 else   if (type == UShort.class) {
    String string=stmt.getString(index);
    return (T)(string == null ? null : UShort.valueOf(string));
  }
 else   if (type == UInteger.class) {
    String string=stmt.getString(index);
    return (T)(string == null ? null : UInteger.valueOf(string));
  }
 else   if (type == ULong.class) {
    String string=stmt.getString(index);
    return (T)(string == null ? null : ULong.valueOf(string));
  }
 else   if (type == UUID.class) {
switch (ctx.configuration().getDialect()) {
case H2:
case POSTGRES:
{
        return (T)stmt.getObject(index);
      }
case SQLSERVER:
case SYBASE:
default :
{
      return (T)Convert.convert(stmt.getString(index),UUID.class);
    }
}
}
 else if (type.isArray()) {
return (T)convertArray(stmt.getObject(index),(Class<? extends Object[]>)type);
}
 else if (ArrayRecord.class.isAssignableFrom(type)) {
return (T)getArrayRecord(ctx.configuration(),stmt.getArray(index),(Class<? extends ArrayRecord<?>>)type);
}
 else if (EnumType.class.isAssignableFrom(type)) {
return getEnumType(type,stmt.getString(index));
}
 else if (UDTRecord.class.isAssignableFrom(type)) {
switch (ctx.configuration().getDialect()) {
case POSTGRES:
  return (T)pgNewUDTRecord(type,stmt.getObject(index));
}
return (T)stmt.getObject(index,DataTypes.udtRecords());
}
 else if (Result.class.isAssignableFrom(type)) {
ResultSet nested=(ResultSet)stmt.getObject(index);
return (T)new Executor(ctx.configuration()).fetch(nested);
}
 else {
return (T)stmt.getObject(index);
}
}
