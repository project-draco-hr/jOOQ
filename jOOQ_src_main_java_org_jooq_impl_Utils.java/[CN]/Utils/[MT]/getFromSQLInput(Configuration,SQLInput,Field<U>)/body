{
  DataType<U> dataType=field.getDataType();
  Converter<T,U> converter=(Converter<T,U>)field.getConverter();
  Class<T> type=converter.fromType();
  T result=null;
  if (type == Blob.class) {
    result=(T)stream.readBlob();
  }
 else   if (type == Boolean.class) {
    result=(T)wasNull(stream,Boolean.valueOf(stream.readBoolean()));
  }
 else   if (type == BigInteger.class) {
    BigDecimal d=stream.readBigDecimal();
    result=(T)(d == null ? null : d.toBigInteger());
  }
 else   if (type == BigDecimal.class) {
    result=(T)stream.readBigDecimal();
  }
 else   if (type == Byte.class) {
    result=(T)wasNull(stream,Byte.valueOf(stream.readByte()));
  }
 else   if (type == byte[].class) {
    if (dataType.isLob()) {
      Blob blob=null;
      try {
        blob=stream.readBlob();
        result=(T)(blob == null ? null : blob.getBytes(1,(int)blob.length()));
      }
  finally {
        safeFree(blob);
      }
    }
 else {
      result=(T)stream.readBytes();
    }
  }
 else   if (type == Clob.class) {
    result=(T)stream.readClob();
  }
 else   if (type == Date.class) {
    result=(T)stream.readDate();
  }
 else   if (type == Double.class) {
    result=(T)wasNull(stream,Double.valueOf(stream.readDouble()));
  }
 else   if (type == Float.class) {
    result=(T)wasNull(stream,Float.valueOf(stream.readFloat()));
  }
 else   if (type == Integer.class) {
    result=(T)wasNull(stream,Integer.valueOf(stream.readInt()));
  }
 else   if (type == Long.class) {
    result=(T)wasNull(stream,Long.valueOf(stream.readLong()));
  }
 else   if (type == Short.class) {
    result=(T)wasNull(stream,Short.valueOf(stream.readShort()));
  }
 else   if (type == String.class) {
    result=(T)stream.readString();
  }
 else   if (type == Time.class) {
    result=(T)stream.readTime();
  }
 else   if (type == Timestamp.class) {
    result=(T)stream.readTimestamp();
  }
 else   if (type == YearToMonth.class) {
    String string=stream.readString();
    result=(T)(string == null ? null : YearToMonth.valueOf(string));
  }
 else   if (type == DayToSecond.class) {
    String string=stream.readString();
    result=(T)(string == null ? null : DayToSecond.valueOf(string));
  }
 else   if (type == UByte.class) {
    String string=stream.readString();
    result=(T)(string == null ? null : UByte.valueOf(string));
  }
 else   if (type == UShort.class) {
    String string=stream.readString();
    result=(T)(string == null ? null : UShort.valueOf(string));
  }
 else   if (type == UInteger.class) {
    String string=stream.readString();
    result=(T)(string == null ? null : UInteger.valueOf(string));
  }
 else   if (type == ULong.class) {
    String string=stream.readString();
    result=(T)(string == null ? null : ULong.valueOf(string));
  }
 else   if (type == UUID.class) {
    result=(T)Convert.convert(stream.readString(),UUID.class);
  }
 else   if (type.isArray()) {
    Array array=stream.readArray();
    result=(T)(array == null ? null : array.getArray());
  }
 else   if (EnumType.class.isAssignableFrom(type)) {
    result=getEnumType(type,stream.readString());
  }
 else   if (UDTRecord.class.isAssignableFrom(type)) {
    result=(T)stream.readObject();
  }
 else {
    result=(T)unlob(stream.readObject());
  }
  return converter.from(result);
}
