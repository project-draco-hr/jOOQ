{
  ParamType paramType=context.paramType();
  CastMode castMode=context.castMode();
switch (context.configuration().dialect()) {
case MYSQL:
case H2:
case HSQLDB:
case POSTGRES:
case SQLITE:
{
      context.castMode(NEVER).formatSeparator().keyword("limit ").sql(numberOfRows).keyword(" offset ").sql(offsetOrZero).castMode(castMode);
      break;
    }
case CUBRID:
{
    context.castMode(NEVER).formatSeparator().keyword("limit ").sql(offsetOrZero).sql(", ").sql(numberOfRows).castMode(castMode);
    break;
  }
case FIREBIRD:
{
  context.castMode(NEVER).formatSeparator().keyword("rows ").sql(getLowerRownum().add(inline(1))).keyword(" to ").sql(getUpperRownum()).castMode(castMode);
  break;
}
case DERBY:
case SQLSERVER:
case SQLSERVER2012:
{
context.castMode(NEVER).formatSeparator().keyword("offset ").sql(offsetOrZero).keyword(" rows fetch next ").sql(numberOfRows).keyword(" rows only").castMode(castMode);
break;
}
case INGRES:
{
context.paramType(INLINED).formatSeparator().keyword("offset ").sql(offsetOrZero).keyword(" fetch first ").sql(numberOfRows).keyword(" rows only").paramType(paramType);
break;
}
case SYBASE:
{
context.paramType(INLINED).keyword("top ").sql(numberOfRows).keyword(" start at ").sql(offsetPlusOne).paramType(paramType);
break;
}
case DB2:
{
if (offset != null) {
throw new DataAccessException("DB2 does not support offsets in FETCH FIRST ROWS ONLY clause");
}
context.paramType(INLINED).formatSeparator().keyword("fetch first ").sql(numberOfRows).keyword(" rows only").paramType(paramType);
break;
}
case ASE:
case SQLSERVER2008:
{
if (offset != null) {
throw new DataAccessException("Offsets in TOP clause not supported");
}
context.paramType(INLINED).keyword("top ").sql(numberOfRows).paramType(paramType);
break;
}
default :
{
context.castMode(NEVER).formatSeparator().keyword("limit ").sql(numberOfRows).keyword(" offset ").sql(offsetOrZero).castMode(castMode);
break;
}
}
}
