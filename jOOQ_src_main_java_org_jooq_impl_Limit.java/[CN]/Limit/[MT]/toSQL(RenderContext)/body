{
switch (context.getDialect()) {
case MYSQL:
{
      if (context.inline()) {
        context.sql("limit ").sql(getOffset()).sql(", ").sql(getNumberOfRows());
      }
 else {
        context.sql("limit ?, ?");
      }
      break;
    }
case H2:
case HSQLDB:
case POSTGRES:
case SQLITE:
{
    if (context.inline()) {
      context.sql("limit ").sql(getNumberOfRows()).sql(" offset ").sql(getOffset());
    }
 else {
      context.sql("limit ? offset ?");
    }
    break;
  }
case DERBY:
{
  if (context.inline()) {
    context.sql("offset ").sql(getOffset()).sql(" rows fetch next ").sql(getNumberOfRows()).sql(" rows only");
  }
 else {
    context.sql("offset ? rows fetch next ? rows only");
  }
  break;
}
case INGRES:
{
context.sql("offset ").sql(getOffset()).sql(" fetch first ").sql(getNumberOfRows()).sql(" rows only");
break;
}
case SYBASE:
{
context.sql("top ").sql(getNumberOfRows()).sql(" start at ").sql(getOffset() + 1);
break;
}
case DB2:
{
if (getOffset() != 0) {
throw new SQLDialectNotSupportedException("DB2 does not support offsets in FETCH FIRST ROWS ONLY clause");
}
context.sql("fetch first ").sql(getNumberOfRows()).sql(" rows only");
break;
}
case ASE:
case SQLSERVER:
{
if (getOffset() != 0) {
throw new SQLDialectNotSupportedException("Offsets in TOP clause not supported");
}
context.sql("top ").sql(getNumberOfRows());
break;
}
default :
{
if (context.inline()) {
context.sql("limit ").sql(getNumberOfRows()).sql(" offset ").sql(getOffset());
}
 else {
context.sql("limit ? offset ?");
}
break;
}
}
}
