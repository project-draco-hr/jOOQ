{
  Result<?> result=create().selectDistinct(PARAMETERS.PARAMETER_MODE,PARAMETERS.PARAMETER_NAME,PARAMETERS.DATA_TYPE,PARAMETERS.CHARACTER_MAXIMUM_LENGTH,PARAMETERS.NUMERIC_PRECISION,PARAMETERS.NUMERIC_SCALE,PARAMETERS.ORDINAL_POSITION,PARAMETERS.IS_RESULT).from(PARAMETERS).join(ROUTINES).on(PARAMETERS.SPECIFIC_SCHEMA.equal(ROUTINES.SPECIFIC_SCHEMA)).and(PARAMETERS.SPECIFIC_NAME.equal(ROUTINES.SPECIFIC_NAME)).where(PARAMETERS.SPECIFIC_SCHEMA.equal(getSchema().getName())).and(PARAMETERS.SPECIFIC_NAME.equal(this.specificName)).and(PARAMETERS.IS_RESULT.isFalse()).orderBy(PARAMETERS.ORDINAL_POSITION.asc()).fetch();
  for (  Record record : result) {
    String inOut=record.getValue(PARAMETERS.PARAMETER_MODE);
    DataTypeDefinition type=new DefaultDataTypeDefinition(getDatabase(),getSchema(),record.getValue(PARAMETERS.DATA_TYPE),record.getValue(PARAMETERS.CHARACTER_MAXIMUM_LENGTH),record.getValue(PARAMETERS.NUMERIC_PRECISION),record.getValue(PARAMETERS.NUMERIC_SCALE));
    ParameterDefinition parameter=new DefaultParameterDefinition(this,record.getValue(PARAMETERS.PARAMETER_NAME).replaceAll("@",""),record.getValue(PARAMETERS.ORDINAL_POSITION,int.class),type);
    addParameter(InOutDefinition.getFromString(inOut),parameter);
  }
}
