{
  final ModelMapper mapper=new ModelMapper();
  final TypeMap<Record,Book> map=mapper.createTypeMap(Record.class,Book.class);
  List<Book> books=DSL.using(create.configuration().derive(new RecordMapperProvider(){
    @Override public <R extends Record,E>RecordMapper<R,E> provide(    RecordType<R> rowType,    Class<? extends E> type){
      if (Book.class.isAssignableFrom(type)) {
        return new RecordMapper<R,E>(){
          @SuppressWarnings("unchecked") @Override public E map(          R record){
            return (E)map.map(record);
          }
        }
;
      }
      throw new RuntimeException();
    }
  }
)).select().from(T_BOOK.join(T_AUTHOR).on(T_BOOK.AUTHOR_ID.eq(T_AUTHOR.ID))).orderBy(T_BOOK.ID).fetchInto(Book.class);
  System.out.println(books);
}
