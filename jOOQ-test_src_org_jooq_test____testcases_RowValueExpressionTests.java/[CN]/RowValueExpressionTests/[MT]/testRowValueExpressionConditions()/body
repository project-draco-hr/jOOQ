{
  assertEquals(1,(int)create().selectOne().where(row(1,2,3).equal(1,2,3)).and(row(1,2,3).ne(3,2,1)).fetchOne(0,Integer.class));
  assertEquals(1,(int)create().selectOne().where(row(1,2,3).in(row(3,3,3),row(2,3,1),row(1,2,3))).and(row(1,2,3).notIn(row(3,3,3),row(2,3,1))).fetchOne(0,Integer.class));
  assertEquals(asList(1,2),create().select(TBook_ID()).from(TBook()).where(row(TBook_ID()).equal(1)).or(row(TBook_ID(),inline(2)).equal(2,2)).or(row(TBook_ID(),inline(2),val(3)).equal(1,2,3)).or(row("1","2","3","4").equal(TBook_TITLE(),TBook_TITLE(),TBook_TITLE(),TBook_TITLE())).or(row(TBook_ID(),TBook_ID(),TBook_ID(),TBook_ID(),TBook_ID()).notEqual(row(TBook_ID(),TBook_ID(),TBook_ID(),TBook_ID(),TBook_ID()))).or(row(1,2,3,4,5,6).eq(6,5,4,3,2,1)).or(row(1,2,3,4,5,6,7).eq(1,2,3,4,5,6,0)).or(row(1,2,3,4,5,6,7,8).eq(1,2,3,4,5,6,7,0)).or(row(1,2,3,4,5,6,7,8,9).eq(1,2,3,4,5,6,7,8,0)).orderBy(TBook_ID()).fetch(TBook_ID()));
  if (asList(ASE,DERBY,FIREBIRD,INGRES,SQLSERVER,SQLITE,SYBASE,H2).contains(getDialect())) {
    log.info("SKIPPING","Tuples and subselects");
  }
 else {
    if (!asList(DB2).contains(getDialect())) {
      assertEquals(1,(int)create().selectOne().where(row(1,2,3).in(select(val(1),val(2),val(3)))).and(row(1,2,3).notIn(select(val(3),val(2),val(1)))).and(row(1,2,"3").equal(select(val(1),val(2),val("3")))).and(row(1,"2",3).notEqual(select(val(1),val("4"),val(3)))).fetchOne(0,Integer.class));
    }
    if (!asList(CUBRID).contains(getDialect())) {
      assertEquals(1,(int)create().selectOne().where(row(1,2,3).in(select(val(1),val(2),val(3)))).and(row(3,"2").notIn(select(val(2),val("3")).union(select(val(4),val("3"))))).fetchOne(0,Integer.class));
    }
  }
}
