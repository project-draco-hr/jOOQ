{
  jOOQAbstractTest.reset=false;
  assertEquals(1,create().insertInto(TBooleans()).set(TBooleans_ID(),1).set(TBooleans_BOOLEAN_10(),Boolean_10.ZERO).set(TBooleans_Boolean_TF_LC(),Boolean_TF_LC.FALSE).set(TBooleans_Boolean_TF_UC(),Boolean_TF_UC.FALSE).set(TBooleans_Boolean_YES_NO_LC(),Boolean_YES_NO_LC.no).set(TBooleans_Boolean_YES_NO_UC(),Boolean_YES_NO_UC.NO).set(TBooleans_Boolean_YN_LC(),Boolean_YN_LC.n).set(TBooleans_Boolean_YN_UC(),Boolean_YN_UC.N).execute());
  assertEquals(1,create().insertInto(TBooleans()).set(TBooleans_ID(),2).set(TBooleans_BOOLEAN_10(),Boolean_10.ONE).set(TBooleans_Boolean_TF_LC(),Boolean_TF_LC.TRUE).set(TBooleans_Boolean_TF_UC(),Boolean_TF_UC.TRUE).set(TBooleans_Boolean_YES_NO_LC(),Boolean_YES_NO_LC.yes).set(TBooleans_Boolean_YES_NO_UC(),Boolean_YES_NO_UC.YES).set(TBooleans_Boolean_YN_LC(),Boolean_YN_LC.y).set(TBooleans_Boolean_YN_UC(),Boolean_YN_UC.Y).execute());
  Result<?> result=create().selectFrom(TBooleans()).where(TBooleans_ID().in(1,2)).and(TBooleans_BOOLEAN_10().in(Boolean_10.ONE,Boolean_10.ZERO)).and(TBooleans_Boolean_TF_LC().in(Boolean_TF_LC.TRUE,Boolean_TF_LC.FALSE)).and(TBooleans_Boolean_TF_UC().in(Boolean_TF_UC.TRUE,Boolean_TF_UC.FALSE)).and(TBooleans_Boolean_YES_NO_LC().in(Boolean_YES_NO_LC.yes,Boolean_YES_NO_LC.no)).and(TBooleans_Boolean_YES_NO_UC().in(Boolean_YES_NO_UC.YES,Boolean_YES_NO_UC.NO)).and(TBooleans_Boolean_YN_LC().in(Boolean_YN_LC.y,Boolean_YN_LC.n)).and(TBooleans_Boolean_YN_UC().in(Boolean_YN_UC.Y,Boolean_YN_UC.N)).orderBy(TBooleans_ID().asc()).fetch();
  assertEquals(1,(int)result.getValue(0,TBooleans_ID()));
  assertEquals(2,(int)result.getValue(1,TBooleans_ID()));
  assertEquals(Boolean_10.ZERO,result.getValue(0,TBooleans_BOOLEAN_10()));
  assertEquals(Boolean_10.ONE,result.getValue(1,TBooleans_BOOLEAN_10()));
  assertEquals(Boolean_TF_LC.FALSE,result.getValue(0,TBooleans_Boolean_TF_LC()));
  assertEquals(Boolean_TF_LC.TRUE,result.getValue(1,TBooleans_Boolean_TF_LC()));
  assertEquals(Boolean_TF_UC.FALSE,result.getValue(0,TBooleans_Boolean_TF_UC()));
  assertEquals(Boolean_TF_UC.TRUE,result.getValue(1,TBooleans_Boolean_TF_UC()));
  assertEquals(Boolean_YES_NO_LC.no,result.getValue(0,TBooleans_Boolean_YES_NO_LC()));
  assertEquals(Boolean_YES_NO_LC.yes,result.getValue(1,TBooleans_Boolean_YES_NO_LC()));
  assertEquals(Boolean_YES_NO_UC.NO,result.getValue(0,TBooleans_Boolean_YES_NO_UC()));
  assertEquals(Boolean_YES_NO_UC.YES,result.getValue(1,TBooleans_Boolean_YES_NO_UC()));
  assertEquals(Boolean_YN_LC.n,result.getValue(0,TBooleans_Boolean_YN_LC()));
  assertEquals(Boolean_YN_LC.y,result.getValue(1,TBooleans_Boolean_YN_LC()));
  assertEquals(Boolean_YN_UC.N,result.getValue(0,TBooleans_Boolean_YN_UC()));
  assertEquals(Boolean_YN_UC.Y,result.getValue(1,TBooleans_Boolean_YN_UC()));
  try {
    Reflect booleans=on(TBooleans().getClass().getPackage().getName() + ".pojos." + TBooleans().getClass().getSimpleName());
    List<Object> b=create().selectFrom(TBooleans()).orderBy(TBooleans_ID().asc()).fetchInto((Class<?>)booleans.get());
    assertEquals(2,b.size());
    assertEquals(1,on(b.get(0)).call("getId").get());
    assertEquals(2,on(b.get(1)).call("getId").get());
    assertEquals(Boolean_10.ZERO,on(b.get(0)).call("getOneZero").get());
    assertEquals(Boolean_10.ONE,on(b.get(1)).call("getOneZero").get());
    assertEquals(Boolean_TF_LC.FALSE,on(b.get(0)).call("getTrueFalseLc").get());
    assertEquals(Boolean_TF_LC.TRUE,on(b.get(1)).call("getTrueFalseLc").get());
    assertEquals(Boolean_TF_UC.FALSE,on(b.get(0)).call("getTrueFalseUc").get());
    assertEquals(Boolean_TF_UC.TRUE,on(b.get(1)).call("getTrueFalseUc").get());
    assertEquals(Boolean_YES_NO_LC.no,on(b.get(0)).call("getYesNoLc").get());
    assertEquals(Boolean_YES_NO_LC.yes,on(b.get(1)).call("getYesNoLc").get());
    assertEquals(Boolean_YES_NO_UC.NO,on(b.get(0)).call("getYesNoUc").get());
    assertEquals(Boolean_YES_NO_UC.YES,on(b.get(1)).call("getYesNoUc").get());
    assertEquals(Boolean_YN_LC.n,on(b.get(0)).call("getYNLc").get());
    assertEquals(Boolean_YN_LC.y,on(b.get(1)).call("getYNLc").get());
    assertEquals(Boolean_YN_UC.N,on(b.get(0)).call("getYNUc").get());
    assertEquals(Boolean_YN_UC.Y,on(b.get(1)).call("getYNUc").get());
  }
 catch (  ReflectException e) {
    log.info("SKIPPING","Generated POJO tests");
  }
}
