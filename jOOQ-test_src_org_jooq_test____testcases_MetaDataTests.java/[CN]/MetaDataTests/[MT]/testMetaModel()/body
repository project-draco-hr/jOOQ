{
  Schema schema=TAuthor().getSchema();
  if (schema != null) {
    int sequences=0;
    if (cSequences() != null) {
      sequences++;
      if (getDialect() == DB2 || getDialect() == H2) {
        sequences++;
      }
 else       if (getDialect() == CUBRID) {
        sequences+=3;
      }
 else       if (getDialect() == ORACLE) {
        sequences+=5;
      }
    }
    assertEquals(sequences,schema.getSequences().size());
    for (    Table<?> table : schema.getTables()) {
      assertEquals(table,schema.getTable(table.getName()));
    }
    for (    UDT<?> udt : schema.getUDTs()) {
      assertEquals(udt,schema.getUDT(udt.getName()));
    }
    for (    Sequence<?> sequence : schema.getSequences()) {
      assertEquals(sequence,schema.getSequence(sequence.getName()));
    }
    assertTrue(schema.getTables().contains(T639()));
    assertTrue(schema.getTables().contains(TAuthor()));
    assertTrue(schema.getTables().contains(TBook()));
    assertTrue(schema.getTables().contains(TBookStore()));
    assertTrue(schema.getTables().contains(TBookToBookStore()));
    if (TDirectory() != null) {
      schema.getTables().contains(TDirectory());
    }
    if (TTriggers() != null) {
      schema.getTables().contains(TTriggers());
    }
    if (TUnsigned() != null) {
      schema.getTables().contains(TUnsigned());
    }
    if (TIdentity() != null) {
      schema.getTables().contains(TIdentity());
    }
    if (TIdentityPK() != null) {
      schema.getTables().contains(TIdentityPK());
    }
    if (cUAddressType() == null) {
      assertEquals(0,schema.getUDTs().size());
    }
 else     if (getDialect() == ORACLE) {
      assertEquals(7,schema.getUDTs().size());
    }
 else {
      assertEquals(2,schema.getUDTs().size());
    }
  }
  assertNull(TAuthor().getIdentity());
  assertNull(TBook().getIdentity());
  if (TIdentity() != null || TIdentityPK() != null) {
    if (TIdentity() != null) {
      assertEquals(TIdentity(),TIdentity().getIdentity().getTable());
      assertEquals(TIdentity_ID(),TIdentity().getIdentity().getField());
    }
    if (TIdentityPK() != null) {
      assertEquals(TIdentityPK(),TIdentityPK().getIdentity().getTable());
      assertEquals(TIdentityPK_ID(),TIdentityPK().getIdentity().getField());
    }
  }
 else {
    log.info("SKIPPING","Identity tests");
  }
  assertNotNull(TAuthor().getMainKey());
  assertNotNull(TAuthor().getKeys());
  assertTrue(TAuthor().getKeys().contains(TAuthor().getMainKey()));
  assertEquals(1,TAuthor().getKeys().size());
  assertEquals(1,TAuthor().getMainKey().getFields().size());
  assertEquals(TAuthor_ID(),TAuthor().getMainKey().getFields().get(0));
  assertEquals(Record1.class,TAuthor().getRecordType().getMethod("key").getReturnType());
  assertTrue(TAuthor().getRecordType().getMethod("key").toGenericString().contains("org.jooq.Record1<java.lang.Integer>"));
  assertEquals(Record2.class,TBookToBookStore().getRecordType().getMethod("key").getReturnType());
  assertTrue(TBookToBookStore().getRecordType().getMethod("key").toGenericString().contains("org.jooq.Record2<java.lang.String, java.lang.Integer>"));
  if (supportsReferences()) {
    assertEquals(0,TAuthor().getReferences().size());
    assertEquals(2,TAuthor().getMainKey().getReferences().size());
    assertEquals(TBook(),TAuthor().getMainKey().getReferences().get(0).getTable());
    assertEquals(TBook(),TAuthor().getMainKey().getReferences().get(1).getTable());
    assertEquals(Arrays.asList(),TAuthor().getReferencesTo(TBook()));
    assertTrue(TBook().getReferences().containsAll(TAuthor().getReferencesFrom(TBook())));
    assertTrue(TBook().getReferences().containsAll(TBook().getReferencesFrom(TAuthor())));
    assertEquals(TBook().getReferencesTo(TAuthor()),TAuthor().getReferencesFrom(TBook()));
    Table<A> a=TAuthor().as("a");
    Table<B> b=TBook().as("b");
    assertEquals(0,a.getReferences().size());
    assertEquals(Arrays.asList(),a.getReferencesTo(b));
    assertEquals(TBook().getReferencesTo(TAuthor()),TBook().getReferencesTo(a));
    assertEquals(TBook().getReferencesTo(TAuthor()),b.getReferencesTo(a));
    assertEquals(TBook().getReferencesTo(TAuthor()),b.getReferencesTo(TAuthor()));
    if (a instanceof UpdatableTable && b instanceof UpdatableTable) {
      UpdatableTable<A> ua=(UpdatableTable<A>)a;
      UpdatableTable<B> ub=(UpdatableTable<B>)b;
      assertEquals(2,ua.getMainKey().getReferences().size());
      assertEquals(TBook(),ua.getMainKey().getReferences().get(0).getTable());
      assertEquals(TBook(),ua.getMainKey().getReferences().get(1).getTable());
      assertTrue(b.getReferences().containsAll(ua.getReferencesFrom(b)));
      assertTrue(b.getReferences().containsAll(ub.getReferencesFrom(a)));
      assertEquals(b.getReferencesTo(a),ua.getReferencesFrom(b));
      assertEquals(TBook().getReferencesTo(a),ua.getReferencesFrom(b));
      assertEquals(b.getReferencesTo(a),TAuthor().getReferencesFrom(b));
    }
  }
 else {
    log.info("SKIPPING","References tests");
  }
  assertEquals(0,TAuthor_LAST_NAME().getDataType().precision());
  assertEquals(0,TAuthor_LAST_NAME().getDataType().scale());
  assertEquals(50,TAuthor_LAST_NAME().getDataType().length());
  for (  Field<?> field : T639().getFields()) {
    if ("BYTE".equalsIgnoreCase(field.getName())) {
      assertEquals(Byte.class,field.getType());
      assertEquals(SQLDataType.TINYINT,field.getDataType());
      assertEquals(3,field.getDataType().precision());
      assertEquals(0,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("SHORT".equalsIgnoreCase(field.getName())) {
      assertEquals(Short.class,field.getType());
      assertEquals(SQLDataType.SMALLINT,field.getDataType());
      assertEquals(5,field.getDataType().precision());
      assertEquals(0,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("INTEGER".equalsIgnoreCase(field.getName())) {
      assertEquals(Integer.class,field.getType());
      assertEquals(SQLDataType.INTEGER,field.getDataType());
      assertEquals(10,field.getDataType().precision());
      assertEquals(0,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("LONG".equalsIgnoreCase(field.getName())) {
      assertEquals(Long.class,field.getType());
      assertEquals(SQLDataType.BIGINT,field.getDataType());
      assertEquals(19,field.getDataType().precision());
      assertEquals(0,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("BYTE_DECIMAL".equalsIgnoreCase(field.getName())) {
      assertEquals(Byte.class,field.getType());
      assertEquals(SQLDataType.TINYINT,field.getDataType());
      assertEquals(3,field.getDataType().precision());
      assertEquals(0,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("SHORT_DECIMAL".equalsIgnoreCase(field.getName())) {
      assertEquals(Short.class,field.getType());
      assertEquals(SQLDataType.SMALLINT,field.getDataType());
      assertEquals(5,field.getDataType().precision());
      assertEquals(0,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("INTEGER_DECIMAL".equalsIgnoreCase(field.getName())) {
      assertEquals(Integer.class,field.getType());
      assertEquals(SQLDataType.INTEGER,field.getDataType());
      assertEquals(10,field.getDataType().precision());
      assertEquals(0,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("LONG_DECIMAL".equalsIgnoreCase(field.getName())) {
      assertEquals(Long.class,field.getType());
      assertEquals(SQLDataType.BIGINT,field.getDataType());
      assertEquals(19,field.getDataType().precision());
      assertEquals(0,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("BIG_INTEGER".equalsIgnoreCase(field.getName())) {
      assertEquals(BigInteger.class,field.getType());
      assertEquals(SQLDataType.DECIMAL_INTEGER.getType(),field.getDataType().getType());
      assertTrue(field.getDataType().precision() > 0);
      assertEquals(0,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("BIG_DECIMAL".equalsIgnoreCase(field.getName()) && getDialect() != SQLDialect.ORACLE && getDialect() != SQLDialect.POSTGRES && getDialect() != SQLDialect.SQLITE && getDialect() != SQLDialect.SQLSERVER) {
      assertEquals(BigDecimal.class,field.getType());
      assertEquals(SQLDataType.DECIMAL.getType(),field.getDataType().getType());
      assertTrue(field.getDataType().precision() > 0);
      assertEquals(5,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("BIG_DECIMAL".equalsIgnoreCase(field.getName())) {
      assertEquals(BigDecimal.class,field.getType());
      assertEquals(SQLDataType.NUMERIC.getType(),field.getDataType().getType());
      assertTrue(field.getDataType().precision() > 0);
      assertEquals(5,field.getDataType().scale());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("FLOAT".equalsIgnoreCase(field.getName()) && getDialect() != SQLDialect.HSQLDB && getDialect() != SQLDialect.MYSQL && getDialect() != SQLDialect.SYBASE) {
      assertEquals(Float.class,field.getType());
      assertEquals(SQLDataType.REAL,field.getDataType());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("FLOAT".equalsIgnoreCase(field.getName()) && getDialect() != SQLDialect.MYSQL && getDialect() != SQLDialect.SYBASE) {
      assertEquals(Double.class,field.getType());
      assertEquals(SQLDataType.DOUBLE,field.getDataType());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("FLOAT".equalsIgnoreCase(field.getName())) {
      assertEquals(Double.class,field.getType());
      assertEquals(SQLDataType.FLOAT,field.getDataType());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("DOUBLE".equalsIgnoreCase(field.getName()) && getDialect() != SQLDialect.SQLSERVER && getDialect() != SQLDialect.ASE) {
      assertEquals(Double.class,field.getType());
      assertEquals(SQLDataType.DOUBLE,field.getDataType());
      assertEquals(0,field.getDataType().length());
    }
 else     if ("DOUBLE".equalsIgnoreCase(field.getName())) {
      assertEquals(Double.class,field.getType());
      assertEquals(SQLDataType.FLOAT,field.getDataType());
      assertEquals(0,field.getDataType().length());
    }
  }
}
