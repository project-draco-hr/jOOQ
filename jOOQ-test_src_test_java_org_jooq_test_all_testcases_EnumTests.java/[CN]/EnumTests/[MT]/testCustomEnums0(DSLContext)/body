{
  jOOQAbstractTest.reset=false;
  insertBooleans(create);
  Result<?> result=create.selectFrom(TBooleans()).where(TBooleans_ID().in(1,2,3)).and(TBooleans_BOOLEAN_10().in(Boolean_10.ONE,Boolean_10.ZERO).or(TBooleans_BOOLEAN_10().isNull())).and(TBooleans_Boolean_TF_LC().in(Boolean_TF_LC.TRUE,Boolean_TF_LC.FALSE).or(TBooleans_Boolean_TF_LC().isNull())).and(TBooleans_Boolean_TF_UC().in(Boolean_TF_UC.TRUE,Boolean_TF_UC.FALSE).or(TBooleans_Boolean_TF_UC().isNull())).and(TBooleans_Boolean_YES_NO_LC().in(Boolean_YES_NO_LC.yes,Boolean_YES_NO_LC.no).or(TBooleans_Boolean_YES_NO_LC().isNull())).and(TBooleans_Boolean_YES_NO_UC().in(Boolean_YES_NO_UC.YES,Boolean_YES_NO_UC.NO).or(TBooleans_Boolean_YES_NO_UC().isNull())).and(TBooleans_Boolean_YN_LC().in(Boolean_YN_LC.y,Boolean_YN_LC.n).or(TBooleans_Boolean_YN_LC().isNull())).and(TBooleans_Boolean_YN_UC().in(Boolean_YN_UC.Y,Boolean_YN_UC.N).or(TBooleans_Boolean_YN_UC().isNull())).orderBy(TBooleans_ID().asc()).fetch();
  assertEquals(1,(int)result.getValue(0,TBooleans_ID()));
  assertEquals(2,(int)result.getValue(1,TBooleans_ID()));
  assertEquals(3,(int)result.getValue(2,TBooleans_ID()));
  assertEquals(Boolean_10.ZERO,result.getValue(0,TBooleans_BOOLEAN_10()));
  assertEquals(Boolean_10.ONE,result.getValue(1,TBooleans_BOOLEAN_10()));
  assertNull(result.getValue(2,TBooleans_BOOLEAN_10()));
  assertEquals(Boolean_TF_LC.FALSE,result.getValue(0,TBooleans_Boolean_TF_LC()));
  assertEquals(Boolean_TF_LC.TRUE,result.getValue(1,TBooleans_Boolean_TF_LC()));
  assertNull(result.getValue(2,TBooleans_Boolean_TF_LC()));
  assertEquals(Boolean_TF_UC.FALSE,result.getValue(0,TBooleans_Boolean_TF_UC()));
  assertEquals(Boolean_TF_UC.TRUE,result.getValue(1,TBooleans_Boolean_TF_UC()));
  assertNull(result.getValue(2,TBooleans_Boolean_TF_UC()));
  assertEquals(Boolean_YES_NO_LC.no,result.getValue(0,TBooleans_Boolean_YES_NO_LC()));
  assertEquals(Boolean_YES_NO_LC.yes,result.getValue(1,TBooleans_Boolean_YES_NO_LC()));
  assertNull(result.getValue(2,TBooleans_Boolean_YES_NO_LC()));
  assertEquals(Boolean_YES_NO_UC.NO,result.getValue(0,TBooleans_Boolean_YES_NO_UC()));
  assertEquals(Boolean_YES_NO_UC.YES,result.getValue(1,TBooleans_Boolean_YES_NO_UC()));
  assertNull(result.getValue(2,TBooleans_Boolean_YES_NO_UC()));
  assertEquals(Boolean_YN_LC.n,result.getValue(0,TBooleans_Boolean_YN_LC()));
  assertEquals(Boolean_YN_LC.y,result.getValue(1,TBooleans_Boolean_YN_LC()));
  assertNull(result.getValue(2,TBooleans_Boolean_YN_LC()));
  assertEquals(Boolean_YN_UC.N,result.getValue(0,TBooleans_Boolean_YN_UC()));
  assertEquals(Boolean_YN_UC.Y,result.getValue(1,TBooleans_Boolean_YN_UC()));
  assertNull(result.getValue(2,TBooleans_Boolean_YN_UC()));
  assertFalse(result.getValue(0,TBooleans_C()));
  assertTrue(result.getValue(1,TBooleans_C()));
  assertNull(result.getValue(2,TBooleans_C()));
  assertFalse(result.getValue(0,TBooleans_VC()));
  assertTrue(result.getValue(1,TBooleans_VC()));
  assertNull(result.getValue(2,TBooleans_VC()));
  assertFalse(result.getValue(0,TBooleans_N()));
  assertTrue(result.getValue(1,TBooleans_N()));
  assertNull(result.getValue(2,TBooleans_N()));
  if (TBooleansPojo() == null) {
    log.info("SKIPPING","Generated POJO tests");
  }
 else {
    List<Object> b=create.selectFrom(TBooleans()).orderBy(TBooleans_ID().asc()).fetchInto(TBooleansPojo());
    assertEquals(3,b.size());
    assertEquals(1,(int)on(b.get(0)).call("getId").get());
    assertEquals(2,(int)on(b.get(1)).call("getId").get());
    assertEquals(3,(int)on(b.get(2)).call("getId").get());
    assertEquals(Boolean_10.ZERO,on(b.get(0)).call("getOneZero").get());
    assertEquals(Boolean_10.ONE,on(b.get(1)).call("getOneZero").get());
    assertNull(on(b.get(2)).call("getOneZero").get());
    assertEquals(Boolean_TF_LC.FALSE,on(b.get(0)).call("getTrueFalseLc").get());
    assertEquals(Boolean_TF_LC.TRUE,on(b.get(1)).call("getTrueFalseLc").get());
    assertNull(on(b.get(2)).call("getTrueFalseLc").get());
    assertEquals(Boolean_TF_UC.FALSE,on(b.get(0)).call("getTrueFalseUc").get());
    assertEquals(Boolean_TF_UC.TRUE,on(b.get(1)).call("getTrueFalseUc").get());
    assertNull(on(b.get(2)).call("getTrueFalseUc").get());
    assertEquals(Boolean_YES_NO_LC.no,on(b.get(0)).call("getYesNoLc").get());
    assertEquals(Boolean_YES_NO_LC.yes,on(b.get(1)).call("getYesNoLc").get());
    assertNull(on(b.get(2)).call("getYesNoLc").get());
    assertEquals(Boolean_YES_NO_UC.NO,on(b.get(0)).call("getYesNoUc").get());
    assertEquals(Boolean_YES_NO_UC.YES,on(b.get(1)).call("getYesNoUc").get());
    assertNull(on(b.get(2)).call("getYesNoUc").get());
    assertEquals(Boolean_YN_LC.n,on(b.get(0)).call("getYNLc").get());
    assertEquals(Boolean_YN_LC.y,on(b.get(1)).call("getYNLc").get());
    assertNull(on(b.get(2)).call("getYNLc").get());
    assertEquals(Boolean_YN_UC.N,on(b.get(0)).call("getYNUc").get());
    assertEquals(Boolean_YN_UC.Y,on(b.get(1)).call("getYNUc").get());
    assertNull(on(b.get(2)).call("getYNUc").get());
  }
}
