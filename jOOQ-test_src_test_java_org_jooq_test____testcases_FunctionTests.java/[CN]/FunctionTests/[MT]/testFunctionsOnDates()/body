{
  SelectQuery<?> q1=create().selectQuery();
  Field<Timestamp> now=currentTimestamp();
  Field<Timestamp> ts=now.as("ts");
  Field<Date> date=currentDate().as("d");
  Field<Time> time=currentTime().as("t");
  Field<Integer> year1=extract(now,DatePart.YEAR).as("y1");
  Field<Integer> month1=extract(now,DatePart.MONTH).as("m1");
  Field<Integer> day1=extract(now,DatePart.DAY).as("dd1");
  Field<Integer> hour1=extract(now,DatePart.HOUR).as("h1");
  Field<Integer> minute1=extract(now,DatePart.MINUTE).as("mn1");
  Field<Integer> second1=extract(now,DatePart.SECOND).as("sec1");
  Field<Integer> year2=year(now).as("y2");
  Field<Integer> month2=month(now).as("m2");
  Field<Integer> day2=day(now).as("dd2");
  Field<Integer> hour2=hour(now).as("h2");
  Field<Integer> minute2=minute(now).as("mn2");
  Field<Integer> second2=second(now).as("sec2");
  q1.addSelect(ts,date,time,year1,month1,day1,hour1,minute1,second1,year2,month2,day2,hour2,minute2,second2);
  q1.execute();
  Record record=q1.getResult().get(0);
  String timestamp=record.getValue(ts).toString().replaceFirst("\\.\\d+$","");
  assertEquals(timestamp.split(" ")[0],record.getValue(date).toString());
  if (dialect() != SQLDialect.POSTGRES) {
    assertEquals(timestamp.split(" ")[1],record.getValue(time).toString());
  }
  assertEquals(Integer.valueOf(timestamp.split(" ")[0].split("-")[0]),record.getValue(year1));
  assertEquals(Integer.valueOf(timestamp.split(" ")[0].split("-")[1]),record.getValue(month1));
  assertEquals(Integer.valueOf(timestamp.split(" ")[0].split("-")[2]),record.getValue(day1));
  assertEquals(Integer.valueOf(timestamp.split(" ")[1].split(":")[0]),record.getValue(hour1));
  assertEquals(Integer.valueOf(timestamp.split(" ")[1].split(":")[1]),record.getValue(minute1));
  assertEquals(Integer.valueOf(timestamp.split(" ")[1].split(":")[2].split("\\.")[0]),record.getValue(second1));
  assertEquals(record.getValue(year1),record.getValue(year2));
  assertEquals(record.getValue(month1),record.getValue(month2));
  assertEquals(record.getValue(day1),record.getValue(day2));
  assertEquals(record.getValue(hour1),record.getValue(hour2));
  assertEquals(record.getValue(minute1),record.getValue(minute2));
  assertEquals(record.getValue(second1),record.getValue(second2));
  Field<Timestamp> tomorrow=now.add(1);
  Field<Timestamp> yesterday=now.sub(1);
  record=create().select(tomorrow,ts,yesterday).fetchOne();
  Calendar cal=Calendar.getInstance();
  long tNow=cal.getTimeInMillis();
  cal.add(Calendar.DATE,1);
  long tTomorrow=cal.getTimeInMillis();
  cal.add(Calendar.DATE,-2);
  long tYesterday=cal.getTimeInMillis();
  assertEquals((tNow - tYesterday) / 1000,(record.getValue(ts).getTime() / 1000 - record.getValue(yesterday).getTime() / 1000));
  assertEquals((tTomorrow - tNow) / 1000,(record.getValue(tomorrow).getTime() / 1000 - record.getValue(ts).getTime() / 1000));
}
